# Android Configuration Bash Script to be Sourced.

# NOTE:
#
# The userful-android toolchain was generated by first unzipping
# android-ndk-r16 at $NDK_DIR and then running:
#
# cd <NDK_DIR>
# build/tools/make_standalone_toolchain.py \
#  --arch arm --api 21 -v --install-dir=toolchains/userful-android
#
# the option --rtlib=compiler_rt doesn't seem to be supported with arm yet.

TOP_DIR="$(dirname $(realpath ${BASH_SOURCE[0]}))"
source ${TOP_DIR}/common.cfg

ANDROID_ABI=21
FLOAT_ABI=soft

HOST_CPU=arm
HOST_SUB=v7
HOST_VAR=-a
HOST_ARCH="${HOST_CPU}${HOST_SUB}${HOST_VAR}"
HOST_MAKE="none"
HOST_OS="linux"
HOST_ABI="androideabi"
HOST_ABI_N="${HOST_ABI}${ANDROID_ABI}"
HOST="${HOST_ARCH}-${HOST_MAKE}-${HOST_OS}-${HOST_ABI_N}"
TARGET="${HOST_CPU}${HOST_SUB}-${HOST_MAKE}-${HOST_OS}-${HOST_ABI_N}"
TARGET_OS="android"

TRIPLE_CPU="${HOST_CPU}"
TRIPLE_OS="${HOST_OS}"
TRIPLE_ABI="${HOST_ABI}"
TRIPLE="${TRIPLE_CPU}-${TRIPLE_OS}-${TRIPLE_ABI}"

BUILD_CPU=${HOSTTYPE}
BUILD_SUB=""
BUILD_ARCH="${BUILD_CPU}${BUILD_SUB}"
BUILD_MAKE="pc"
BUILD_OS="linux"
BUILD_ABI="gnu"
BUILD="${BUILD_CPU}-${BUILD_MAKE}-${BUILD_OS}-${BUILD_ABI}"

TOOLCHAIN_TRIPLE="${TOOLCHAIN_PREFIX}/${TRIPLE}"
TOOLCHAIN_PATH="${TOOLCHAIN_PREFIX}/bin"
TOOLCHAIN_BIN="${TOOLCHAIN_TRIPLE}/bin"
TOOLCHAIN_LIBS="${TOOLCHAIN_PREFIX}/lib"
TOOLCHAIN_GCC="${TOOLCHAIN_LIBS}/gcc/${TRIPLE}/${GCC_VER}"
TOOLCHAIN_GCC_ARCH="${TOOLCHAIN_GCC}/${HOST_ARCH}"
TOOLCHAIN_GCC_ARCH_FLT="${TOOLCHAIN_GCC}/${HOST_ARCH}/${FLOAT_ABI}"

SYSROOT=${NDK_DIR}/sysroot
SYSINC=${NDK_DIR}/sources/android
PLATFORM=${NDK_DIR}/platforms/android-${ANDROID_ABI}/arch-${HOST_CPU}

#
# Set up the envrionment for building. 
#

# of course, this first batch assumes already build and installed tools
export ORCC=${TOOLBIN_DIR}/orcc
# export GNULIB_TOOL=${TOOLBIN_DIR}/gnulib-tool

# export TRIPLE
export PKG_CONGIG="$(which pkg-config)"
export PKG_CONFIG_LIBDIR="${TOOLCHAIN_LIBS}/pkgconfig"
export PKG_CONFIG_PATH="${PLATFORM}/usr/lib/pkgconfig:${LIB_DIR}/pkgconfig/"
export PATH="${PATH}:${TOOLCHAIN_PATH}:${TOOLCHAIN_BIN}"

export CC="${TRIPLE}-clang"
export AR="${TRIPLE}-ar"
export AS="${TRIPLE}-as"
export LD="${TRIPLE}-ld"
export RANDLIB="${TRIPLE}-ranlib"
export MT="${TRIPLE}-mt"

export ASFLAGS="-fno-integrated-as"

export CFLAGS="							\
  --gcc-toolchain="${TOOLCHAIN_PREFIX}"                         \
  -std=gnu11 -fno-lto                                           \
  -target ${TARGET} -fPIC -DPIC -g -O3			        \
  -march=${HOST_ARCH} -mcpu=cortex-a7 		                \
  -mfloat-abi=softfp -mfpu=neon -mthumb                         \
  -ffunction-sections -funwind-tables -fstack-protector-strong  \
  -Wno-invalid-command-line-argument                            \
  -Wno-unused-command-line-argument                             \
  -no-canonical-prefixes -fno-integrated-as                     \
  -fno-omit-frame-pointer                                       \
  -Wa,--noexecstack -Wformat                                    \
  -D__ANDROID_API__=${ANDROID_ABI} -DANDROID -D__ARM_ARCH_7A__	\
  --sysroot=${PLATFORM}						\
  -isystem ${PREFIX_DIR}/include				\
  -isystem ${SYSROOT}/usr/include/${TRIPLE}			\
  -isystem ${SYSROOT}/usr/include				\
  -isystem ${SYSINC}/cpufeatures                                \
  ${CFLAGS_EXTRA}"

export CXX="${TRIPLE}-clang++"
export CXXFLAGS="-lstdc++ ${CXXFLAGS_EXTRA}"

export LDFLAGS="				\
  -flto -fPIC				        \
  --sysroot ${PLATFORM}  			\
  -L${PLATFORM}/usr/lib				\
  -L${TOOLCHAIN_GCC_ARCH_FLT}			\
  -L${TOOLCHAIN_GCC_ARCH}			\
  -L${TOOLCHAIN_GCC}				\
  -L${LIB_DIR}					\
  ${LDFLAGS_EXTRA}"

export LIBS="${LIBS_EXTRA}"

export CONFIG="					  \
  ./configure --build=${BUILD} --host=${TRIPLE}	  \
  --prefix=${PREFIX_DIR} --libdir=${LIB_DIR}	  \
  ${CONFIG_EXTRA}"

# Cache a few facts about the Android system
export ac_cv_prog_MANIFEST_TOOL=no
export ac_cv_func_posix_getpwuid_r=no
export ac_cv_func_nonposix_getpwuid_r=no
export ac_cv_func_posix_getgrgid_r=no
export ac_cv_func_uselocale=no
export ac_cv_c_bigendian=no
# We set these in case someone plays with them
export ac_cv_env_PKG_CONFIG_PATH_set=set
export ac_cv_env_PKG_CONFIG_PATH_value="$PKG_CONFIG_PATH"

