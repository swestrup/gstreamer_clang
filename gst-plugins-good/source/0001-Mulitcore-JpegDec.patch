diff --git a/docs/plugins/gst-plugins-good-plugins.args b/docs/plugins/gst-plugins-good-plugins.args
index 9873591cd..28841e42f 100644
--- a/docs/plugins/gst-plugins-good-plugins.args
+++ b/docs/plugins/gst-plugins-good-plugins.args
@@ -2719,6 +2719,16 @@
 </ARG>
 
 <ARG>
+<NAME>GstJpegDec::num-cores</NAME>
+<TYPE>gint</TYPE>
+<RANGE>>= 1</RANGE>
+<FLAGS>rw</FLAGS>
+<NICK>Number of Processor Cores</NICK>
+<BLURB>How many Cores to dedicate to decoding.</BLURB>
+<DEFAULT>4</DEFAULT>
+</ARG>
+
+<ARG>
 <NAME>GstRTPiLBCDepay::mode</NAME>
 <TYPE>iLBCMode</TYPE>
 <RANGE></RANGE>
diff --git a/docs/plugins/gst-plugins-good-plugins.hierarchy b/docs/plugins/gst-plugins-good-plugins.hierarchy
index 22c8f82f4..48894a219 100644
--- a/docs/plugins/gst-plugins-good-plugins.hierarchy
+++ b/docs/plugins/gst-plugins-good-plugins.hierarchy
@@ -28,13 +28,11 @@ GObject
           GstFlacDec
           GstMuLawDec
           GstSpeexDec
-          GstWavpackDec
         GstAudioEncoder
           GstALawEnc
           GstFlacEnc
           GstMuLawEnc
           GstSpeexEnc
-          GstWavpackEnc
         GstAudioVisualizer
           GstGoom
           GstGoom2k1
diff --git a/ext/jpeg/Makefile.am b/ext/jpeg/Makefile.am
index f394efbd7..8ce68c750 100644
--- a/ext/jpeg/Makefile.am
+++ b/ext/jpeg/Makefile.am
@@ -1,9 +1,10 @@
 plugin_LTLIBRARIES = libgstjpeg.la
 
-libgstjpeg_la_SOURCES = \
-	gstjpeg.c \
-	gstjpegenc.c \
-	gstjpegdec.c
+libgstjpeg_la_SOURCES =				\
+	gstjpeg.c				\
+	gstjpegenc.c				\
+	gstjpegdec.c				\
+	work.c
 # deprected gstsmokeenc.c smokecodec.c gstsmokedec.c
 
 libgstjpeg_la_CFLAGS = $(GST_PLUGINS_BASE_CFLAGS) $(GST_BASE_CFLAGS) $(GST_CFLAGS)
@@ -12,7 +13,10 @@ libgstjpeg_la_LIBADD = $(GST_PLUGINS_BASE_LIBS) $(GST_BASE_LIBS) $(GST_LIBS) -lg
 libgstjpeg_la_LDFLAGS = $(GST_PLUGIN_LDFLAGS)
 libgstjpeg_la_LIBTOOLFLAGS = $(GST_PLUGIN_LIBTOOLFLAGS)
 
-noinst_HEADERS = \
-	gstjpeg.h \
-	gstjpegdec.h gstjpegenc.h
+noinst_HEADERS =				\
+	gstjpeg.h				\
+	gstjpegdec.h				\
+        gstjpegenc.h				\
+	work.h					\
+	ug.h
 # deprecated gstsmokeenc.h gstsmokedec.h smokecodec.h smokeformat.h
diff --git a/ext/jpeg/g1.sh b/ext/jpeg/g1.sh
new file mode 100755
index 000000000..b329180e5
--- /dev/null
+++ b/ext/jpeg/g1.sh
@@ -0,0 +1,14 @@
+#!/bin/bash
+
+TEST_DIR="$PWD/$(dirname $0)"
+SUPP_DIR="../../common"
+SUPP_GST=$SUPP_DIR/gst.supp
+SUPP_TEST=test.supp
+
+export G_SLICE=always-malloc
+
+echo "jpegdec run"
+
+gdb --args gst-launch-1.0 --gst-plugin-path=. --gst-debug=WORKPOOL:6   \
+    videotestsrc num-buffers=40 ! video/x-raw,width=1920,height=1080 ! \
+    queue ! jpegenc ! queue ! jpegdec ! fakesink sync=true
diff --git a/ext/jpeg/gst.supp b/ext/jpeg/gst.supp
new file mode 100644
index 000000000..1588c7a37
--- /dev/null
+++ b/ext/jpeg/gst.supp
@@ -0,0 +1,4921 @@
+### this file contains suppressions for valgrind when running
+### the gstreamer unit tests
+### it might be useful for wider use as well
+
+### syscall suppressions
+
+{
+   <clone on Wim's Debian>
+   Memcheck:Param
+   clone(parent_tidptr)
+   fun:clone
+   fun:clone
+}
+
+{
+   <clone on Wim's Debian>
+   Memcheck:Param
+   clone(child_tidptr)
+   fun:clone
+   fun:clone
+}
+
+{
+   <clone on Wim's Debian>
+   Memcheck:Param
+   clone(tlsinfo)
+   fun:clone
+   fun:clone
+}
+
+### glibc suppressions
+
+{
+   <conditional jump on wim's debian 2/2/06>
+   Memcheck:Cond
+   obj:/lib/ld-2.*.so
+   fun:dl_open_worker
+   obj:/lib/ld-2.*.so
+   fun:_dl_open
+   fun:dlopen_doit
+   obj:/lib/ld-2.*.so
+   fun:_dlerror_run
+   fun:dlopen
+   fun:g_module_open
+   fun:gst_plugin_load_file
+}
+
+{
+   <Conditional jump>
+   Memcheck:Cond
+   fun:strlen
+   fun:fillin_rpath
+   fun:_dl_init_paths
+   fun:dl_main
+   fun:_dl_sysdep_start
+   fun:_dl_start
+   obj:/lib64/ld-2.*.so
+   obj:*
+   obj:*
+}
+
+{
+   <Conditional jump>
+   Memcheck:Cond
+   fun:_dl_relocate_object
+   fun:dl_main
+   fun:_dl_sysdep_start
+   fun:_dl_start
+}
+
+{
+   <insert a suppression name here>
+   Memcheck:Cond
+   fun:*
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.2.5
+}
+
+# glibc does not deallocate thread-local storage
+
+{
+   <tls>
+   Memcheck:Leak
+   fun:calloc
+   fun:_dl_allocate_tls
+   fun:pthread_create@@*
+}
+
+{
+   <tls>
+   Memcheck:Leak
+   fun:calloc
+   fun:allocate_dtv
+   fun:_dl_allocate_tls
+}
+
+# I get an extra stack entry on x86/dapper
+{
+   <tls>
+   Memcheck:Leak
+   fun:calloc
+   obj:/lib/ld-2.3.*.so
+   fun:_dl_allocate_tls
+   fun:pthread_create@@*
+}
+
+
+{
+   <pthread strstr>
+   Memcheck:Cond
+   fun:strstr
+   fun:__pthread_initialize_minimal
+   obj:/lib/libpthread-*.so
+   obj:/lib/libpthread-*.so
+   fun:call_init
+   fun:_dl_init
+   obj:/lib/ld-*.so
+}
+
+# a thread-related free problem in glibc from Edgard
+{
+   __libc_freeres_rw_acess
+   Memcheck:Addr4
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   fun:__libc_freeres
+}
+
+{
+   <a conditional jump on wim's debian>
+   Memcheck:Cond
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+}
+
+# g_module_open-related problems
+{
+   <started showing up on fc4-quick>
+   Memcheck:Addr2
+   fun:memcpy
+   fun:_dl_map_object_deps
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.1
+   fun:g_module_open
+   fun:gst_plugin_load_file
+   fun:gst_registry_scan_path_level
+   fun:gst_registry_scan_path_level
+   fun:gst_registry_scan_path_level
+   fun:init_post
+   fun:g_option_context_parse
+   fun:gst_init_check
+   fun:gst_init
+   fun:gst_check_init
+   fun:main
+}
+
+{
+   <started showing up on fc4-quick>
+   Memcheck:Addr4
+   fun:memcpy
+   fun:_dl_map_object_deps
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.1
+   fun:g_module_open
+   fun:gst_plugin_load_file
+   fun:gst_registry_scan_path_level
+   fun:gst_registry_scan_path_level
+   fun:gst_registry_scan_path_level
+   fun:init_post
+   fun:g_option_context_parse
+   fun:gst_init_check
+   fun:gst_init
+   fun:gst_check_init
+   fun:main
+}
+
+{
+   <g_module_open on wim's debian>
+   Memcheck:Cond
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   fun:do_sym
+   fun:_dl_sym
+   fun:dlsym_doit
+   obj:/lib/ld-2.3.*.so
+   fun:_dlerror_run
+   fun:dlsym
+   fun:g_module_symbol
+   fun:g_module_open
+   fun:gst_plugin_load_file
+}
+
+{
+   <g_module_open on wim's debian>
+   Memcheck:Cond
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   fun:dl_open_worker
+   obj:/lib/ld-2.3.*.so
+   fun:_dl_open
+   fun:dlopen_doit
+   obj:/lib/ld-2.3.*.so
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.1
+   fun:g_module_open
+   fun:gst_plugin_load_file
+}
+{
+   <g_module_open on wim's debian>
+   Memcheck:Cond
+   obj:/lib/ld-2.3.*.so
+   fun:dl_open_worker
+   obj:/lib/ld-2.3.*.so
+   fun:_dl_open
+   fun:dlopen_doit
+   obj:/lib/ld-2.3.*.so
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.1
+   fun:g_module_open
+   fun:gst_plugin_load_file
+   fun:gst_plugin_load_by_name
+   fun:gst_plugin_feature_load
+}
+
+{
+   <leak on wim's debian in g_module_open>
+   Memcheck:Leak
+   fun:malloc
+   obj:/lib/ld-2.3.*.so
+   fun:dl_open_worker
+   obj:/lib/ld-2.3.*.so
+   fun:_dl_open
+   fun:dlopen_doit
+   obj:/lib/ld-2.3.*.so
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.1
+   fun:g_module_open
+   fun:gst_plugin_load_file
+   fun:gst_plugin_load_by_name
+}
+
+{
+   <invalid read on wim's debian>
+   Memcheck:Addr4
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   fun:dl_open_worker
+   obj:/lib/ld-2.3.*.so
+   fun:_dl_open
+   fun:dlopen_doit
+   obj:/lib/ld-2.3.*.so
+}
+
+{
+   <invalid read on wim's debian>
+   Memcheck:Addr4
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   fun:dl_open_worker
+   obj:/lib/ld-2.3.*.so
+   fun:_dl_open
+   fun:dlopen_doit
+   obj:/lib/ld-2.3.*.so
+   fun:_dlerror_run
+}
+
+{
+   <invalid read on wim's debian - 2006-02-02>
+   Memcheck:Addr4
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   fun:dl_open_worker
+   obj:/lib/ld-2.3.*.so
+   fun:_dl_open
+   fun:dlopen_doit
+   obj:/lib/ld-2.3.*.so
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.1
+   fun:g_module_open
+}
+
+{
+   <invalid read on wim's debian - 2006-02-02>
+   Memcheck:Addr4
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   fun:dl_open_worker
+   obj:/lib/ld-2.3.*.so
+   fun:_dl_open
+   fun:dlopen_doit
+   obj:/lib/ld-2.3.*.so
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.1
+   fun:g_module_open
+}
+
+{
+   <invalid read on wim's debian - 2006-02-02>
+   Memcheck:Addr4
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   fun:do_sym
+   fun:_dl_sym
+   fun:dlsym_doit
+   obj:/lib/ld-2.3.*.so
+   fun:_dlerror_run
+   fun:dlsym
+   fun:g_module_symbol
+   fun:g_module_open
+}
+
+{
+   <futex on Andy's 64-bit ubuntu>
+   Memcheck:Param
+   futex(uaddr2)
+   fun:pthread_once
+   obj:/lib/libc-2.3.*.so
+   obj:/lib/libc-2.3.*.so
+   fun:mbsnrtowcs
+   fun:vfprintf
+   fun:vsprintf
+   fun:sprintf
+   obj:/lib/libc-2.3.*.so
+   fun:tmpfile
+   fun:setup_pipe
+   fun:setup_messaging_with_key
+   fun:setup_messaging
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   fun:dlopen
+   fun:g_module_open
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libc-2.7.so
+   fun:_dl_sym
+   obj:/lib/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   fun:dlsym
+   fun:g_module_symbol
+   fun:g_module_open
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   fun:dlopen
+   fun:g_module_open
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   fun:dlopen
+   fun:g_module_open
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   fun:dlopen
+   fun:g_module_open
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libc-2.7.so
+   obj:/lib/ld-2.7.so
+   fun:__libc_dlopen_mode
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libc-2.7.so
+   obj:/lib/ld-2.7.so
+   fun:__libc_dlopen_mode
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libc-2.7.so
+   obj:/lib/ld-2.7.so
+   fun:__libc_dlopen_mode
+   obj:/lib/i686/cmov/libc-2.7.so
+   obj:/lib/i686/cmov/libc-2.7.so
+   obj:/lib/i686/cmov/libc-2.7.so
+   obj:/lib/i686/cmov/libc-2.7.so
+   obj:/lib/i686/cmov/libc-2.7.so
+   fun:iconv_open
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libc-2.7.so
+   obj:/lib/ld-2.7.so
+   fun:__libc_dlopen_mode
+   obj:/lib/i686/cmov/libc-2.7.so
+   obj:/lib/i686/cmov/libc-2.7.so
+   obj:/lib/i686/cmov/libc-2.7.so
+   obj:/lib/i686/cmov/libc-2.7.so
+   obj:/lib/i686/cmov/libc-2.7.so
+   fun:iconv_open
+}
+
+{
+   <suppression for glibc 2.7 on Ubunty Hardy 64-bit>
+   Memcheck:Addr8
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/libc-2.7.so
+   obj:/lib/ld-2.7.so
+   fun:__libc_dlopen_mode
+   obj:/lib/libc-2.7.so
+   obj:/lib/libc-2.7.so
+   obj:/lib/libc-2.7.so
+   obj:/lib/libc-2.7.so
+   obj:/lib/libc-2.7.so
+   fun:iconv_open
+}
+
+{
+   <suppression for glibc 2.7 on Ubunty Hardy 64-bit>
+   Memcheck:Addr8
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/libc-2.7.so
+   obj:/lib/ld-2.7.so
+   fun:__libc_dlopen_mode
+   obj:/lib/libc-2.7.so
+   obj:/lib/libc-2.7.so
+   obj:/lib/libc-2.7.so
+   obj:/lib/libc-2.7.so
+   obj:/lib/libc-2.7.so
+   fun:iconv_open
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   fun:dlopen
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   fun:dlopen
+}
+
+{
+   <suppression for glibc 2.7 on Ubunty Hardy 64-bit>
+   Memcheck:Addr8
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/libc-2.7.so
+   obj:/lib/ld-2.7.so
+   fun:__libc_dlopen_mode
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Cond
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   fun:dlopen
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Cond
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   fun:dlopen
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   fun:dlopen
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   fun:dlopen
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Cond
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   fun:dlopen
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Cond
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   fun:dlopen
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   fun:dlopen
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   fun:dlopen
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Cond
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   fun:dlopen
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Cond
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   fun:dlopen
+}
+
+{
+   <suppression for glibc 2.7 on debian>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/i686/cmov/libdl-2.7.so
+   fun:dlopen
+}
+
+# suppression for a glibc bug:
+# http://valgrind.org/docs/manual/faq.html#faq.exit_errors>
+{
+   <Workaround for a glibc bug>
+   Memcheck:Free
+   fun:free
+   obj:*libc-*.so
+   fun:__libc_freeres
+   fun:*
+   fun:_Exit
+}
+
+# same as above, just so it works for tpm on gutsy/x86-64
+{
+   <workaround glibc bug on gutsy x86-64>
+   Memcheck:Free
+   fun:free
+   fun:free_mem
+   fun:__libc_freeres
+}
+
+# valgrind doesn't allow me to specify a suppression for Addr1, Addr2, Addr4
+# as Addr*, so 3 copies for that; and then 2 of each for that pesky memcpy
+{
+   <Invalid read of size 1, 2, 4 on thomas's FC4>
+   Memcheck:Addr1
+   fun:_dl_signal_error
+   fun:_dl_map_object_deps
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.1
+   fun:g_module_open
+}
+
+{
+   <Invalid read of size 1, 2, 4 on thomas's FC4>
+   Memcheck:Addr2
+   fun:_dl_signal_error
+   fun:_dl_map_object_deps
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.1
+   fun:g_module_open
+}
+{
+   <Invalid read of size 1, 2, 4 on thomas's FC4>
+   Memcheck:Addr4
+   fun:_dl_signal_error
+   fun:_dl_map_object_deps
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.1
+   fun:g_module_open
+}
+
+{
+   <Invalid read of size 1, 2, 4 on thomas's FC4>
+   Memcheck:Addr1
+   fun:memcpy
+   fun:_dl_signal_error
+   fun:_dl_map_object_deps
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.1
+   fun:g_module_open
+}
+
+{
+   <Invalid read of size 1, 2, 4 on thomas's FC4>
+   Memcheck:Addr2
+   fun:memcpy
+   fun:_dl_signal_error
+   fun:_dl_map_object_deps
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.1
+   fun:g_module_open
+}
+{
+   <Invalid read of size 1, 2, 4 on thomas's FC4>
+   Memcheck:Addr4
+   fun:memcpy
+   fun:_dl_signal_error
+   fun:_dl_map_object_deps
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.1
+   fun:g_module_open
+}
+
+{
+   <Addr8 on Andy's AMD64 ubuntu in dl_open>
+   Memcheck:Addr8
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/libc-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   fun:_dl_open
+   obj:/lib/libdl-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+}
+
+{
+   <Conditional jump on Andy's AMD64 ubuntu>
+   Memcheck:Cond
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/libc-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   fun:_dl_open
+   obj:/lib/libdl-2.3.*.so
+   obj:/lib/ld-2.3.*.so
+   obj:/lib/libdl-2.3.*.so
+   fun:dlopen
+   fun:g_module_open
+   fun:gst_plugin_load_file
+   fun:gst_plugin_load_by_name
+   fun:gst_plugin_feature_load
+}
+
+{
+   <Mike's x86 dapper>
+   Memcheck:Addr4
+   obj:/lib/ld-2.3.6.so
+   obj:/lib/ld-2.3.6.so
+   obj:/lib/tls/i686/cmov/libc-2.3.6.so
+   obj:/lib/ld-2.3.6.so
+   fun:_dl_open
+   obj:/lib/tls/i686/cmov/libdl-2.3.6.so
+   obj:/lib/ld-2.3.6.so
+   obj:/lib/tls/i686/cmov/libdl-2.3.6.so
+   fun:dlopen
+}
+
+{
+   <Mike's x86 dapper>
+   Memcheck:Cond
+   obj:/lib/ld-2.3.6.so
+   obj:/lib/tls/i686/cmov/libc-2.3.6.so
+   obj:/lib/ld-2.3.6.so
+   fun:_dl_open
+   obj:/lib/tls/i686/cmov/libdl-2.3.6.so
+   obj:/lib/ld-2.3.6.so
+   obj:/lib/tls/i686/cmov/libdl-2.3.6.so
+   fun:dlopen
+}
+
+{
+   <Another dapper one>
+   Memcheck:Cond
+   obj:/lib/ld-2.3.6.so
+   obj:/lib/ld-2.3.6.so
+   obj:/lib/ld-2.3.6.so
+   obj:/lib/tls/i686/cmov/libc-2.3.6.so
+   obj:/lib/ld-2.3.6.so
+   fun:_dl_open
+   obj:/lib/tls/i686/cmov/libdl-2.3.6.so
+   obj:/lib/ld-2.3.6.so
+   obj:/lib/tls/i686/cmov/libdl-2.3.6.so
+   fun:dlopen
+}
+
+### glib suppressions
+{
+   <g_parse_debug_string>
+   Memcheck:Cond
+   fun:g_parse_debug_string
+   obj:/usr/lib*/libglib-2.0.so.*
+   fun:g_slice_alloc
+   fun:g_slice_alloc0
+}
+
+{
+   <g_type_init leaks>
+   Memcheck:Leak
+   fun:*alloc
+   ...
+   fun:g_type_init*
+   fun:init_pre*
+}
+
+{
+   <g_type_register_fundamental leaks>
+   Memcheck:Leak
+   fun:*alloc
+   ...
+   fun:g_type_register_fundamental
+}
+
+{
+   <glib 2.21 static type data>
+   Memcheck:Leak
+   fun:malloc
+   fun:realloc
+   fun:g_realloc
+   fun:type_node_any_new_W
+}
+
+{
+   <glib 2.21 static type data>
+   Memcheck:Leak
+   fun:realloc
+   fun:g_realloc
+   fun:type_node_any_new_W
+}
+
+{
+   <glib 2.21 static type data>
+   Memcheck:Leak
+   fun:calloc
+   fun:g_malloc0
+   fun:g_type_class_ref
+}
+
+{
+   <glib 2.21 static type data>
+   Memcheck:Leak
+   fun:malloc
+   fun:realloc
+   fun:g_realloc
+   fun:type_add_flags_W
+}
+
+{
+   <glib 2.21 static type data>
+   Memcheck:Leak
+   fun:calloc
+   fun:g_malloc0
+   fun:type_add_flags_W
+}
+
+#pthread memleaks
+
+{
+   Thread creation leak
+   Memcheck:Leak
+   fun:calloc
+   fun:allocate_dtv
+   fun:_dl_allocate*
+   fun:_dl_allocate*
+   fun:__pthread_initialize_minimal
+}
+
+{
+   Thread management leak
+   Memcheck:Leak
+   fun:calloc
+   fun:allocate_dtv
+   fun:_dl_allocate*
+   fun:_dl_allocate*
+   fun:__pthread_*
+}
+
+{
+   Thread management leak 2
+   Memcheck:Leak
+   fun:memalign
+   fun:_dl_allocate*
+   fun:_dl_allocate*
+   fun:__pthread_*
+}
+
+{
+   pthread_create Syscall param write(buf) points to uninitialised byte(s)
+   Memcheck:Param
+   write(buf)
+   fun:pthread_create@@GLIBC_2.2.5
+   fun:g_thread_create*
+
+}
+
+# nss_parse_* memleak (used by g_option_context_parse)
+{
+   nss_parse_* memleak
+   Memcheck:Leak
+   fun:malloc
+   fun:nss_parse_service_list
+   fun:__nss_database_lookup
+}
+
+# liboil suppressions
+{
+   <liboil cpu_fault_check_try>
+   Memcheck:Value8
+   obj:/usr/lib/liboil-0.3.so.0.1.0
+   obj:/usr/lib/liboil-0.3.so.0.1.0
+   obj:/usr/lib/liboil-0.3.so.0.1.0
+   fun:oil_cpu_fault_check_try
+   fun:oil_test_check_impl
+   fun:oil_class_optimize
+   fun:oil_optimize_all
+   fun:oil_init
+}
+
+{
+   <annoying read error inside dlopen stuff on Ubuntu Dapper x86_64>
+   Memcheck:Addr8
+   obj:/lib/ld-2.3.6.so
+}
+
+{
+   <Ubuntu Dapper x86_64>
+   Memcheck:Param
+   futex(uaddr2)
+   fun:pthread_once
+   obj:/lib/libc-2.3.6.so
+   obj:/lib/libc-2.3.6.so
+   fun:setlocale
+   fun:init_pre
+   fun:g_option_context_parse
+   fun:gst_init_check
+   fun:gst_init
+   fun:gst_check_init
+   fun:main
+}
+
+{
+   <Ubuntu Dapper x86_64 dlopen stuff again>
+   Memcheck:Cond
+   obj:/lib/ld-2.3.6.so
+   obj:/lib/ld-2.3.6.so
+   fun:_dl_open
+   obj:/lib/libdl-2.3.6.so
+   obj:/lib/ld-2.3.6.so
+   obj:/lib/libdl-2.3.6.so
+   fun:dlopen
+   fun:g_module_open
+   fun:gst_plugin_load_file
+}
+# this exists in a bunch of different variations, hence the short tail/trace
+{
+   <dlopen invalid read of size 4 suppression on tpm's Ubuntu edgy/x86>
+   Memcheck:Addr4
+   obj:/lib/ld-2.4.so
+   obj:/lib/ld-2.4.so
+}
+{
+   <and the same for 64bit systems>
+   Memcheck:Addr8
+   obj:/lib/ld-2.4.so
+   obj:/lib/ld-2.4.so
+}
+
+# More edgy suppressions (Mike)
+{
+   <dlopen Condition jump suppressions for Ubuntu Edgy/x86>
+   Memcheck:Cond
+   obj:/lib/ld-2.4.so
+   obj:/lib/ld-2.4.so
+   obj:/lib/ld-2.4.so
+   obj:/lib/ld-2.4.so
+   fun:dlopen_doit
+   obj:/lib/ld-2.4.so
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.1
+}
+
+{
+   <dlopen Condition jump suppressions for Ubuntu Edgy/x86>
+   Memcheck:Cond
+   obj:/lib/ld-2.4.so
+   obj:/lib/ld-2.4.so
+   obj:/lib/ld-2.4.so
+   obj:/lib/ld-2.4.so
+   obj:/lib/ld-2.4.so
+   obj:/lib/ld-2.4.so
+   fun:dlopen_doit
+   obj:/lib/ld-2.4.so
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.1
+}
+
+{
+   <dlopen Condition jump suppressions for Ubuntu Edgy/x86>
+   Memcheck:Cond
+   obj:/lib/ld-2.4.so
+   obj:/lib/ld-2.4.so
+   obj:/lib/ld-2.4.so
+   fun:do_sym
+   fun:_dl_sym
+}
+
+# This one's overly general, but there's zero other information in the stack
+# trace - just these five lines!
+{
+   <dlopen Condition jump suppressions for Ubuntu Edgy/x86>
+   Memcheck:Cond
+   obj:/lib/ld-2.4.so
+   obj:/lib/ld-2.4.so
+   obj:/lib/ld-2.4.so
+   obj:/lib/ld-2.4.so
+   obj:/lib/ld-2.4.so
+}
+
+{
+   <tls leaks on Edgy/x86>
+   Memcheck:Leak
+   fun:calloc
+   obj:/lib/ld-2.4.so
+   fun:_dl_allocate_tls
+   fun:pthread_create@@GLIBC_2.1
+}
+
+# TLS leaks for feisty/x86
+{
+   <tls leaks on Feisty/x86>
+   Memcheck:Leak
+   fun:calloc
+   fun:allocate_dtv
+   fun:_dl_allocate_tls
+   fun:pthread_create@@GLIBC_2.1
+}
+
+{
+   <libcdio 0.76 leak>
+   Memcheck:Leak
+   fun:calloc
+   obj:/usr/lib/libcdio.so.6.0.1
+   fun:cdio_open_am_linux
+   obj:/usr/lib/libcdio.so.6.0.1
+   fun:cdio_open_am
+}
+
+{
+   <Addr8 on Jan's AMD64 ubuntu Feisty in dl_open>
+   Memcheck:Addr8
+   obj:/lib/ld-2.5.so
+}
+
+{
+   <First of many Alsa errors>
+   Memcheck:Cond
+   fun:snd_pcm_direct_shm_create_or_connect
+   fun:snd_pcm_dsnoop_open
+   fun:_snd_pcm_dsnoop_open
+   obj:/*lib/libasound.so.2.0.0
+   obj:/*lib/libasound.so.2.0.0
+   fun:snd_pcm_open_slave
+   fun:_snd_pcm_plug_open
+   obj:/*lib/libasound.so.2.0.0
+   fun:snd_pcm_open_slave
+   fun:_snd_pcm_asym_open
+   obj:/*lib/libasound.so.2.0.0
+   obj:/*lib/libasound.so.2.0.0
+}
+
+{
+   <alsa error>
+   Memcheck:Cond
+   fun:snd*_pcm_hw_param_set_near
+}
+
+{
+   <alsa error>
+   Memcheck:Cond
+   ...
+   fun:snd*_pcm_hw_param_set_near
+}
+
+{
+   <alsa error>
+   Memcheck:Cond
+   obj:/*lib/libasound.so.2.0.0
+   obj:/*lib/libasound.so.2.0.0
+   fun:snd_pcm_close
+   obj:/*lib/libasound.so.2.0.0
+}
+{
+   <alsa error>
+   Memcheck:Cond
+   fun:snd_pcm_direct_shm_create_or_connect
+   fun:snd_pcm_dmix_open
+   fun:_snd_pcm_dmix_open
+   obj:/*lib/libasound.so.2.0.0
+   obj:/*lib/libasound.so.2.0.0
+   fun:snd_pcm_open_slave
+   fun:_snd_pcm_softvol_open
+   obj:/*lib/libasound.so.2.0.0
+   fun:snd_pcm_open_slave
+   fun:_snd_pcm_plug_open
+   obj:/*lib/libasound.so.2.0.0
+   fun:snd_pcm_open_slave
+   fun:_snd_pcm_asym_open
+   obj:/*lib/libasound.so.2.0.0
+   obj:/*lib/libasound.so.2.0.0
+}
+{
+   <alsa error>
+   Memcheck:Leak
+   fun:malloc
+   fun:strdup
+   fun:snd_dlobj_cache_add
+   obj:/*lib/libasound.so.2.0.0
+   fun:snd_pcm_open_slave
+   fun:snd_pcm_dsnoop_open
+   fun:_snd_pcm_dsnoop_open
+   obj:/*lib/libasound.so.2.0.0
+   obj:/*lib/libasound.so.2.0.0
+   fun:snd_pcm_open_slave
+   fun:_snd_pcm_plug_open
+   obj:/*lib/libasound.so.2.0.0
+   fun:snd_pcm_open_slave
+   fun:_snd_pcm_asym_open
+   obj:/*lib/libasound.so.2.0.0
+   obj:/*lib/libasound.so.2.0.0
+}
+# Catch about 15 variations on inserting info into an ALSA
+# internal cache
+{
+   <alsa error>
+   Memcheck:Leak
+   fun:malloc
+   ...
+   fun:snd*_dlobj_cache_add
+   obj:/*lib*/libasound.so.2.0.0
+}
+
+{
+   <alsa leak in loading configuration>
+   Memcheck:Leak
+   fun:*alloc
+   ...
+   fun:snd_pcm_open_conf
+}
+
+{
+   <alsa leak snd_config_hook_load>
+   Memcheck:Leak
+   fun:*alloc
+   obj:/*lib*/libasound.so.2.0.0
+   ...
+   fun:snd_config_hook_load
+}
+
+{
+   <alsa leak snd_config_update_r>
+   Memcheck:Leak
+   fun:*alloc
+   obj:/*lib*/libasound.so.2.0.0
+   ...
+   fun:snd_config_update_r
+   fun:snd_config_update
+}
+{
+   <alsa leak snd_config_update_r>
+   Memcheck:Leak
+   fun:*alloc
+   fun:strdup
+   ...
+   fun:snd_config_update_r
+   fun:snd_config_update
+}
+{
+   <alsa leak snd_config_searcha_hooks>
+   Memcheck:Leak
+   fun:*alloc
+   fun:_dl_close_worker
+   ...
+   fun:snd_config_searcha_hooks
+}
+
+{
+   <nss lookup within ALSA>
+   Memcheck:Leak
+   fun:malloc
+   obj:/lib/libc*.so
+   fun:__nss_database_lookup
+   obj:*
+   obj:*
+   fun:getgrnam_r
+   fun:getgrnam
+   fun:snd_pcm_direct_parse_open_conf
+}
+
+{
+   <libxcb leak on Ubuntu Feisty>
+   Memcheck:Leak
+   fun:calloc
+   fun:_XCBInitDisplayLock
+   fun:XOpenDisplay
+}
+
+# GConf internal initialisations related to getting the default client.
+{
+   <Orbit something or other>
+   Memcheck:Leak
+   fun:calloc
+   fun:g_malloc0
+   fun:ORBit_alloc_tcval
+   obj:/usr/lib/libORBit-2.so.*
+   fun:ORBit_demarshal_IOR
+   fun:ORBit_demarshal_object
+   fun:CORBA_ORB_string_to_object
+   obj:/usr/lib/libgconf-2.so.*
+   fun:gconf_get_current_lock_holder
+   fun:gconf_activate_server
+   obj:/usr/lib/libgconf-2.so.*
+   obj:/usr/lib/libgconf-2.so.*
+   fun:gconf_engine_get_default
+}
+{
+   <gconf internal leak>
+   Memcheck:Leak
+   fun:calloc
+   fun:g_malloc0
+   fun:ORBit_alloc_tcval
+   obj:*
+   fun:PortableServer_POA_servant_to_reference
+   fun:*
+   fun:*
+   fun:*
+   fun:gconf_engine_get_default
+}
+{
+   <gconf internal leak>
+   Memcheck:Leak
+   fun:calloc
+   fun:g_malloc0
+   fun:ORBit_alloc_tcval
+   obj:/usr/lib/libORBit-2.so.*
+   fun:ORBit_demarshal_IOR
+   fun:ORBit_demarshal_object
+   fun:CORBA_ORB_string_to_object
+   obj:/usr/lib/libgconf-2.so.*
+   fun:gconf_get_current_lock_holder
+   fun:gconf_activate_server
+   obj:/usr/lib/libgconf-2.so.*
+   obj:/usr/lib/libgconf-2.so.*
+   fun:gconf_engine_get_default
+}
+{
+   <gconf internal initialisation>
+   Memcheck:Leak
+   fun:calloc
+   fun:g_malloc0
+   fun:ORBit_alloc*
+   fun:*
+   fun:ORBit_demarshal_IOR
+   fun:ORBit_demarshal_object
+   fun:ORBit_demarshal_value
+   fun:*
+   fun:ORBit_small_invoke_stub
+   fun:ConfigServer_get_default_database
+   fun:*
+   fun:gconf_engine_get_default
+}
+{
+   <gconf internal init>
+   Memcheck:Leak
+   fun:calloc
+   fun:g_malloc0
+   fun:ORBit_alloc*
+   fun:*
+   fun:IOP_generate_profiles
+   fun:ORBit_marshal_object
+   fun:ORBit_marshal_value
+   fun:*
+   fun:ORBit_small_invoke_stub
+   fun:ConfigServer_add_client
+   fun:*
+   fun:*
+   fun:gconf_engine_get_default
+}
+{
+   <gconf internal init>
+   Memcheck:Leak
+   fun:calloc
+   fun:g_malloc0
+   fun:ORBit_alloc_by_tc
+   fun:*
+   fun:PortableServer_POA_servant_to_reference
+   fun:*
+   fun:*
+   fun:*
+   fun:gconf_engine_get_default
+}
+{
+   <gconf internal init>
+   Memcheck:Leak
+   fun:calloc
+   fun:g_malloc0
+   fun:ORBit_alloc_by_tc
+   obj:/usr/lib/libORBit-2.so.*
+   fun:ORBit_demarshal_IOR
+   fun:ORBit_demarshal_object
+   fun:CORBA_ORB_string_to_object
+   obj:/usr/lib/libgconf-2.so.*
+   fun:gconf_get_current_lock_holder
+   fun:gconf_activate_server
+   obj:/usr/lib/libgconf-2.so.*
+   obj:/usr/lib/libgconf-2.so.*
+   fun:gconf_engine_get_default
+}
+
+{
+   <insert a suppression name here>
+   Memcheck:Leak
+   fun:calloc
+   fun:g_malloc0
+   fun:ORBit_alloc*
+   fun:*
+   fun:ORBit_demarshal_IOR
+   fun:ORBit_demarshal_object
+   fun:*
+   fun:*
+   fun:gconf_activate_server
+}
+
+# Some libORBit/bonobo initialisation stuff
+{
+   <bonobo init>
+   Memcheck:Leak
+   fun:malloc
+   fun:g_malloc
+   fun:ORBit_alloc_string
+   fun:CORBA_string_dup
+   fun:Bonobo_ActivationEnvValue_set
+   fun:bonobo_activation_init_activation_env
+   fun:bonobo_activation_orb_init
+   fun:bonobo_activation_init
+}
+{
+   <bonobo init>
+   Memcheck:Leak
+   fun:calloc
+   fun:g_malloc0
+   fun:ORBit_alloc*
+   fun:ORBit_small_alloc*
+   obj:/usr/lib/libORBit-2.so*
+   fun:PortableServer_POA_servant_to_reference
+   obj:/usr/lib/libbonobo-2.so*
+}
+{
+   <bonobo init>
+   Memcheck:Leak
+   fun:calloc
+   fun:g_malloc0
+   fun:ORBit_alloc_tcval
+   fun:ORBit_small_allocbuf
+   fun:ORBit_adaptor_setup
+   obj:/usr/lib/libORBit-2.so*
+   fun:ORBit_POA_setup_root
+   fun:ORBit_init_internals
+   fun:CORBA_ORB_init
+}
+{
+   <bonobo init - more recent variant of above>
+   Memcheck:Leak
+   fun:calloc
+   fun:g_malloc0
+   fun:ORBit_alloc_tcval
+   fun:ORBit_adaptor_setup
+   fun:*
+   fun:ORBit_POA_setup_root
+   fun:ORBit_init_internals
+   fun:CORBA_ORB_init
+}
+{
+   <bonobo init>
+   Memcheck:Leak
+   fun:calloc
+   fun:g_malloc0
+   fun:ORBit_alloc*
+   fun:ORBit_small_allocbuf
+   fun:bonobo_activation_init_activation_env
+   fun:bonobo_activation_orb_init
+   fun:bonobo_activation_init
+}
+
+# More GConf stuff from the FC5 buildbot, mostly variations on the
+# above stack traces
+{
+   <incompletely initialised ORBit buffer>
+   Memcheck:Param
+   writev(vector[...])
+   fun:writev
+   obj:/usr/lib/libORBit-2.so*
+   fun:link_connection_writev
+   fun:giop_send_buffer_write
+   obj:/usr/lib/libORBit-2.so*
+   fun:ORBit_small_invoke_stub
+   fun:ORBit_small_invoke_stub_n
+   fun:ORBit_c_stub_invoke
+   fun:ConfigServer_ping
+   fun:gconf_activate_server
+   obj:/usr/lib/libgconf-2.so*
+   obj:/usr/lib/libgconf-2.so*
+   fun:gconf_engine_get_default
+}
+{
+   <gconf init>
+   Memcheck:Leak
+   fun:calloc
+   fun:g_malloc0
+   fun:ORBit_alloc*
+   fun:ORBit_small_alloc*
+   obj:/usr/lib/libORBit-2.so*
+   fun:PortableServer_POA_servant_to_reference
+   obj:/usr/lib/libgconf-2.so*
+   obj:/usr/lib/libgconf-2.so*
+   obj:/usr/lib/libgconf-2.so*
+   fun:gconf_engine_get_default
+}
+{
+   <gconf init>
+   Memcheck:Leak
+   fun:calloc
+   fun:g_malloc0
+   fun:ORBit_alloc*
+   fun:ORBit_small_alloc
+   obj:/usr/lib/libORBit-2.so*
+   fun:ORBit_demarshal_IOR
+   fun:ORBit_demarshal_object
+   fun:CORBA_ORB_string_to_object
+   obj:/usr/lib/libgconf-2.so*
+   fun:gconf_get_current_lock_holder
+   fun:gconf_activate_server
+   obj:/usr/lib/libgconf-2.so*
+   obj:/usr/lib/libgconf-2.so*
+   fun:gconf_engine_get_default
+}
+{
+   <gconf init>
+   Memcheck:Leak
+   fun:calloc
+   fun:g_malloc0
+   fun:ORBit_alloc*
+   fun:ORBit_small_alloc*
+   obj:/usr/lib/libORBit-2.so*
+   fun:ORBit_demarshal_IOR
+   fun:ORBit_demarshal_object
+   fun:CORBA_ORB_string_to_object
+   obj:/usr/lib/libgconf-2.so*
+   fun:gconf_get_current_lock_holder
+   fun:gconf_activate_server
+   obj:/usr/lib/libgconf-2.so*
+   obj:/usr/lib/libgconf-2.so*
+   fun:gconf_engine_get_default
+}
+{
+   <bonobo init>
+   Memcheck:Leak
+   fun:calloc
+   fun:g_malloc0
+   fun:ORBit_alloc*
+   fun:ORBit_small_alloc*
+   obj:/usr/lib/libORBit-2.so*
+   fun:ORBit_demarshal_IOR
+   fun:ORBit_demarshal_object
+   fun:ORBit_demarshal_value
+   obj:/usr/lib/libORBit-2.so*
+   fun:ORBit_small_invoke_stub
+   fun:ORBit_small_invoke_stub_n
+   fun:ORBit_c_stub_invoke
+   fun:ConfigServer_get_default_database
+   obj:/usr/lib/libgconf-2.so*
+   fun:gconf_engine_get_default
+}
+{
+   <gconf init>
+   Memcheck:Leak
+   fun:calloc
+   fun:g_malloc0
+   fun:ORBit_alloc*
+   fun:ORBit_small_alloc*
+   obj:/usr/lib/libORBit-2.so*
+   fun:ORBit_OAObject_object_to_objkey
+   fun:IOP_generate_profiles
+   fun:ORBit_marshal_object
+   fun:ORBit_marshal_value
+   obj:/usr/lib/libORBit-2.so*
+   fun:ORBit_small_invoke_stub
+   fun:ORBit_small_invoke_stub_n
+   fun:ORBit_c_stub_invoke
+   fun:ConfigServer_add_client
+   obj:/usr/lib/libgconf-2.so*
+   obj:/usr/lib/libgconf-2.so*
+   fun:gconf_engine_get_default
+}
+{
+   <GLib caching the home dir>
+   Memcheck:Leak
+   fun:malloc
+   obj:*libc-*.so
+   fun:__nss_database_lookup
+   obj:*
+   obj:*
+   fun:getpwnam_r
+   obj:/usr/lib*/libglib-2.0.so.*
+   fun:g_get_home_dir
+}
+{
+   <GLib caching the user name>
+   Memcheck:Leak
+   fun:malloc
+   obj:*libc-*.so
+   fun:__nss_database_lookup
+   obj:*
+   obj:*
+   fun:getpwnam_r
+   obj:/usr/lib*/libglib-2.0.so.*
+   fun:g_get_user_name
+}
+{
+   <GLib caching the tmp dir>
+   Memcheck:Leak
+   fun:malloc
+   obj:*libc-*.so
+   fun:__nss_database_lookup
+   obj:*
+   obj:*
+   fun:getpwnam_r
+   obj:/usr/lib*/libglib-2.0.so.*
+   fun:g_get_tmp_dir
+}
+
+{
+   <GLib caching the host name>
+   Memcheck:Leak
+   fun:malloc
+   obj:*libc-*.so
+   fun:__nss_database_lookup
+   obj:*
+   obj:*
+   fun:getpwnam_r
+   obj:/usr/lib*/libglib-2.0.so.0.*
+   fun:g_get_host_name
+}
+
+
+## Some Fontconfig errors.
+{
+   <First time load of a font - feisty x86_64>
+   Memcheck:Leak
+   fun:malloc
+   fun:FcPatternObjectInsertElt
+   fun:FcPatternObjectAddWithBinding
+   fun:FcPatternAppend
+   fun:FcEndElement
+   obj:/usr/lib/libexpat.so.*
+   obj:/usr/lib/libexpat.so.*
+   obj:/usr/lib/libexpat.so.*
+   obj:/usr/lib/libexpat.so.*
+   fun:XML_ParseBuffer
+   fun:FcConfigParseAndLoad
+   fun:FcConfigParseAndLoad
+   fun:FcParseInclude
+   fun:FcEndElement
+   obj:/usr/lib/libexpat.so.*
+   obj:/usr/lib/libexpat.so.*
+   obj:/usr/lib/libexpat.so.*
+   obj:/usr/lib/libexpat.so.*
+   fun:XML_ParseBuffer
+   fun:FcConfigParseAndLoad
+}
+{
+   <First time load of a font - generic>
+   Memcheck:Leak
+   fun:*alloc
+   ...
+   fun:FcInitLoadConfig
+}
+
+# Issues with ubuntu Hardy, same crack as for previous ubuntus
+{
+   <tls leak generic ubuntu hardy x86>
+   Memcheck:Leak
+   fun:calloc
+   obj:*
+   fun:_dl_allocate_tls
+   fun:pthread_create@@*
+   obj:/usr/lib/libgthread*
+   fun:g_thread_*
+}
+
+# I've made this version generic, so that it covers future modifications
+# of library names
+{
+   <tls leak generic>
+   Memcheck:Leak
+   fun:calloc
+   obj:*
+   fun:_dl_allocate_tls
+   fun:pthread_create@@*
+   fun:g_thread_*
+}
+
+# series of invalid read of size 4 in g_module_open for ubuntu
+# hardy x86/32bit
+{
+   <invalid read of size 4 within <g_module_open>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/tls/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/tls/i686/cmov/libdl-2.7.so
+   fun:dlopen
+   fun:g_module_open
+   fun:gst_plugin_load_*
+}
+
+{
+   <invalid read of size 4 within <g_module_open>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/tls/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/tls/i686/cmov/libdl-2.7.so
+   fun:dlopen
+   fun:g_module_open
+   fun:gst_plugin_load_*
+}
+
+{
+   <invalid read of size 4 within <g_module_open>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/tls/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/tls/i686/cmov/libdl-2.7.so
+   fun:dlopen
+   fun:g_module_open
+   fun:gst_plugin_load_*
+}
+
+{
+   <invalid read of size 4 within <g_module_open>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/tls/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/tls/i686/cmov/libdl-2.7.so
+   fun:dlopen
+   fun:g_module_open
+   fun:gst_plugin_load_*
+}
+
+{
+   <invalid read of size 4 within <g_module_open>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/tls/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/tls/i686/cmov/libdl-2.7.so
+   fun:dlopen
+   fun:g_module_open
+   fun:gst_plugin_load*
+}
+
+{
+   <invalid read of size 4 within <g_module_open>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/tls/i686/cmov/libc-2.7.so
+   fun:_dl_sym
+   obj:/lib/tls/i686/cmov/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/tls/i686/cmov/libdl-2.7.so
+   fun:dlsym
+   fun:g_module_symbol
+   fun:g_module_open
+   fun:gst_plugin_load_*
+}
+
+# series of invalid read of size 8 in g_module_open for ubuntu
+# hardy x86/64bit
+{
+   <invalid read of size 8 within <g_module_open>
+   Memcheck:Addr8
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/libdl-2.7.so
+   fun:dlopen
+   fun:g_module_open
+}
+
+{
+   <invalid read of size 8 within <g_module_open>
+   Memcheck:Addr8
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/libdl-2.7.so
+   fun:dlopen
+   fun:g_module_open
+}
+
+{
+   <invalid read of size 8 within <g_module_open>
+   Memcheck:Addr8
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/libdl-2.7.so
+   fun:dlopen
+   fun:g_module_open
+}
+
+{
+   <invalid read of size 8 within <g_module_open>
+   Memcheck:Addr8
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/libdl-2.7.so
+   fun:dlopen
+   fun:g_module_open
+}
+
+{
+   <invalid read of size 8 within <g_module_open>
+   Memcheck:Addr8
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/libdl-2.7.so
+   fun:dlopen
+   fun:g_module_open
+}
+
+{
+   <invalid read of size 8 within <g_module_open>
+   Memcheck:Addr8
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/libdl-2.7.so
+   fun:dlopen
+   fun:g_module_open
+}
+
+{
+   <invalid read of size 8 within <g_module_open>
+   Memcheck:Addr8
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/libc-2.7.so
+   obj:/lib/libdl-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/libdl-2.7.so
+   fun:dlsym
+   fun:g_module_symbol
+   fun:g_module_open
+}
+
+{
+   <GLib caching>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/tls/i686/cmov/libc-2.7.so
+   obj:/lib/ld-2.7.so
+   fun:__libc_dlopen_mode
+   fun:__nss_lookup_function
+   obj:/lib/tls/i686/cmov/libc-2.7.so
+   fun:__nss_passwd_lookup
+   fun:getpwnam_r
+}
+
+{
+   <GLib caching>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/tls/i686/cmov/libc-2.7.so
+   obj:/lib/ld-2.7.so
+   fun:__libc_dlopen_mode
+   fun:__nss_lookup_function
+   obj:/lib/tls/i686/cmov/libc-2.7.so
+   fun:__nss_passwd_lookup
+   fun:getpwnam_r
+}
+
+{
+   <GLib caching>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/tls/i686/cmov/libc-2.7.so
+   obj:/lib/ld-2.7.so
+   fun:__libc_dlopen_mode
+   fun:__nss_lookup_function
+   obj:/lib/tls/i686/cmov/libnss_compat-2.7.so
+   fun:_nss_compat_getpwnam_r
+   fun:getpwnam_r
+}
+
+{
+   <GLib caching>
+   Memcheck:Addr4
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/tls/i686/cmov/libc-2.7.so
+   obj:/lib/ld-2.7.so
+   fun:__libc_dlopen_mode
+   fun:__nss_lookup_function
+   obj:/lib/tls/i686/cmov/libnss_compat-2.7.so
+   fun:_nss_compat_getpwnam_r
+   fun:getpwnam_r
+}
+
+{
+   <GLib caching>
+   Memcheck:Addr8
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/ld-2.7.so
+   obj:/lib/libc-2.7.so
+   obj:/lib/ld-2.7.so
+   fun:__libc_dlopen_mode
+   fun:__nss_lookup_function
+   obj:/lib/libc-2.7.so
+   fun:getpwnam_r
+}
+
+## Leaks in ALSA (variations of leak from snd_config_load1)
+
+{
+   <Alsa leak>
+   Memcheck:Leak
+   fun:calloc
+   fun:_snd_config_make
+   fun:_snd_config_make_add
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:snd_config_load1
+}
+
+{
+   <Alsa leak>
+   Memcheck:Leak
+   fun:calloc
+   fun:_snd_config_make
+   fun:_snd_config_make_add
+   fun:*
+   fun:*
+   fun:snd_config_load1
+}
+{
+   <Alsa leak>
+   Memcheck:Leak
+   fun:calloc
+   fun:_snd_config_make
+   fun:_snd_config_make_add
+   fun:*
+   fun:*
+   fun:*
+   fun:snd_config_load1
+}
+{
+   <Alsa leak>
+   Memcheck:Leak
+   fun:calloc
+   fun:_snd_config_make
+   fun:_snd_config_make_add
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:snd_config_load1
+}
+
+{
+   <Alsa leak>
+   Memcheck:Leak
+   fun:calloc
+   fun:_snd_config_make
+   fun:_snd_config_make_add
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:snd_config_load1
+}
+
+{
+   <Alsa leak>
+   Memcheck:Leak
+   fun:calloc
+   fun:_snd_config_make
+   fun:_snd_config_make_add
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:snd_config_load1
+}
+{
+   <Alsa leak>
+   Memcheck:Leak
+   fun:calloc
+   fun:_snd_config_make
+   fun:_snd_config_make_add
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:snd_config_load1
+}
+
+{
+   <Alsa leak>
+   Memcheck:Leak
+   fun:malloc
+   fun:snd1_dlobj_cache_add
+   fun:snd_ctl_open_noupdate
+}
+
+{
+   <Alsa leak>
+   Memcheck:Leak
+   fun:malloc
+   fun:*
+   fun:snd1_dlobj_cache_add
+   fun:snd_ctl_open_noupdate
+}
+
+{
+   <Alsa leak>
+   Memcheck:Leak
+   fun:*alloc
+   fun:*
+   fun:*
+   fun:*
+   fun:snd_config_load1
+}
+
+{
+   <Alsa leak>
+   Memcheck:Leak
+   fun:*alloc
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:snd_config_load1
+}
+
+{
+   <Alsa leak>
+   Memcheck:Leak
+   fun:*alloc
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:snd_config_load1
+}
+
+{
+   <Alsa leak>
+   Memcheck:Leak
+   fun:*alloc
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:snd_config_load1
+}
+
+{
+   <Alsa leak>
+   Memcheck:Leak
+   fun:*alloc
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:snd_config_load1
+}
+
+{
+   <Alsa leak>
+   Memcheck:Leak
+   fun:*alloc
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:snd_config_load1
+}
+
+{
+   <Alsa leak>
+   Memcheck:Leak
+   fun:*alloc
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:snd_config_load1
+}
+
+{
+   <Alsa leak>
+   Memcheck:Leak
+   fun:*alloc
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:snd_config_load1
+}
+
+
+# The following are leaks of caps that need to be created dynamically
+# in the type registration of the plugin (used for pad templates).
+
+{
+   <Leak in ogmparsers>
+   Memcheck:Leak
+   fun:malloc
+   fun:g_malloc
+   fun:g_slice_alloc
+   fun:gst_caps_new_empty
+   fun:gst_caps_new_simple
+   fun:*
+   fun:g_type_class_ref
+   fun:gst_element_register
+}
+
+{
+   <Leak in ogmparsers>
+   Memcheck:Leak
+   fun:malloc
+   fun:g_malloc
+   fun:g_slice_alloc
+   fun:gst_caps_new_empty
+   fun:*
+   fun:*
+   fun:g_type_class_ref
+   fun:gst_element_register
+   fun:gst_ogm_parse_plugin_init
+   fun:plugin_init
+}
+
+{
+   <Leak in videotestsrc>
+   Memcheck:Leak
+   fun:malloc
+   fun:g_malloc
+   fun:g_slice_alloc
+   fun:gst_caps_new_empty
+   fun:gst_caps_copy
+   fun:gst_video_test_src_base_init
+   fun:g_type_class_ref
+   fun:gst_element_register
+}
+
+{
+   <Leak in videotestsrc>
+   Memcheck:Leak
+   fun:malloc
+   fun:g_malloc
+   fun:g_slice_alloc
+   fun:gst_caps_new_empty
+   fun:gst_caps_copy
+   fun:gst_video_test_src_getcaps
+   fun:gst_video_test_src_base_init
+   fun:g_type_class_ref
+   fun:gst_element_register
+}
+
+{
+   <Leak in ffmpegcolorspace>
+   Memcheck:Leak
+   fun:malloc
+   fun:g_malloc
+   fun:g_slice_alloc
+   fun:gst_caps_new_empty
+   fun:gst_ffmpegcsp_codectype_to_caps
+   fun:gst_ffmpegcolorspace_register
+   fun:plugin_init
+}
+
+{
+   <Leak in ffmpegocolorspace>
+   Memcheck:Leak
+   fun:malloc
+   fun:g_malloc
+   fun:g_slice_alloc
+   fun:gst_caps_new_empty
+   fun:gst_caps_copy
+   fun:gst_ffmpegcolorspace_register
+   fun:plugin_init
+}
+
+{
+   <Leak in gstffmpegdemux>
+   Memcheck:Leak
+   fun:malloc
+   fun:g_malloc
+   fun:g_slice_alloc
+   fun:gst_caps_new_empty
+   fun:gst_caps_new_any
+   fun:gst_ffmpegdemux_register
+   fun:plugin_init
+}
+
+{
+   <Leak in GstAudioFilter subclasses>
+   Memcheck:Leak
+   fun:malloc
+   fun:g_malloc
+   fun:g_slice_alloc
+   fun:gst_caps_new_empty
+   fun:gst_caps_copy
+   fun:gst_audio_filter_class_add_pad_templates
+}
+
+{
+   <Leak in GstAudioFilter subclasses, variant>
+   Memcheck:Leak
+   fun:realloc
+   fun:g_realloc
+   fun:g_ptr_array_maybe_expand
+   fun:g_ptr_array_add
+   fun:gst_caps_append
+   fun:gst_audio_filter_class_add_pad_templates
+}
+
+{
+   <Leak in GstAudioFilter subclasses, variant>
+   Memcheck:Leak
+   fun:malloc
+   fun:realloc
+   fun:g_realloc
+   fun:g_ptr_array_maybe_expand
+   fun:g_ptr_array_add
+   fun:gst_caps_append
+   fun:gst_audio_filter_class_add_pad_templates
+}
+
+{
+   <Leak in GstAudioFilter subclasses, variant>
+   Memcheck:Leak
+   fun:malloc
+   fun:realloc
+   fun:g_realloc
+   fun:g_ptr_array_maybe_expand
+   fun:g_ptr_array_add
+   fun:gst_caps_copy
+   fun:gst_audio_filter_class_add_pad_templates
+}
+
+{
+   <Leak in GstAudioFilter subclasses, variant2>
+   Memcheck:Leak
+   fun:malloc
+   fun:g_malloc
+   fun:g_slice_alloc
+   fun:g_ptr_array_sized_new
+   fun:gst_caps_new_empty
+   fun:gst_caps_copy
+   fun:gst_audio_filter_class_add_pad_templates
+}
+{
+   <Leak in GstAudioFilter subclasses, variant3>
+   Memcheck:Leak
+   fun:malloc
+   fun:realloc
+   fun:g_realloc
+   fun:g_array_maybe_expand
+   fun:g_array_sized_new
+   fun:*
+   fun:*
+   fun:*
+   fun:gst_value_init_and_copy
+   fun:gst_structure_copy
+   fun:gst_caps_copy
+   fun:gst_audio_filter_class_add_pad_templates
+}
+{
+   <Leak in GstAudioFilter subclasses, variant4>
+   Memcheck:Leak
+   fun:malloc
+   fun:realloc
+   fun:g_realloc
+   fun:g_array_maybe_expand
+   fun:g_array_sized_new
+   fun:*
+   fun:gst_structure_copy
+   fun:gst_caps_copy
+   fun:gst_audio_filter_class_add_pad_templates
+}
+{
+   <Leak in GstAudioFilter subclasses, variant5>
+   Memcheck:Leak
+   fun:malloc
+   fun:g_malloc
+   fun:g_slice_alloc
+   fun:g_array_sized_new
+   fun:*
+   fun:gst_structure_copy
+   fun:gst_caps_copy
+   fun:gst_audio_filter_class_add_pad_templates
+}
+
+{
+   <Leak in riff-media>
+   Memcheck:Leak
+   fun:malloc
+   fun:g_malloc
+   fun:g_slice_alloc
+   fun:gst_caps_new_empty
+   fun:gst_riff_create_*_template_caps
+}
+{
+   <Leak in riff-media>
+   Memcheck:Leak
+   fun:malloc
+   fun:realloc
+   fun:g_realloc
+   fun:*
+   fun:*
+   fun:*
+   fun:gst_structure_copy
+   fun:gst_caps_copy
+   fun:gst_caps_append
+   fun:gst_riff_create_*_template_caps
+}
+{
+   <Leak in riff-media>
+   Memcheck:Leak
+   fun:malloc
+   fun:g_malloc
+   fun:g_slice_alloc
+   fun:g_array_sized_new
+   fun:*
+   fun:gst_structure_copy
+   fun:gst_caps_copy
+   fun:gst_caps_append
+   fun:gst_riff_create_*_template_caps
+}
+
+## Leaks in pango (bilboed: gentoo unstable amd64)
+
+{
+   <Pango leak - generic>
+   Memcheck:Leak
+   fun:*alloc
+   ...
+   fun:pango_layout_get_pixel_extents
+}
+{
+   <insert a suppression name here>
+   Memcheck:Leak
+   fun:calloc
+   fun:g_malloc0
+   fun:pango_language_from_string
+   fun:pango_language_get_default
+   fun:pango_context_init
+   fun:g_type_create_instance
+   fun:g_object_constructor
+   fun:g_object_newv
+   fun:g_object_new_valist
+   fun:g_object_new
+   fun:pango_font_map_create_context
+}
+
+{
+   <PangoLanguage can never be freed>
+   Memcheck:Leak
+   fun:calloc
+   fun:g_malloc0
+   fun:pango_language_from_string
+}
+
+
+## Leak of everything allocated by gst-libav plugin init
+{
+   <insert_a_suppression_name_here>
+   Memcheck:Leak
+   fun:*alloc
+   ...
+   fun:gst_ffmpeg_cfg_init
+}
+
+## Leak of GIO module through gnomevfs
+
+{
+   <gio leak>
+   Memcheck:Leak
+   fun:malloc
+   fun:g_malloc
+   fun:*
+   fun:*
+   fun:g_type_create_instance
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:g_io_module_new
+   fun:g_io_modules_load_all_in_directory
+   fun:*
+   fun:get_default_vfs
+}
+
+## Conditional jump in getaddrinfo (bilboed, gentoo ~amd64, Dec 13 2008)
+{
+   <Leak of addrinfo in esd>
+   Memcheck:Cond
+   fun:gaih_inet
+   fun:getaddrinfo
+}
+
+## Dynamic pad templates in mxfmux
+{
+   <Dynamic pad templates in mxfmux>
+   Memcheck:Leak
+   fun:malloc
+   fun:g_malloc
+   fun:g_slice_alloc
+   fun:gst_caps_new_empty
+   fun:gst_caps_from_string
+   fun:mxf_*_init
+   fun:plugin_init
+}
+
+## We don't know if ffmpeg frees this or not and better pass a copy for safety
+{
+   <insert a suppression name here>
+   Memcheck:Leak
+   fun:malloc
+   fun:g_malloc
+   fun:g_strdup
+   fun:gst_ffmpeg_cfg_fill_context
+   fun:gst_ffmpegenc_setcaps
+   fun:gst_pad_set_caps
+}
+
+## Leak/overreads with glibc-2.10
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:do_sym
+   fun:dlsym_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlsym
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:do_sym
+   fun:dlsym_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlsym
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen*
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_relocate_object
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen*
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_check_map_versions
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen*
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen*
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:_dl_relocate_object
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen*
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:_dl_check_map_versions
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen*
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:_dl_map_object*
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen*
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_map_object*
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen*
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_check_caller
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen*
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:_dl_check_caller
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen*
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   obj:/lib*/libc-2.10.*.so
+   obj:/lib*/libc-2.10.*.so
+   fun:_vgnU_freeres
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   obj:/lib*/libc-2.10.*.so
+   obj:/lib*/libc-2.10.*.so
+   fun:_vgnU_freeres
+}
+{
+   <glibc-2.10 mysterious invalid free on exit>
+   Memcheck:Free
+   fun:free
+   obj:/lib*/libc-2.10.*.so
+   obj:/lib*/libc-2.10.*.so
+   fun:_vgnU_freeres
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_fini
+   fun:__run_exit_handlers
+   fun:exit
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:_dl_fini
+   fun:__run_exit_handlers
+   fun:exit
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_sort_fini
+   fun:_dl_fini
+   fun:__run_exit_handlers
+   fun:exit
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:_dl_sort_fini
+   fun:_dl_fini
+   fun:__run_exit_handlers
+   fun:exit
+}
+
+# glibc-2.10 dl overreads
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_fixup
+   fun:_dl_runtime_resolve
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:_dl_fixup
+   fun:_dl_runtime_resolve
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_lookup_symbol_x
+   fun:_dl_fixup
+   fun:_dl_runtime_resolve
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:_dl_lookup_symbol_x
+   fun:_dl_fixup
+   fun:_dl_runtime_resolve
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:call_init
+   fun:_dl_init
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_init
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:do_lookup_x
+   fun:_dl_lookup_symbol_x
+   fun:_dl_relocate_object
+   fun:dl_main
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:do_lookup_x
+   fun:_dl_lookup_symbol_x
+   fun:_dl_relocate_object
+   fun:dl_main
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_lookup_symbol_x
+   fun:_dl_relocate_object
+   fun:dl_main
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_relocate_object
+   fun:dl_main
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:dl_main
+   fun:_dl_sysdep_start
+   fun:_dl_start
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:dl_main
+   fun:_dl_sysdep_start
+   fun:_dl_start
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:*
+   fun:do_lookup_x
+   fun:_dl_lookup_symbol_x
+   fun:_dl_relocate_object
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:*
+   fun:do_lookup_x
+   fun:_dl_lookup_symbol_x
+   fun:_dl_relocate_object
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_check_map_versions
+   fun:_dl_check_all_versions
+   fun:version_check_doit
+   fun:_dl_receive_error
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:_dl_check_map_versions
+   fun:_dl_check_all_versions
+   fun:version_check_doit
+   fun:_dl_receive_error
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_check_all_versions
+   fun:version_check_doit
+   fun:_dl_receive_error
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:_dl_check_all_versions
+   fun:version_check_doit
+   fun:_dl_receive_error
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:*
+   fun:_dl_check_map_versions
+   fun:_dl_check_all_versions
+   fun:version_check_doit
+   fun:_dl_receive_error
+   fun:dl_main
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:*
+   fun:_dl_check_map_versions
+   fun:_dl_check_all_versions
+   fun:version_check_doit
+   fun:_dl_receive_error
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:init_tls
+   fun:dl_main
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:init_tls
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:_dl_map_object_deps
+   fun:dl_main
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_map_object_deps
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_protect_relro
+   fun:_dl_relocate_object
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:*
+   fun:do_lookup_x
+   fun:_dl_lookup_symbol_x
+   fun:_dl_relocate_object
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_setup_hash
+   fun:_dl_map_object_from_fd
+   fun:_dl_map_object
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:*
+   fun:_dl_new_object
+   fun:_dl_map_object_from_fd
+   fun:_dl_map_object
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:*
+   fun:_dl_new_object
+   fun:_dl_map_object_from_fd
+   fun:_dl_map_object
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:openaux
+   fun:_dl_catch_error
+   fun:_dl_map_object_deps
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:*
+   fun:_dl_map_object
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:*
+   fun:_dl_map_object
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:_dl_map_object
+   fun:openaux
+   fun:_dl_catch_error
+   fun:_dl_map_object_deps
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_map_object
+   fun:openaux
+   fun:_dl_catch_error
+   fun:_dl_map_object_deps
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:*
+   fun:_dl_map_object
+   fun:openaux
+   fun:_dl_catch_error
+   fun:_dl_map_object_deps
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:*
+   fun:open_path
+   fun:_dl_map_object
+   fun:openaux
+   fun:_dl_catch_error
+   fun:_dl_map_object_deps
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:*
+   fun:open_path
+   fun:_dl_map_object
+   fun:openaux
+   fun:_dl_catch_error
+   fun:_dl_map_object_deps
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_map_object_from_fd
+   fun:_dl_map_object
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:_dl_map_object_from_fd
+   fun:_dl_map_object
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:*
+   fun:_dl_new_object
+   fun:_dl_map_object_from_fd
+   fun:_dl_map_object
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_new_object
+   fun:_dl_map_object_from_fd
+   fun:_dl_map_object
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:_dl_new_object
+   fun:_dl_map_object_from_fd
+   fun:_dl_map_object
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:*
+   fun:_dl_name_match_p
+   fun:_dl_map_object
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:*
+   fun:*
+   fun:_dl_map_object
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:*
+   fun:_dl_name_match_p
+   fun:_dl_check_map_versions
+   fun:_dl_check_all_versions
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:*
+   fun:*
+   fun:do_lookup_x
+   fun:_dl_lookup_symbol_x
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:do_lookup_x
+   fun:_dl_lookup_symbol_x
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:do_lookup_x
+   fun:_dl_lookup_symbol_x
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:*
+   fun:do_lookup_x
+   fun:_dl_lookup_symbol_x
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:*
+   fun:do_lookup_x
+   fun:_dl_lookup_symbol_x
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_name_match_p
+   fun:_dl_map_object
+   fun:dl_open_worker
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:_dl_name_match_p
+   fun:_dl_map_object
+   fun:dl_open_worker
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:*
+   fun:_dl_name_match_p
+   fun:_dl_map_object
+   fun:dl_open_worker
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:*
+   fun:_dl_name_match_p
+   fun:_dl_map_object
+   fun:dl_open_worker
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_lookup_symbol_x
+   fun:_dl_relocate_object
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:_dl_lookup_symbol_x
+   fun:_dl_relocate_object
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:*
+   fun:*
+   fun:_dl_check_map_versions
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:*
+   fun:_dl_check_map_versions
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:*
+   fun:*
+   fun:_dl_check_map_versions
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:*
+   fun:_dl_check_map_versions
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:openaux
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_name_match_p
+   fun:_dl_map_object
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:_dl_close_worker
+   fun:_dl_close
+   fun:_dl_catch_error
+   fun:dlerror_run
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_close_worker
+   fun:_dl_close
+   fun:_dl_catch_error
+   fun:dlerror_run
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:*
+   fun:_dl_close_worker
+   fun:_dl_close
+   fun:_dl_catch_error
+   fun:dlerror_run
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:*
+   fun:_dl_close_worker
+   fun:_dl_close
+   fun:_dl_catch_error
+   fun:dlerror_run
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:fillin_rpath
+   fun:_dl_init_paths
+   fun:dl_main
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:fillin_rpath
+   fun:_dl_init_paths
+   fun:dl_main
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:*
+   fun:fillin_rpath
+   fun:_dl_init_paths
+   fun:dl_main
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:*
+   fun:fillin_rpath
+   fun:_dl_init_paths
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:_dl_map_object
+   fun:map_doit
+   fun:_dl_catch_error
+   fun:do_preload
+   fun:dl_main
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_map_object
+   fun:map_doit
+   fun:_dl_catch_error
+   fun:do_preload
+   fun:dl_main
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Param
+   open(filename)
+   fun:open
+   fun:open_verify
+   fun:_dl_map_object
+   fun:map_doit
+   fun:_dl_catch_error
+   fun:do_preload
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Param
+   stat(file_name)
+   fun:_xstat
+   fun:open_path
+   fun:_dl_map_object
+   fun:openaux
+   fun:_dl_catch_error
+   fun:_dl_map_object_deps
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_catch_error
+   fun:_dl_map_object_deps
+   fun:dl_open_worker
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:*
+   fun:_dl_map_object_deps
+   fun:dl_main
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:*
+   fun:_dl_map_object_deps
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:*
+   fun:*
+   fun:_dl_map_object_deps
+   fun:dl_main
+}
+
+# glibc-2.10 tls issues
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:*
+   fun:init_tls
+   fun:dl_main
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:*
+   fun:init_tls
+   fun:dl_main
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:*
+   fun:*
+   fun:init_tls
+   fun:dl_main
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:*
+   fun:*
+   fun:init_tls
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:_dl_allocate_tls_init
+   fun:dl_main
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:_dl_allocate_tls_init
+   fun:dl_main
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:*
+   fun:_dl_allocate_tls_init
+   fun:dl_main
+}
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Value8
+   fun:*
+   fun:_dl_allocate_tls_init
+   fun:dl_main
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Cond
+   fun:__tls*
+   obj:*
+   obj:*
+   fun:_vgnU_freeres
+}
+
+{
+   <glibc-2.10 overreads/conditionals>
+   Memcheck:Param
+   arch_prctl(arg2)
+   fun:init_tls
+}
+# GLib caching tmp/home directories (glibc-2.10 variants)
+{
+   <glibc-2.10 GLIB leaks>
+   Memcheck:Cond
+   fun:*
+   fun:dl_open_worker
+   fun:*
+   fun:*
+   fun:*
+   fun:_dl_catch_error
+   fun:dlerror_run
+   fun:*
+   fun:__nss_lookup_function
+   fun:__nss_lookup
+   fun:getpwnam*
+}
+{
+   <glibc-2.10 GLIB leaks>
+   Memcheck:Value8
+   fun:*
+   fun:dl_open_worker
+   fun:*
+   fun:*
+   fun:*
+   fun:_dl_catch_error
+   fun:dlerror_run
+   fun:*
+   fun:__nss_lookup_function
+   fun:__nss_lookup
+   fun:getpwnam*
+}
+{
+   <glibc-2.10 GLIB leaks>
+   Memcheck:Cond
+   fun:dl_open_worker
+   fun:*
+   fun:*
+   fun:do_dlopen
+   fun:*
+   fun:dlerror_run
+   fun:*
+   fun:__nss_lookup_function
+   fun:__nss_lookup
+   fun:getpwnam*
+}
+{
+   <glibc-2.10 GLIB leaks>
+   Memcheck:Value8
+   fun:dl_open_worker
+   fun:*
+   fun:*
+   fun:do_dlopen
+   fun:*
+   fun:dlerror_run
+   fun:*
+   fun:__nss_lookup_function
+   fun:__nss_lookup
+   fun:getpwnam*
+}
+
+{
+   <glibc-2.10 GLIB leaks>
+   Memcheck:Value8
+   fun:_dl_add_to_slotinfo
+   fun:dl_main
+}
+{
+   <glibc-2.10 GLIB leaks>
+   Memcheck:Param
+   open(filename)
+   fun:open
+   fun:open_verify
+   fun:open_path
+   fun:_dl_map_object
+}
+
+
+
+# GModule issues with glibc-2.10
+{
+   <glibc-2.10 GLIB leaks>
+   Memcheck:Value8
+   fun:*
+   fun:*
+   fun:dlsym
+   fun:g_module_symbol
+}
+{
+   <glibc-2.10 GLIB leaks>
+   Memcheck:Value8
+   fun:g_module_*
+   fun:gst_plugin*
+}
+{
+   <glibc-2.10 GLIB leaks>
+   Memcheck:Value8
+   fun:*
+   fun:g_module_*
+   fun:gst_plugin*
+}
+
+{
+   <glibc-2.10 GLIB leaks>
+   Memcheck:Value8
+   fun:*
+   fun:*
+   fun:dlopen*
+   fun:g_module_open
+}
+{
+   <glibc-2.10 GLIB leaks>
+   Memcheck:Value8
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:dlsym
+   fun:g_module_symbol
+}
+
+{
+   <glibc-2.10 GLIB leaks>
+   Memcheck:Value8
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:*
+   fun:dlopen*
+   fun:g_module_open
+}
+
+# Leak in GSlice
+{
+   <insert a suppression name here>
+   Memcheck:Value8
+   fun:g_parse_debug_string
+   fun:slice_config_init
+   fun:g_slice_init_nomessage
+   fun:_g_slice_thread_init_nomessage
+   fun:g_thread_init_glib
+}
+
+# 2.10 pthread issues
+{
+   <insert a suppression name here>
+   Memcheck:Value8
+   fun:__pthread_initialize_minimal
+}
+
+# glibc 2.11 conditional
+{
+   <glibc-2.11 conditional>
+   Memcheck:Cond
+   fun:_dl_relocate_object
+   fun:dl_main
+   fun:_dl_sysdep_start
+   fun:_dl_start
+   obj:/lib64/ld-2.11.so
+}
+
+# glibc 2.11 Leak
+
+{
+   <insert_a_suppression_name_here>
+   Memcheck:Leak
+   fun:*alloc
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.2.5
+}
+
+{
+   <insert_a_suppression_name_here>
+   Memcheck:Leak
+   fun:*alloc
+   fun:_dl_*
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.2.5
+}
+
+{
+   <insert_a_suppression_name_here>
+   Memcheck:Leak
+   fun:*alloc
+   fun:_dl_*
+   fun:_dl_*
+   fun:_dl_*
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.2.5
+}
+
+{
+   <insert_a_suppression_name_here>
+   Memcheck:Leak
+   fun:*alloc
+   fun:*
+   fun:_dl_*
+   fun:openaux
+   fun:_dl_catch_error
+   fun:_dl_map_object_deps
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.2.5
+}
+
+{
+   <insert_a_suppression_name_here>
+   Memcheck:Leak
+   fun:*alloc
+   fun:*
+   fun:_dl_map_object
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.2.5
+}
+
+{
+   <insert_a_suppression_name_here>
+   Memcheck:Leak
+   fun:*alloc
+   fun:_dl_new_object
+   fun:_dl_map_object_from_fd
+   fun:_dl_map_object
+   fun:openaux
+   fun:_dl_catch_error
+   fun:_dl_map_object_deps
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.2.5
+}
+
+{
+   <insert_a_suppression_name_here>
+   Memcheck:Leak
+   fun:*alloc
+   fun:*
+   fun:_dl_*
+   fun:_dl_*
+   fun:_dl_*
+   fun:dl_open_worker
+   fun:_dl_catch_error
+   fun:_dl_open
+   fun:dlopen_doit
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlopen@@GLIBC_2.2.5
+}
+
+# glib type leaks
+{
+   <insert_a_suppression_name_here>
+   Memcheck:Leak
+   fun:*alloc
+   ...
+   fun:g_type_register_static
+}
+
+# new registry system
+# all of this will only be created once when loading registry.
+
+{
+   <insert_a_suppression_name_here>
+   Memcheck:Leak
+   fun:*alloc
+   ...
+   fun:_priv_gst_registry_chunks_load_plugin
+}
+
+# system-wide tags
+# these tags are registered once
+
+{
+   <insert_a_suppression_name_here>
+   Memcheck:Leak
+   fun:*alloc
+   fun:*
+   fun:*
+   fun:gst_tag_register
+   fun:_gst_tag_initialize
+}
+
+# system-wide type classes that we keep referenced
+
+{
+   <g_type_class_ref leaks>
+   Memcheck:Leak
+   fun:*alloc
+   ...
+   fun:g_type_class_ref
+}
+
+# leaking cached queries which are only initialized once
+{
+   <insert_a_suppression_name_here>
+   Memcheck:Leak
+   fun:*alloc
+   ...
+   fun:_gst_query_initialize
+   fun:init_post
+}
+
+# macosx (leopard) library loader leak
+{
+   <insert_a_suppression_name_here>
+   Memcheck:Leak
+   fun:_Znwm
+   fun:_ZNSs4_Rep9_S_createEmmRKSaIcE
+   fun:_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag
+   fun:_ZNSsC2EPKcRKSaIcE
+   fun:_Z41__static_initialization_and_destruction_0ii
+   fun:_ZN16ImageLoaderMachO18doModInitFunctionsERKN11ImageLoader11LinkContextE
+}
+
+# GObject type registration
+{
+   <insert_a_suppression_name_here>
+   Memcheck:Leak
+   fun:*alloc
+   ...
+   fun:_g_atomic_array_copy
+}
+
+{
+   <getdelim one-time inits called from libselinux>
+   Memcheck:Leak
+   fun:*alloc
+   fun:getdelim
+   obj:*libselinux*
+}
+
+{
+   <weird one when re-reading registry>
+   Memcheck:Leak
+   fun:*alloc
+   ...
+   obj:*/sed
+}
+
+{
+   <weird one when re-reading registry>
+   Memcheck:Addr8
+   ...
+   obj:*/sed
+}
+
+# GLib 2.23 interface vtable
+{
+   <insert_a_suppression_name_here>
+   Memcheck:Leak
+   fun:*alloc
+   ...
+   fun:g_type_add_interface_static
+}
+
+{
+   <leak in dash on debian sid>
+   Memcheck:Leak
+   fun:*alloc
+   obj:*/dash
+}
+
+# libtool/gentoo fake leak
+# it actually runs bash and valgrind complains
+{
+   <insert_a_suppression_name_here>
+   Memcheck:Leak
+   fun:*alloc
+   obj:/bin/bash
+}
+
+{
+   <ignore possbly-lost leaks in the plugin scanner which doesn't clean up properly>
+   Memcheck:Leak
+   fun:*alloc
+   ...
+   fun:_gst_plugin_loader_client_run
+   fun:main
+}
+
+{
+   <warning with libc 2.13-2 as in Debian/unstable on amd64>
+   Memcheck:Cond
+   fun:*strcasecmp*
+   ...
+   fun:__dcigettext
+}
+
+{
+   <warning with libc 2.13-2 as in Debian/unstable on amd64>
+   Memcheck:Value8
+   fun:*strcasecmp*
+   ...
+   fun:__dcigettext
+}
+
+{
+   <GstSystemClock is a singleton and does not leak>
+   Memcheck:Leak
+   fun:malloc
+   ...
+   fun:gst_poll_new
+   fun:gst_poll_new_timer
+   fun:gst_system_clock_init
+}
+
+{
+   <glib types are singletons>
+   Memcheck:Leak
+   fun:calloc
+   ...
+   fun:gobject_init_ctor
+}
+
+{
+   <quark table is leaked on purpose if it grows too big>
+   Memcheck:Leak
+   fun:malloc
+   ...
+   fun:g_quark_from*_string
+}
+
+{
+  <timer_create suppressions for earlier valgrind versions that complain>
+  Memcheck:Param
+  timer_create(evp)
+  fun:timer_create@@GLIBC_2.3.3
+}
+
+{
+   closures aren't valgrind friendly (bgo#739850)
+   Memcheck:Leak
+   fun:calloc
+   ...
+   fun:g_cclosure_new
+}
+
+{
+   closures aren't valgrind friendly (bgo#739850)
+   Memcheck:Leak
+   fun:malloc
+   ...
+   fun:g_closure_add_invalidate_notifier
+}
+
+{
+   closures aren't valgrind friendly (bgo#739850)
+   Memcheck:Leak
+   fun:calloc
+   ...
+   fun:g_closure_new_simple
+}
+
+{
+   glib/giomodules2 (from libsoup.supp)
+   Memcheck:Leak
+   ...
+   fun:_g_io_module_get_default
+}
+
+{
+   <valgrind bug when trying to parse "infinity" from "interleaved">
+   Memcheck:Addr8
+   fun:__GI___strncasecmp_l
+   fun:____strtod_l_internal
+   fun:gst_value_deserialize_double
+}
+
+{
+   <glibc overreads/conditionals>
+   Memcheck:Addr8
+   fun:do_lookup_x
+}
+
+{
+   <quark tables are leaked on purpose when they are expanded, observed with glib 2.46 and gst-rtsp-server tests>
+   Memcheck:Leak
+   fun:malloc
+   ...
+   fun:g_quark_init
+}
+# A suppression for an old bug in libtheora (fixed in more recent versions,
+# but some of our buildslaves still have this)
+{
+   <Leaky libtheora>
+   Memcheck:Leak
+   fun:realloc
+   fun:oggpackB_write
+   fun:EncodeData
+   obj:/usr/lib/libtheora.so*
+   fun:theora_encode_YUVin
+}
+
+# Suppression for pango on ubuntu edgy/x86 and textoverlay test
+{
+   <pango>
+   Memcheck:Param
+   access(pathname)
+   fun:access
+   fun:pango_config_key_get
+   fun:pango_find_map
+}
+
+{
+   <suppression for a singleton in GIO that can't be cleaned up>
+   Memcheck:Leak
+   fun:realloc
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   fun:g_type_create_instance
+   fun:g_object_constructor
+   fun:g_object_newv
+   fun:g_object_new_valist
+   fun:g_object_new
+   fun:get_default_vfs
+   fun:g_once_impl
+   fun:g_vfs_get_default
+}
+
+{
+   <suppression for a singleton in GIO that can't be cleaned up>
+   Memcheck:Leak
+   fun:malloc
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   fun:g_type_create_instance
+   fun:g_object_constructor
+   fun:g_object_newv
+   fun:g_object_new_valist
+   fun:g_object_new
+   fun:get_default_vfs
+   fun:g_once_impl
+   fun:g_vfs_get_default
+}
+
+{
+   <ALSA unitialised access>
+   Memcheck:Cond
+   obj:/usr/lib/libasound.so.*
+   fun:snd_pcm_hw_params_set_buffer_time_near
+}
+
+{
+   <ALSA unitialized access>
+   Memcheck:Cond
+   obj:/usr/lib/libasound.so.*
+   obj:/usr/lib/libasound.so.*
+   obj:/usr/lib/libasound.so.*
+   fun:snd_pcm_hw_params_set_buffer_time_near
+}
+
+{
+   <One time init in ALSA>
+   Memcheck:Leak
+   fun:malloc
+   obj:/usr/lib/libasound.so.*
+   obj:/usr/lib/libasound.so.*
+   fun:gst_alsa_device_property_probe_get_values
+}
+
+{
+   <One time init in ALSA>
+   Memcheck:Leak
+   fun:calloc
+   obj:/usr/lib/libasound.so.*
+   obj:/usr/lib/libasound.so.*
+   obj:/usr/lib/libasound.so.*
+   obj:/usr/lib/libasound.so.*
+   obj:/usr/lib/libasound.so.*
+   obj:/usr/lib/libasound.so.*
+   fun:snd_config_hook_load
+   obj:*
+   obj:/usr/lib/libasound.so.*
+   fun:snd_config_searcha_hooks
+   fun:snd_config_searchva_hooks
+   obj:/usr/lib/libasound.so.*
+   fun:snd_config_search_definition
+   obj:/usr/lib/libasound.so.*
+   fun:gst_alsa_device_property_probe_get_values
+}
+
+{
+   <One time init in ALSA>
+   Memcheck:Leak
+   fun:calloc
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:/usr/lib/libasound.so.*
+   fun:snd_config_searcha_hooks
+   fun:snd_config_searchva_hooks
+   obj:/usr/lib/libasound.so.*
+   fun:snd_config_search_definition
+   obj:/usr/lib/libasound.so.*
+   fun:gst_alsa_device_property_probe_get_values
+}
+
+{
+   <One time init in ALSA>
+   Memcheck:Leak
+   fun:calloc
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:/usr/lib/libasound.so.*
+   fun:snd_config_searcha_hooks
+   fun:snd_config_searchva_hooks
+   obj:/usr/lib/libasound.so.*
+   fun:snd_config_search_definition
+   obj:/usr/lib/libasound.so.*
+   fun:gst_alsa_device_property_probe_get_values
+}
+
+{
+   <One time init in ALSA>
+   Memcheck:Leak
+   fun:calloc
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:*
+   obj:/usr/lib/libasound.so.*
+   fun:snd_config_searcha_hooks
+   fun:snd_config_searchva_hooks
+   obj:/usr/lib/libasound.so.*
+   fun:snd_config_search_definition
+   obj:/usr/lib/libasound.so.*
+   fun:gst_alsa_device_property_probe_get_values
+}
+
+{
+   <One time init in ALSA>
+   Memcheck:Leak
+   fun:malloc
+   obj:/usr/lib/libasound.so.*
+   obj:/usr/lib/libasound.so.*
+   fun:snd_hctl_open
+   fun:snd_mixer_attach
+}
+
+{
+   <Pulseaudio ALSA plugin initialisation>
+   Memcheck:Leak
+   fun:calloc
+   fun:pa_xmalloc0
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   fun:pa_proplist_sets
+   fun:pa_context_new_with_proplist
+   fun:pa_context_new
+   obj:/usr/lib/alsa-lib/libasound_module_pcm_pulse.so
+}
+
+{
+   <Pulseaudio ALSA plugin initialisation>
+   Memcheck:Leak
+   fun:calloc
+   fun:pa_xmalloc0
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   fun:pa_mainloop_dispatch
+   obj:/usr/lib/alsa-lib/libasound_module_pcm_pulse.so
+}
+
+{
+   <Pulseaudio ALSA plugin initialisation>
+   Memcheck:Leak
+   fun:calloc
+   obj:/usr/lib/libasound.so.*
+   obj:/usr/lib/libasound.so.*
+   obj:/usr/lib/libasound.so.*
+   obj:/usr/lib/libasound.so.*
+   obj:/usr/lib/libasound.so.*
+   obj:/usr/lib/libasound.so.*
+   fun:snd_config_hook_load
+   obj:/usr/lib/alsa-lib/libasound_module_ctl_pulse.so
+}
+
+{
+   <Pulseaudio ALSA plugin initialisation>
+   Memcheck:Leak
+   fun:calloc
+   fun:pa_xmalloc0
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   fun:pa_proplist_sets
+   fun:pa_context_new_with_proplist
+   fun:pa_context_new
+   obj:/usr/lib/alsa-lib/libasound_module_ctl_pulse.so
+}
+
+{
+   <Pulseaudio ALSA plugin initialisation>
+   Memcheck:Leak
+   fun:calloc
+   fun:pa_xmalloc0
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   fun:pa_mainloop_dispatch
+   obj:/usr/lib/alsa-lib/libasound_module_ctl_pulse.so
+}
+
+{
+   <Pulseaudio ALSA plugin initialisation>
+   Memcheck:Leak
+   fun:calloc
+   fun:pa_xmalloc0
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   fun:pa_mainloop_dispatch
+   obj:/usr/lib/alsa-lib/libasound_module_ctl_pulse.so
+}
+
+{
+   <Pulseaudio ALSA plugin initialisation>
+   Memcheck:Leak
+   fun:calloc
+   fun:pa_xmalloc0
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   fun:pa_mainloop_dispatch
+   obj:/usr/lib/alsa-lib/libasound_module_ctl_pulse.so
+}
+
+{
+   <Pulseaudio ALSA plugin initialisation>
+   Memcheck:Leak
+   fun:calloc
+   obj:/usr/lib/libasound.so.*
+   obj:/usr/lib/libasound.so.*
+   obj:/usr/lib/libasound.so.*
+   obj:/usr/lib/libasound.so.*
+   obj:/usr/lib/libasound.so.*
+   obj:/usr/lib/libasound.so.*
+   fun:snd_config_hook_load
+   obj:/usr/lib/alsa-lib/libasound_module_pcm_pulse.so
+}
+
+{
+   <Pulseaudio ALSA plugin initialisation>
+   Memcheck:Leak
+   fun:calloc
+   fun:pa_xmalloc0
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   fun:pa_mainloop_dispatch
+   obj:/usr/lib/alsa-lib/libasound_module_pcm_pulse.so
+}
+
+{
+   <Pulseaudio ALSA plugin initialisation>
+   Memcheck:Leak
+   fun:calloc
+   fun:pa_xmalloc0
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   obj:/usr/lib/libpulse.so.*
+   fun:pa_mainloop_dispatch
+   obj:/usr/lib/alsa-lib/libasound_module_pcm_pulse.so
+}
+
+{
+   <One time ALSA init>
+   Memcheck:Leak
+   fun:malloc
+   obj:/usr/lib/libasound.so.*
+   obj:/usr/lib/libasound.so.*
+   obj:/usr/lib/libasound.so.*
+   fun:gst_alsasrc_open
+}
+
+{
+   <Fontconfig init>
+   Memcheck:Leak
+   fun:*alloc
+   ...
+   fun:FcConfigParseAndLoad
+}
+
+{
+   <Fontconfig init>
+   Memcheck:Leak
+   fun:realloc
+   obj:/usr/lib/libfontconfig.so.*
+   obj:/usr/lib/libfontconfig.so.*
+   obj:/usr/lib/libfontconfig.so.*
+   obj:/usr/lib/libfontconfig.so.*
+   fun:FcDefaultSubstitute
+}
+
+{
+   <Fontconfig init>
+   Memcheck:Leak
+   fun:realloc
+   obj:/usr/lib/libfontconfig.so.*
+   obj:/usr/lib/libfontconfig.so.*
+   fun:FcConfigSubstituteWithPat
+}
+
+{
+   <Fontconfig init>
+   Memcheck:Leak
+   fun:realloc
+   obj:/usr/lib/libfontconfig.so.*
+   obj:/usr/lib/libfontconfig.so.*
+   obj:/usr/lib/libfontconfig.so.*
+   fun:FcFontRenderPrepare
+}
+# ALSA leaks which are fixed by calling snd_config_update_free_global
+{
+   <ALSA cached config data>
+   Memcheck:Leak
+   fun:malloc
+   fun:strdup
+   obj:/usr/lib/libasound.so.2.0.0
+   obj:/usr/lib/libasound.so.2.0.0
+   fun:gst_alsa_get_device_list
+   fun:gst_alsa_device_property_probe_get_values
+   fun:gst_property_probe_get_values
+   fun:gst_property_probe_probe_and_get_values
+   fun:gst_property_probe_probe_and_get_values_name
+   fun:test_device_property_probe
+   fun:srunner_run_all
+   fun:gst_check_run_suite
+   fun:main
+}
+{
+   <ALSA cached config data>
+   Memcheck:Leak
+   fun:malloc
+   obj:/usr/lib/libasound.so.2.0.0
+   obj:/usr/lib/libasound.so.2.0.0
+   fun:gst_alsa_get_device_list
+   fun:gst_alsa_device_property_probe_get_values
+   fun:gst_property_probe_get_values
+   fun:gst_property_probe_probe_and_get_values
+   fun:gst_property_probe_probe_and_get_values_name
+   fun:test_device_property_probe
+   fun:srunner_run_all
+   fun:gst_check_run_suite
+   fun:main
+}
+{
+   <ALSA cached config data>
+   Memcheck:Leak
+   fun:malloc
+   fun:_dl_close_worker
+   fun:_dl_close
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlclose
+   obj:/usr/lib/libasound.so.2.0.0
+   fun:snd_config_searcha_hooks
+   fun:snd_config_searchva_hooks
+   obj:/usr/lib/libasound.so.2.0.0
+   fun:snd_config_search_definition
+   obj:/usr/lib/libasound.so.2.0.0
+   fun:gst_alsa_get_device_list
+   fun:gst_alsa_device_property_probe_get_values
+   fun:gst_property_probe_get_values
+   fun:gst_property_probe_probe_and_get_values
+   fun:gst_property_probe_probe_and_get_values_name
+   fun:test_device_property_probe
+   fun:srunner_run_all
+   fun:gst_check_run_suite
+}
+{
+   <ALSA cached config data>
+   Memcheck:Leak
+   fun:malloc
+   fun:strdup
+   obj:/usr/lib/libasound.so.2.0.0
+   obj:/usr/lib/libasound.so.2.0.0
+   fun:snd_hctl_open
+   fun:snd_mixer_attach
+   fun:gst_alsa_mixer_open
+   fun:gst_alsa_mixer_new
+   fun:gst_alsa_mixer_element_change_state
+   fun:gst_element_change_state
+   fun:gst_element_set_state_func
+   fun:test_alsa_mixer_track
+   fun:srunner_run_all
+   fun:gst_check_run_suite
+   fun:main
+}
+{
+   <ALSA cached config data>
+   Memcheck:Leak
+   fun:malloc
+   fun:strdup
+   obj:/usr/lib/libasound.so.2.0.0
+   obj:/usr/lib/libasound.so.2.0.0
+   fun:snd_hctl_open
+   fun:snd_mixer_attach
+   fun:gst_alsa_mixer_open
+   fun:gst_alsa_mixer_new
+   fun:gst_alsa_mixer_element_change_state
+   fun:gst_element_change_state
+   fun:gst_element_set_state_func
+   fun:test_alsa_mixer_track
+   fun:srunner_run_all
+   fun:gst_check_run_suite
+   fun:main
+}
+{
+   <ALSA cached config data>
+   Memcheck:Leak
+   fun:malloc
+   fun:_dl_close_worker
+   fun:_dl_close
+   fun:_dl_catch_error
+   fun:_dlerror_run
+   fun:dlclose
+   obj:/usr/lib/libasound.so.2.0.0
+   fun:snd_config_searcha_hooks
+   fun:snd_config_searchva_hooks
+   obj:/usr/lib/libasound.so.2.0.0
+   fun:snd_config_search_definition
+   obj:/usr/lib/libasound.so.2.0.0
+   fun:snd_hctl_open
+   fun:snd_mixer_attach
+   fun:gst_alsa_mixer_open
+   fun:gst_alsa_mixer_new
+   fun:gst_alsa_mixer_element_change_state
+   fun:gst_element_change_state
+   fun:gst_element_set_state_func
+   fun:test_alsa_mixer_track
+}
+{
+   <several valgrind warnings as found with libjpeg 6b on Debian>
+   Memcheck:Cond
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   fun:jpeg_finish_decompress
+}
+
+{
+   <several valgrind warnings as found with libjpeg 6b on Debian>
+   Memcheck:Cond
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+}
+
+{
+   <several valgrind warnings as found with libjpeg 6b on Debian>
+   Memcheck:Cond
+   fun:jpeg_fill_bit_buffer
+   fun:jpeg_huff_decode
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   fun:jpeg_read_raw_data
+}
+
+{
+   <several valgrind warnings as found with libjpeg 6b on Debian>
+   Memcheck:Cond
+   fun:jpeg_fill_bit_buffer
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   fun:jpeg_read_raw_data
+}
+
+{
+   <several valgrind warnings as found with libjpeg 6b on Debian>
+   Memcheck:Cond
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+}
+
+{
+   <several valgrind warnings as found with libjpeg 6b on Debian>
+   Memcheck:Cond
+   obj:/usr/lib/libjpeg.so.*
+   fun:jpeg_finish_compress
+}
+
+{
+   <several valgrind warnings as found with libjpeg 6b on Debian>
+   Memcheck:Cond
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   fun:jpeg_finish_compress
+}
+
+{
+   <several valgrind warnings as found with libjpeg 6b on Debian>
+   Memcheck:Cond
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   fun:jpeg_finish_compress
+}
+
+{
+   <several valgrind warnings as found with libjpeg 6b on Debian>
+   Memcheck:Cond
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   fun:jpeg_write_raw_data
+}
+
+{
+   <several valgrind warnings as found with libjpeg 6b on Debian>
+   Memcheck:Cond
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   fun:jpeg_write_raw_data
+}
+
+{
+   <several valgrind warnings as found with libjpeg 6b on Debian>
+   Memcheck:Cond
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   fun:jpeg_write_raw_data
+}
+
+{
+   <several valgrind warnings as found with libjpeg 6b on Debian>
+   Memcheck:Cond
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   fun:jpeg_write_raw_data
+}
+
+{
+   <several valgrind warnings as found with libjpeg 6b on Debian>
+   Memcheck:Cond
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   fun:jinit_compress_master
+   fun:jpeg_start_compress
+}
+
+{
+   <several valgrind warnings as found with libjpeg 6b on Debian>
+   Memcheck:Cond
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   obj:/usr/lib/libjpeg.so.*
+   fun:jinit_compress_master
+   fun:jpeg_start_compress
+}
+
+{
+   <well known zlib bug>
+   Memcheck:Cond
+   fun:inflateReset2
+   fun:inflateInit2_
+   fun:png_create_read_struct_2
+   fun:png_create_read_struct
+}
+
+{
+   <apparent strtod bug when trying to parse "infinity" from "interleaved">
+   Memcheck:Addr8
+   fun:__GI___strncasecmp_l
+   fun:____strtod_l_internal
+   fun:gst_value_deserialize_double
+}
+
+{
+   <suppression for libneon-25.5dfsg5 on tpm's edgy/x86>
+   Memcheck:Param
+   socketcall.sendto(msg)
+   fun:sendto
+   fun:getaddrinfo
+   fun:ne_addr_resolve
+   fun:ne_begin_request
+}
+
+{
+   <Soundtouch valgrind warning>
+   Memcheck:Cond
+   fun:_ZN10soundtouch9TDStretch8setTempoEf
+   fun:_ZN10soundtouch9TDStretch13setParametersEjjjj
+   fun:_ZN10soundtouch9TDStretchC1Ev
+   fun:_ZN10soundtouch9TDStretch11newInstanceEv
+   fun:_ZN10soundtouch10SoundTouchC1Ev
+}
+
+{
+   <Soundtouch valgrind warning>
+   Memcheck:Cond
+   fun:_ZN10soundtouch9TDStretch8setTempoEf
+   fun:_ZN10soundtouch9TDStretch13setParametersEjjjj
+   fun:_ZN10soundtouch9TDStretchC1Ev
+   fun:_ZN10soundtouch9TDStretch11newInstanceEv
+   fun:_ZN10soundtouch10SoundTouchC1Ev
+}
+
+{
+   <the LADSPA sine plugin produces this on every exit() it seems >
+   Memcheck:Free
+   fun:_ZdaPv
+   obj:/usr/lib/ladspa/sine.so
+}
+
+### amrnb suppressions
+### these should/could be submitted to amrnb
+
+{
+   <amrnb>
+   Memcheck:Cond
+   fun:Encoder_Interface_Encode
+   fun:gst_amrnbenc_chain
+   fun:gst_pad_chain
+   fun:gst_pad_push
+}
+
+{
+   <amrnb>
+   Memcheck:Cond
+   fun:Speech_Encode_Frame
+   fun:Encoder_Interface_Encode
+   fun:gst_amrnbenc_chain
+   fun:gst_pad_chain
+   fun:gst_pad_push
+}
+
+{
+   <amrnb>
+   Memcheck:Cond
+   obj:/usr/lib/libamrnb.so*
+   fun:Speech_Encode_Frame
+   fun:Encoder_Interface_Encode
+   fun:gst_amrnbenc_chain
+   fun:gst_pad_chain
+   fun:gst_pad_push
+}
+
+{
+   <amrnb>
+   Memcheck:Cond
+   obj:/usr/lib/libamrnb.so*
+   obj:/usr/lib/libamrnb.so*
+   fun:Speech_Encode_Frame
+   fun:Encoder_Interface_Encode
+   fun:gst_amrnbenc_chain
+   fun:gst_pad_chain
+   fun:gst_pad_push
+}
+
+{
+   <amrnb>
+   Memcheck:Cond
+   obj:/usr/lib/libamrnb.so*
+   obj:/usr/lib/libamrnb.so*
+   obj:/usr/lib/libamrnb.so*
+   fun:Speech_Encode_Frame
+   fun:Encoder_Interface_Encode
+   fun:gst_amrnbenc_chain
+   fun:gst_pad_chain
+   fun:gst_pad_push
+}
+
+{
+   <amrnb acos>
+   Memcheck:Cond
+   fun:acos
+   obj:/usr/lib/libamrnb.so*
+   obj:/usr/lib/libamrnb.so*
+   fun:Speech_Encode_Frame
+   fun:Encoder_Interface_Encode
+   fun:gst_amrnbenc_chain
+   fun:gst_pad_chain
+   fun:gst_pad_push
+}
+
+{
+   <AMR encoder>
+   Memcheck:Cond
+   fun:Levinson
+   fun:Speech_Encode_Frame
+   fun:Encoder_Interface_Encode
+}
+
+{
+   <AMR encoder>
+   Memcheck:Cond
+   fun:Az_lsp
+   fun:Speech_Encode_Frame
+   fun:Encoder_Interface_Encode
+}
+
+{
+   <AMR encoder>
+   Memcheck:Cond
+   fun:acos
+   fun:Lsp_lsf
+   fun:Speech_Encode_Frame
+   fun:Encoder_Interface_Encode
+}
+
+{
+   <AMR encoder>
+   Memcheck:Cond
+   fun:Lsf_wt
+   fun:Speech_Encode_Frame
+   fun:Encoder_Interface_Encode
+}
+{
+   <AMR encoder>
+   Memcheck:Cond
+   fun:Vq_subvec
+   fun:Speech_Encode_Frame
+   fun:Encoder_Interface_Encode
+}
+
+{
+   <AMR encoder>
+   Memcheck:Cond
+   fun:Lag_max
+   fun:Pitch_ol
+   fun:ol_ltp
+   fun:Speech_Encode_Frame
+   fun:Encoder_Interface_Encode
+}
+
+{
+   <AMR encoder>
+   Memcheck:Cond
+   fun:Pitch_ol
+   fun:ol_ltp
+   fun:Speech_Encode_Frame
+   fun:Encoder_Interface_Encode
+}
+
+{
+   <AMR encoder>
+   Memcheck:Cond
+   fun:cl_ltp
+   fun:Speech_Encode_Frame
+   fun:Encoder_Interface_Encode
+}
+
+{
+   <AMR encoder>
+   Memcheck:Cond
+   fun:searchFrac
+   fun:cl_ltp
+   fun:Speech_Encode_Frame
+   fun:Encoder_Interface_Encode
+}
+
+{
+   <AMR encoder>
+   Memcheck:Cond
+   fun:q_gain_pitch
+   fun:cl_ltp
+   fun:Speech_Encode_Frame
+   fun:Encoder_Interface_Encode
+}
+
+{
+   <AMR encoder>
+   Memcheck:Cond
+   fun:set_sign12k2
+   fun:code_10i40_35bits
+   fun:cbsearch
+   fun:Speech_Encode_Frame
+   fun:Encoder_Interface_Encode
+}
+
+{
+   <AMR encoder>
+   Memcheck:Cond
+   fun:code_10i40_35bits
+   fun:cbsearch
+   fun:Speech_Encode_Frame
+   fun:Encoder_Interface_Encode
+}
+
+{
+   <AMR encoder>
+   Memcheck:Cond
+   fun:gainQuant
+   fun:Speech_Encode_Frame
+   fun:Encoder_Interface_Encode
+}
+
+{
+   <AMR encoder on FC4>
+   Memcheck:Value2
+   obj:/usr/lib/libamrnb.so.0.0.0
+   fun:Speech_Encode_Frame
+   fun:Encoder_Interface_Encode
+}
+
+## lame
+
+{
+   <lame Conditional jump or move depends on uninitialised values>
+   Memcheck:Cond
+   fun:L3psycho_anal_vbr
+   fun:lame_encode_mp3_frame
+   ...
+   fun:lame_encode_flush
+   fun:gst_lamemp3enc_sink_event
+}
+
diff --git a/ext/jpeg/gstjpegdec.c b/ext/jpeg/gstjpegdec.c
index 8486c64d0..b195a89d3 100644
--- a/ext/jpeg/gstjpegdec.c
+++ b/ext/jpeg/gstjpegdec.c
@@ -2,7 +2,7 @@
  * Copyright (C) <1999> Erik Walthinsen <omega@cse.ogi.edu>
  * Copyright (C) <2009> Tim-Philipp Müller <tim centricular net>
  * Copyright (C) 2012 Collabora Ltd.
- *	Author : Edward Hervey <edward@collabora.com>
+ *      Author : Edward Hervey <edward@collabora.com>
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
@@ -36,9 +36,10 @@
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
-#include <string.h>
 
 #include "gstjpegdec.h"
+
+#include <string.h>
 #include "gstjpeg.h"
 #include <gst/video/video.h>
 #include <gst/video/gstvideometa.h>
@@ -46,24 +47,39 @@
 #include "gst/gst-i18n-plugin.h"
 #include <jerror.h>
 
+#include "work.h"
+#include "ug.h"
+
 #define MIN_WIDTH  1
 #define MAX_WIDTH  65535
 #define MIN_HEIGHT 1
 #define MAX_HEIGHT 65535
 
+#define FIRST_FRAME 1
+
 #define CINFO_GET_JPEGDEC(cinfo_ptr) \
         (((struct GstJpegDecSourceMgr*)((cinfo_ptr)->src))->dec)
 
-#define JPEG_DEFAULT_IDCT_METHOD	JDCT_FASTEST
-#define JPEG_DEFAULT_MAX_ERRORS 	0
+#define JPEG_DEFAULT_IDCT_METHOD        JDCT_FASTEST
+#define JPEG_DEFAULT_MAX_ERRORS         0
+#define JPEG_DEFAULT_NUM_CORES          4
 
 enum
 {
   PROP_0,
   PROP_IDCT_METHOD,
-  PROP_MAX_ERRORS
+  PROP_MAX_ERRORS,
+  PROP_NUM_CORES
 };
 
+typedef enum JpegStatus
+{
+  JPEGSTATUS_NONE,
+  JPEGSTATUS_GOOD,
+  JPEGSTATUS_ABORT
+}
+JpegStatus;
+
 /* *INDENT-OFF* */
 static GstStaticPadTemplate gst_jpeg_dec_src_pad_template =
 GST_STATIC_PAD_TEMPLATE ("src",
@@ -88,99 +104,29 @@ GST_DEBUG_CATEGORY_STATIC (jpeg_dec_debug);
 #define GST_CAT_DEFAULT jpeg_dec_debug
 GST_DEBUG_CATEGORY_STATIC (GST_CAT_PERFORMANCE);
 
-static void gst_jpeg_dec_set_property (GObject * object, guint prop_id,
-    const GValue * value, GParamSpec * pspec);
-static void gst_jpeg_dec_get_property (GObject * object, guint prop_id,
-    GValue * value, GParamSpec * pspec);
-
-static gboolean gst_jpeg_dec_set_format (GstVideoDecoder * dec,
-    GstVideoCodecState * state);
-static gboolean gst_jpeg_dec_start (GstVideoDecoder * bdec);
-static gboolean gst_jpeg_dec_stop (GstVideoDecoder * bdec);
-static gboolean gst_jpeg_dec_flush (GstVideoDecoder * bdec);
-static GstFlowReturn gst_jpeg_dec_parse (GstVideoDecoder * bdec,
-    GstVideoCodecFrame * frame, GstAdapter * adapter, gboolean at_eos);
-static GstFlowReturn gst_jpeg_dec_handle_frame (GstVideoDecoder * bdec,
-    GstVideoCodecFrame * frame);
-static gboolean gst_jpeg_dec_decide_allocation (GstVideoDecoder * bdec,
-    GstQuery * query);
-static gboolean gst_jpeg_dec_sink_event (GstVideoDecoder * bdec,
-    GstEvent * event);
-
 #define gst_jpeg_dec_parent_class parent_class
 G_DEFINE_TYPE (GstJpegDec, gst_jpeg_dec, GST_TYPE_VIDEO_DECODER);
 
-static void
-gst_jpeg_dec_finalize (GObject * object)
+METHODDEF (void)
+gst_jpeg_dec_my_output_message (j_common_ptr cinfo)
 {
-  GstJpegDec *dec = GST_JPEG_DEC (object);
-
-  jpeg_destroy_decompress (&dec->cinfo);
-  if (dec->input_state)
-    gst_video_codec_state_unref (dec->input_state);
-
-  G_OBJECT_CLASS (parent_class)->finalize (object);
+  return;                       /* do nothing */
 }
 
-static void
-gst_jpeg_dec_class_init (GstJpegDecClass * klass)
+METHODDEF (void)
+    gst_jpeg_dec_my_emit_message (j_common_ptr cinfo, int msg_level)
 {
-  GObjectClass *gobject_class;
-  GstElementClass *element_class;
-  GstVideoDecoderClass *vdec_class;
-
-  gobject_class = (GObjectClass *) klass;
-  element_class = (GstElementClass *) klass;
-  vdec_class = (GstVideoDecoderClass *) klass;
-
-  parent_class = g_type_class_peek_parent (klass);
-
-  gobject_class->finalize = gst_jpeg_dec_finalize;
-  gobject_class->set_property = gst_jpeg_dec_set_property;
-  gobject_class->get_property = gst_jpeg_dec_get_property;
-
-  g_object_class_install_property (gobject_class, PROP_IDCT_METHOD,
-      g_param_spec_enum ("idct-method", "IDCT Method",
-          "The IDCT algorithm to use", GST_TYPE_IDCT_METHOD,
-          JPEG_DEFAULT_IDCT_METHOD,
-          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
-
-  /**
-   * GstJpegDec:max-errors:
-   *
-   * Error out after receiving N consecutive decoding errors
-   * (-1 = never error out, 0 = automatic, 1 = fail on first error, etc.)
-   *
-   * Deprecated: 1.3.1: Property wasn't used internally
-   */
-#ifndef GST_REMOVE_DEPRECATED
-  g_object_class_install_property (gobject_class, PROP_MAX_ERRORS,
-      g_param_spec_int ("max-errors", "Maximum Consecutive Decoding Errors",
-          "(Deprecated) Error out after receiving N consecutive decoding errors"
-          " (-1 = never fail, 0 = automatic, 1 = fail on first error)",
-          -1, G_MAXINT, JPEG_DEFAULT_MAX_ERRORS,
-          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS | G_PARAM_DEPRECATED));
-#endif
-
-  gst_element_class_add_static_pad_template (element_class,
-      &gst_jpeg_dec_src_pad_template);
-  gst_element_class_add_static_pad_template (element_class,
-      &gst_jpeg_dec_sink_pad_template);
-  gst_element_class_set_static_metadata (element_class, "JPEG image decoder",
-      "Codec/Decoder/Image", "Decode images from JPEG format",
-      "Wim Taymans <wim@fluendo.com>");
+  /* GST_LOG_OBJECT (CINFO_GET_JPEGDEC (&cinfo), "msg_level=%d", msg_level); */
+  return;
+}
 
-  vdec_class->start = gst_jpeg_dec_start;
-  vdec_class->stop = gst_jpeg_dec_stop;
-  vdec_class->flush = gst_jpeg_dec_flush;
-  vdec_class->parse = gst_jpeg_dec_parse;
-  vdec_class->set_format = gst_jpeg_dec_set_format;
-  vdec_class->handle_frame = gst_jpeg_dec_handle_frame;
-  vdec_class->decide_allocation = gst_jpeg_dec_decide_allocation;
-  vdec_class->sink_event = gst_jpeg_dec_sink_event;
+METHODDEF (void)
+    gst_jpeg_dec_my_error_exit (j_common_ptr cinfo)
+{
+  struct GstJpegDecErrorMgr *err_mgr = (struct GstJpegDecErrorMgr *) cinfo->err;
 
-  GST_DEBUG_CATEGORY_INIT (jpeg_dec_debug, "jpegdec", 0, "JPEG decoder");
-  GST_DEBUG_CATEGORY_GET (GST_CAT_PERFORMANCE, "GST_PERFORMANCE");
+  (*cinfo->err->output_message) (cinfo);
+  longjmp (err_mgr->setjmp_buffer, 1);
 }
 
 static boolean
@@ -197,7 +143,6 @@ gst_jpeg_dec_init_source (j_decompress_ptr cinfo)
   GST_LOG_OBJECT (CINFO_GET_JPEGDEC (cinfo), "init_source");
 }
 
-
 static void
 gst_jpeg_dec_skip_input_data (j_decompress_ptr cinfo, glong num_bytes)
 {
@@ -225,58 +170,113 @@ gst_jpeg_dec_term_source (j_decompress_ptr cinfo)
   return;
 }
 
-METHODDEF (void)
-    gst_jpeg_dec_my_output_message (j_common_ptr cinfo)
+// For the moment we assume that the number of worker threads should equal the
+// number of processor cores, but we can change that mapping by modifying this
+// function.
+static guint
+calc_threads (GstJpegDec * dec, guint cores)
 {
-  return;                       /* do nothing */
+  return cores;
 }
 
-METHODDEF (void)
-    gst_jpeg_dec_my_emit_message (j_common_ptr cinfo, int msg_level)
+static gboolean
+gst_jpeg_dec_job_done (GstJpegDecJob * job)
 {
-  /* GST_LOG_OBJECT (CINFO_GET_JPEGDEC (&cinfo), "msg_level=%d", msg_level); */
-  return;
-}
+  GstVideoDecoder *bdec = NULL;
+  gboolean ret = FALSE;
+  GST_DEBUG ("job_done");
+  if (job) {
+    if (!job->frame)
+      ret = TRUE;
+    else {
+      g_return_val_if_fail (job->jsrc.dec != NULL, FALSE);
+      bdec = GST_VIDEO_DECODER (job->jsrc.dec);
 
-METHODDEF (void)
-    gst_jpeg_dec_my_error_exit (j_common_ptr cinfo)
-{
-  struct GstJpegDecErrorMgr *err_mgr = (struct GstJpegDecErrorMgr *) cinfo->err;
+      switch (job->fsts) {
+        case FRAMESTATUS_GOOD:
+          gst_video_decoder_finish_frame (bdec, job->frame);
+          ret = TRUE;
+          break;
 
-  (*cinfo->err->output_message) (cinfo);
-  longjmp (err_mgr->setjmp_buffer, 1);
-}
+        case FRAMESTATUS_LATE:
+          gst_video_decoder_drop_frame (bdec, job->frame);
+          ret = FALSE;
+          break;
 
-static void
-gst_jpeg_dec_init (GstJpegDec * dec)
-{
-  GST_DEBUG ("initializing");
+        default:
+        case FRAMESTATUS_BAD:
+          gst_video_decoder_release_frame (bdec, job->frame);
+          ret = FALSE;
+          break;
+      }
 
-  /* setup jpeglib */
-  memset (&dec->cinfo, 0, sizeof (dec->cinfo));
-  memset (&dec->jerr, 0, sizeof (dec->jerr));
-  dec->cinfo.err = jpeg_std_error (&dec->jerr.pub);
-  dec->jerr.pub.output_message = gst_jpeg_dec_my_output_message;
-  dec->jerr.pub.emit_message = gst_jpeg_dec_my_emit_message;
-  dec->jerr.pub.error_exit = gst_jpeg_dec_my_error_exit;
+      job->frame = NULL;
+    }
+  }
 
-  jpeg_create_decompress (&dec->cinfo);
+  return ret;
+}
 
-  dec->cinfo.src = (struct jpeg_source_mgr *) &dec->jsrc;
-  dec->cinfo.src->init_source = gst_jpeg_dec_init_source;
-  dec->cinfo.src->fill_input_buffer = gst_jpeg_dec_fill_input_buffer;
-  dec->cinfo.src->skip_input_data = gst_jpeg_dec_skip_input_data;
-  dec->cinfo.src->resync_to_restart = gst_jpeg_dec_resync_to_restart;
-  dec->cinfo.src->term_source = gst_jpeg_dec_term_source;
-  dec->jsrc.dec = dec;
+static GstJpegDecJob *
+gst_jpeg_dec_job_free (GstJpegDecJob * job)
+{
+  GST_DEBUG ("gst_jpeg_dec_job_free");
+  if (job) {
+    /* Remove _job_done calling, because, when closing output window mannually, will generate error.
+     * Because at this moment, some resource has been released. 
+     * For normal playback, _job_done has been called before _job_free */
+    //gst_jpeg_dec_job_done (job);
+    jpeg_destroy_decompress (&job->cinfo);
+    for (int i = 0; i < 16; i++) {
+      job->idr_y[i] = ug_free (job->idr_y[i]);
+      job->idr_u[i] = ug_free (job->idr_u[i]);
+      job->idr_v[i] = ug_free (job->idr_v[i]);
+    }
+    job->idr_width_allocated = 0;
+    job = ug_free (job);
+  }
+  return job;
+}
 
-  /* init properties */
-  dec->idct_method = JPEG_DEFAULT_IDCT_METHOD;
-  dec->max_errors = JPEG_DEFAULT_MAX_ERRORS;
+static void
+gst_jpeg_dec_job_destroy (void *job)
+{
+  gst_jpeg_dec_job_free (job);
+}
 
-  gst_video_decoder_set_use_default_pad_acceptcaps (GST_VIDEO_DECODER_CAST
-      (dec), TRUE);
-  GST_PAD_SET_ACCEPT_TEMPLATE (GST_VIDEO_DECODER_SINK_PAD (dec));
+static GstJpegDecJob *
+gst_jpeg_dec_job_new (GstJpegDec * dec)
+{
+  GstJpegDecJob *job = ug_new (GstJpegDecJob);
+  GST_DEBUG_OBJECT (dec, "job_new");
+  if (job) {
+    /* setup jpeglib */
+    memset (&job->cinfo, 0, sizeof (job->cinfo));
+    memset (&job->jerr, 0, sizeof (job->jerr));
+    job->cinfo.err = jpeg_std_error (&job->jerr.pub);
+    job->jerr.pub.output_message = gst_jpeg_dec_my_output_message;
+    job->jerr.pub.emit_message = gst_jpeg_dec_my_emit_message;
+    job->jerr.pub.error_exit = gst_jpeg_dec_my_error_exit;
+
+    jpeg_create_decompress (&job->cinfo);
+
+    job->cinfo.src = (struct jpeg_source_mgr *) &job->jsrc;
+    job->cinfo.src->init_source = gst_jpeg_dec_init_source;
+    job->cinfo.src->fill_input_buffer = gst_jpeg_dec_fill_input_buffer;
+    job->cinfo.src->skip_input_data = gst_jpeg_dec_skip_input_data;
+    job->cinfo.src->resync_to_restart = gst_jpeg_dec_resync_to_restart;
+    job->cinfo.src->term_source = gst_jpeg_dec_term_source;
+    job->jsrc.dec = dec;
+    job->frame = NULL;
+    job->fsts = FRAMESTATUS_NONE;
+
+    for (int i = 0; i < 16; i++) {
+      job->idr_y[i] = NULL;
+      job->idr_u[i] = NULL;
+      job->idr_v[i] = NULL;
+    }
+  }
+  return job;
 }
 
 static inline gboolean
@@ -383,7 +383,6 @@ gst_jpeg_dec_parse (GstVideoDecoder * bdec, GstVideoCodecFrame * frame,
       goto drop_frame;
     }
 
-
     if (value >= 0xd0 && value <= 0xd7)
       frame_len = 0;
     else {
@@ -590,19 +589,212 @@ guarantee_huff_tables (j_decompress_ptr dinfo)
   }
 }
 
-static gboolean
-gst_jpeg_dec_set_format (GstVideoDecoder * dec, GstVideoCodecState * state)
+static gboolean gst_jpeg_dec_set_format
+    (GstVideoDecoder * dec, GstVideoCodecState * state)
 {
   GstJpegDec *jpeg = GST_JPEG_DEC (dec);
+  GstVideoInfo *info = &state->info;
+  GST_DEBUG_OBJECT (dec, "set_format");
 
   if (jpeg->input_state)
     gst_video_codec_state_unref (jpeg->input_state);
   jpeg->input_state = gst_video_codec_state_ref (state);
 
+  //If upstream element output proper caps, then use it directly; 
+  //Otherwise, wait for negotiation during processing
+  if (jpeg->input_state && jpeg->input_state->caps) {
+    GST_LOG_OBJECT
+        (jpeg, "input state \n"
+        "  caps : %" GST_PTR_FORMAT "\n", (void *) jpeg->input_state->caps);
+
+    if (G_UNLIKELY (info->width < MIN_WIDTH || info->width > MAX_WIDTH ||
+            info->height < MIN_HEIGHT || info->height > MAX_HEIGHT))
+      return TRUE;
+
+    if (jpeg->output_state) {
+      gst_video_codec_state_unref (jpeg->output_state);
+      jpeg->output_state = NULL;
+    }
+    //Fixate output format to I420,maybe change during processing if incoming jpeg colorspace is RGB or GRAY
+    jpeg->output_state = gst_video_decoder_set_output_state
+        (dec, GST_VIDEO_FORMAT_I420, info->width, info->height,
+        jpeg->input_state);
+    jpeg->output_state->info.colorimetry.range = GST_VIDEO_COLOR_RANGE_0_255;
+    jpeg->output_state->info.colorimetry.matrix = GST_VIDEO_COLOR_MATRIX_BT601;
+    jpeg->output_state->info.colorimetry.transfer = GST_VIDEO_TRANSFER_UNKNOWN;
+    jpeg->output_state->info.colorimetry.primaries =
+        GST_VIDEO_COLOR_PRIMARIES_UNKNOWN;
+
+    GST_VIDEO_DECODER_CLASS (parent_class)->negotiate (dec);
+    jpeg->have_negotiated = TRUE;
+  }
   return TRUE;
 }
 
 
+#if 0
+static gboolean
+gst_jpeg_dec_negotiate (GstVideoDecoder * bdec)
+{
+  GstJpegDec *dec = GST_JPEG_DEC (bdec);
+  GST_DEBUG_OBJECT (dec, "negotiate");
+
+  GstVideoInfo info;
+  GstStructure *stc;
+
+  gboolean ret = FALSE;
+  GstCaps *templcaps = gst_pad_get_pad_template_caps (bdec->srcpad);
+  GstCaps *caps = gst_pad_peer_query_caps (bdec->srcpad, templcaps);
+
+  if (caps)
+    gst_caps_unref (templcaps);
+  else
+    caps = templcaps;
+  templcaps = NULL;
+
+  if (caps && !gst_caps_is_empty (caps) && !gst_caps_is_any (caps)) {
+    gint caps_size;
+
+    GST_LOG_OBJECT (bdec, "peer caps %" GST_PTR_FORMAT, caps);
+
+    // before fixating, try to use whatever upstream provided 
+    caps = gst_caps_make_writable (caps);
+    caps_size = gst_caps_get_size (caps);
+
+    if (dec->input_state && dec->input_state->caps) {
+      gint width, height;
+      gint par_n, par_d;
+      gint fps_n, fps_d;
+      GstCaps *sinkcaps = dec->input_state->caps;
+      GstStructure *stc = gst_caps_get_structure (sinkcaps, 0);
+
+      if (gst_structure_get_int (stc, "width", &width))
+        for (gint i = 0; i < caps_size; i++)
+          gst_structure_set (gst_caps_get_structure (caps, i)
+              , "width", G_TYPE_INT, width, NULL);
+
+      if (gst_structure_get_int (stc, "height", &height))
+        for (gint i = 0; i < caps_size; i++)
+          gst_structure_set (gst_caps_get_structure (caps, i)
+              , "height", G_TYPE_INT, height, NULL);
+
+      if (gst_structure_get_fraction (stc, "framerate", &fps_n, &fps_d))
+        for (gint i = 0; i < caps_size; i++)
+          gst_structure_set (gst_caps_get_structure (caps, i)
+              , "framerate", GST_TYPE_FRACTION, fps_n, fps_d, NULL);
+
+      if (gst_structure_get_fraction (stc, "pixel-aspect-ratio", &par_n, &par_d)
+          )
+        for (gint i = 0; i < caps_size; i++)
+          gst_structure_set (gst_caps_get_structure (caps, i)
+              , "pixel-aspect-ratio", GST_TYPE_FRACTION, par_n, par_d, NULL);
+    }
+    // Choose I420 1280x720@30 for fixation 
+    for (gint i = 0; i < caps_size; i++) {
+      stc = gst_caps_get_structure (caps, i);
+
+      if (gst_structure_has_field (stc, "format"))
+        gst_structure_fixate_field_string (stc, "format", "I420");
+      else
+        gst_structure_set (stc, "format", G_TYPE_STRING, "I420", NULL);
+
+      if (gst_structure_has_field (stc, "width"))
+        gst_structure_fixate_field_nearest_int (stc, "width", 1280);
+      else
+        gst_structure_set (stc, "width", G_TYPE_INT, 1280, NULL);
+
+      if (gst_structure_has_field (stc, "height"))
+        gst_structure_fixate_field_nearest_int (stc, "height", 720);
+      else
+        gst_structure_set (stc, "height", G_TYPE_INT, 720, NULL);
+
+      if (gst_structure_has_field (stc, "framerate"))
+        gst_structure_fixate_field_nearest_fraction (stc, "framerate", 30, 1);
+      else
+        gst_structure_set (stc, "framerate", GST_TYPE_FRACTION, 30, 1, NULL);
+
+      if (gst_structure_has_field (stc, "pixel-aspect-ratio"))
+        gst_structure_fixate_field_nearest_fraction
+            (stc, "pixel-aspect-ratio", 1, 1);
+      else
+        gst_structure_set
+            (stc, "pixel-aspect-ratio", GST_TYPE_FRACTION, 1, 1, NULL);
+    }
+
+    caps = gst_caps_fixate (caps);
+    stc = gst_caps_get_structure (caps, 0);
+
+    if (caps && gst_video_info_from_caps (&info, caps)) {
+      GST_INFO_OBJECT (dec, "Chose caps %" GST_PTR_FORMAT, caps);
+
+      if (dec->output_state)
+        gst_video_codec_state_unref (dec->output_state);
+
+      dec->output_state = gst_video_decoder_set_output_state
+          (bdec, info.finfo->format, info.width, info.height, dec->input_state);
+      ret = GST_VIDEO_DECODER_CLASS (parent_class)->negotiate (bdec);
+    }
+  }
+
+  if (caps)
+    gst_caps_unref (caps);
+
+  return ret;
+}
+#endif
+
+static void
+gst_jpeg_dec_negotiate (GstJpegDec * dec, gint width, gint height, gint clrspc)
+{
+  GstVideoInfo *info;
+  GstVideoFormat format;
+
+  g_return_if_fail (dec != NULL);
+  GST_DEBUG_OBJECT (dec, "negotiate");
+  switch (clrspc) {
+    case JCS_RGB:
+      format = GST_VIDEO_FORMAT_RGB;
+      break;
+    case JCS_GRAYSCALE:
+      format = GST_VIDEO_FORMAT_GRAY8;
+      break;
+    default:
+      format = GST_VIDEO_FORMAT_I420;
+      break;
+  }
+
+  /* Compare to currently configured output state */
+  if (dec->output_state) {
+    info = &dec->output_state->info;
+
+    if (width == GST_VIDEO_INFO_WIDTH (info) &&
+        height == GST_VIDEO_INFO_HEIGHT (info) &&
+        format == GST_VIDEO_INFO_FORMAT (info)) {
+      return;
+    }
+    gst_video_codec_state_unref (dec->output_state);
+  }
+
+  dec->output_state =
+      gst_video_decoder_set_output_state (GST_VIDEO_DECODER (dec), format,
+      width, height, dec->input_state);
+
+  switch (clrspc) {
+    case JCS_RGB:
+    case JCS_GRAYSCALE:
+      break;
+    default:
+      dec->output_state->info.colorimetry.range = GST_VIDEO_COLOR_RANGE_0_255;
+      dec->output_state->info.colorimetry.matrix = GST_VIDEO_COLOR_MATRIX_BT601;
+      dec->output_state->info.colorimetry.transfer = GST_VIDEO_TRANSFER_UNKNOWN;
+      dec->output_state->info.colorimetry.primaries =
+          GST_VIDEO_COLOR_PRIMARIES_UNKNOWN;
+      break;
+  }
+
+  dec->have_negotiated = gst_video_decoder_negotiate (GST_VIDEO_DECODER (dec));
+}
+
 /* yuk */
 static void
 hresamplecpy1 (guint8 * dest, const guint8 * src, guint len)
@@ -618,50 +810,36 @@ hresamplecpy1 (guint8 * dest, const guint8 * src, guint len)
   }
 }
 
-static void
-gst_jpeg_dec_free_buffers (GstJpegDec * dec)
-{
-  gint i;
-
-  for (i = 0; i < 16; i++) {
-    g_free (dec->idr_y[i]);
-    g_free (dec->idr_u[i]);
-    g_free (dec->idr_v[i]);
-    dec->idr_y[i] = NULL;
-    dec->idr_u[i] = NULL;
-    dec->idr_v[i] = NULL;
-  }
-
-  dec->idr_width_allocated = 0;
-}
 
 static inline gboolean
-gst_jpeg_dec_ensure_buffers (GstJpegDec * dec, guint maxrowbytes)
+gst_jpeg_dec_ensure_buffers (GstJpegDecJob * job, guint maxrowbytes)
 {
   gint i;
 
-  if (G_LIKELY (dec->idr_width_allocated == maxrowbytes))
+  if (G_LIKELY (job->idr_width_allocated == maxrowbytes))
     return TRUE;
 
   /* FIXME: maybe just alloc one or three blocks altogether? */
   for (i = 0; i < 16; i++) {
-    dec->idr_y[i] = g_try_realloc (dec->idr_y[i], maxrowbytes);
-    dec->idr_u[i] = g_try_realloc (dec->idr_u[i], maxrowbytes);
-    dec->idr_v[i] = g_try_realloc (dec->idr_v[i], maxrowbytes);
+    job->idr_y[i] = g_try_realloc (job->idr_y[i], maxrowbytes);
+    job->idr_u[i] = g_try_realloc (job->idr_u[i], maxrowbytes);
+    job->idr_v[i] = g_try_realloc (job->idr_v[i], maxrowbytes);
 
-    if (G_UNLIKELY (!dec->idr_y[i] || !dec->idr_u[i] || !dec->idr_v[i])) {
-      GST_WARNING_OBJECT (dec, "out of memory, i=%d, bytes=%u", i, maxrowbytes);
+    if (G_UNLIKELY (!job->idr_y[i] || !job->idr_u[i] || !job->idr_v[i])) {
+      GST_WARNING_OBJECT (job->jsrc.dec, "out of memory, i=%d, bytes=%u", i,
+          maxrowbytes);
       return FALSE;
     }
   }
 
-  dec->idr_width_allocated = maxrowbytes;
-  GST_LOG_OBJECT (dec, "allocated temp memory, %u bytes/row", maxrowbytes);
+  job->idr_width_allocated = maxrowbytes;
+  GST_LOG_OBJECT (job->jsrc.dec, "allocated temp memory, %u bytes/row",
+      maxrowbytes);
   return TRUE;
 }
 
 static void
-gst_jpeg_dec_decode_grayscale (GstJpegDec * dec, GstVideoFrame * frame)
+gst_jpeg_dec_decode_grayscale (GstJpegDecJob * job, GstVideoFrame * frame)
 {
   guchar *rows[16];
   guchar **scanarray[1] = { rows };
@@ -671,23 +849,23 @@ gst_jpeg_dec_decode_grayscale (GstJpegDec * dec, GstVideoFrame * frame)
   gint width, height;
   gint pstride, rstride;
 
-  GST_DEBUG_OBJECT (dec, "indirect decoding of grayscale");
+  GST_DEBUG_OBJECT (job->jsrc.dec, "indirect decoding of grayscale");
 
   width = GST_VIDEO_FRAME_WIDTH (frame);
   height = GST_VIDEO_FRAME_HEIGHT (frame);
 
-  if (G_UNLIKELY (!gst_jpeg_dec_ensure_buffers (dec, GST_ROUND_UP_32 (width))))
+  if (G_UNLIKELY (!gst_jpeg_dec_ensure_buffers (job, GST_ROUND_UP_32 (width))))
     return;
 
   base[0] = GST_VIDEO_FRAME_COMP_DATA (frame, 0);
   pstride = GST_VIDEO_FRAME_COMP_PSTRIDE (frame, 0);
   rstride = GST_VIDEO_FRAME_COMP_STRIDE (frame, 0);
 
-  memcpy (rows, dec->idr_y, 16 * sizeof (gpointer));
+  memcpy (rows, job->idr_y, 16 * sizeof (gpointer));
 
   i = 0;
   while (i < height) {
-    lines = jpeg_read_raw_data (&dec->cinfo, scanarray, DCTSIZE);
+    lines = jpeg_read_raw_data (&job->cinfo, scanarray, DCTSIZE);
     if (G_LIKELY (lines > 0)) {
       for (j = 0; (j < DCTSIZE) && (i < height); j++, i++) {
         gint p;
@@ -700,13 +878,13 @@ gst_jpeg_dec_decode_grayscale (GstJpegDec * dec, GstVideoFrame * frame)
         base[0] += rstride;
       }
     } else {
-      GST_INFO_OBJECT (dec, "jpeg_read_raw_data() returned 0");
+      GST_INFO_OBJECT (job->jsrc.dec, "jpeg_read_raw_data() returned 0");
     }
   }
 }
 
 static void
-gst_jpeg_dec_decode_rgb (GstJpegDec * dec, GstVideoFrame * frame)
+gst_jpeg_dec_decode_rgb (GstJpegDecJob * job, GstVideoFrame * frame)
 {
   guchar *r_rows[16], *g_rows[16], *b_rows[16];
   guchar **scanarray[3] = { r_rows, g_rows, b_rows };
@@ -716,12 +894,12 @@ gst_jpeg_dec_decode_rgb (GstJpegDec * dec, GstVideoFrame * frame)
   guint pstride, rstride;
   gint width, height;
 
-  GST_DEBUG_OBJECT (dec, "indirect decoding of RGB");
+  GST_DEBUG_OBJECT (job->jsrc.dec, "indirect decoding of RGB");
 
   width = GST_VIDEO_FRAME_WIDTH (frame);
   height = GST_VIDEO_FRAME_HEIGHT (frame);
 
-  if (G_UNLIKELY (!gst_jpeg_dec_ensure_buffers (dec, GST_ROUND_UP_32 (width))))
+  if (G_UNLIKELY (!gst_jpeg_dec_ensure_buffers (job, GST_ROUND_UP_32 (width))))
     return;
 
   for (i = 0; i < 3; i++)
@@ -730,13 +908,13 @@ gst_jpeg_dec_decode_rgb (GstJpegDec * dec, GstVideoFrame * frame)
   pstride = GST_VIDEO_FRAME_COMP_PSTRIDE (frame, 0);
   rstride = GST_VIDEO_FRAME_COMP_STRIDE (frame, 0);
 
-  memcpy (r_rows, dec->idr_y, 16 * sizeof (gpointer));
-  memcpy (g_rows, dec->idr_u, 16 * sizeof (gpointer));
-  memcpy (b_rows, dec->idr_v, 16 * sizeof (gpointer));
+  memcpy (r_rows, job->idr_y, 16 * sizeof (gpointer));
+  memcpy (g_rows, job->idr_u, 16 * sizeof (gpointer));
+  memcpy (b_rows, job->idr_v, 16 * sizeof (gpointer));
 
   i = 0;
   while (i < height) {
-    lines = jpeg_read_raw_data (&dec->cinfo, scanarray, DCTSIZE);
+    lines = jpeg_read_raw_data (&job->cinfo, scanarray, DCTSIZE);
     if (G_LIKELY (lines > 0)) {
       for (j = 0; (j < DCTSIZE) && (i < height); j++, i++) {
         gint p;
@@ -753,14 +931,14 @@ gst_jpeg_dec_decode_rgb (GstJpegDec * dec, GstVideoFrame * frame)
         base[2] += rstride;
       }
     } else {
-      GST_INFO_OBJECT (dec, "jpeg_read_raw_data() returned 0");
+      GST_INFO_OBJECT (job->jsrc.dec, "jpeg_read_raw_data() returned 0");
     }
   }
 }
 
 static void
-gst_jpeg_dec_decode_indirect (GstJpegDec * dec, GstVideoFrame * frame, gint r_v,
-    gint r_h, gint comp)
+gst_jpeg_dec_decode_indirect (GstJpegDecJob * job, GstVideoFrame * frame,
+    gint r_v, gint r_h, gint comp)
 {
   guchar *y_rows[16], *u_rows[16], *v_rows[16];
   guchar **scanarray[3] = { y_rows, u_rows, v_rows };
@@ -770,13 +948,13 @@ gst_jpeg_dec_decode_indirect (GstJpegDec * dec, GstVideoFrame * frame, gint r_v,
   gint stride[3];
   gint width, height;
 
-  GST_DEBUG_OBJECT (dec,
+  GST_DEBUG_OBJECT (job->jsrc.dec,
       "unadvantageous width or r_h, taking slow route involving memcpy");
 
   width = GST_VIDEO_FRAME_WIDTH (frame);
   height = GST_VIDEO_FRAME_HEIGHT (frame);
 
-  if (G_UNLIKELY (!gst_jpeg_dec_ensure_buffers (dec, GST_ROUND_UP_32 (width))))
+  if (G_UNLIKELY (!gst_jpeg_dec_ensure_buffers (job, GST_ROUND_UP_32 (width))))
     return;
 
   for (i = 0; i < 3; i++) {
@@ -788,13 +966,13 @@ gst_jpeg_dec_decode_indirect (GstJpegDec * dec, GstVideoFrame * frame, gint r_v,
         (GST_VIDEO_FRAME_COMP_HEIGHT (frame, i) - 1));
   }
 
-  memcpy (y_rows, dec->idr_y, 16 * sizeof (gpointer));
-  memcpy (u_rows, dec->idr_u, 16 * sizeof (gpointer));
-  memcpy (v_rows, dec->idr_v, 16 * sizeof (gpointer));
+  memcpy (y_rows, job->idr_y, 16 * sizeof (gpointer));
+  memcpy (u_rows, job->idr_u, 16 * sizeof (gpointer));
+  memcpy (v_rows, job->idr_v, 16 * sizeof (gpointer));
 
   /* fill chroma components for grayscale */
   if (comp == 1) {
-    GST_DEBUG_OBJECT (dec, "grayscale, filling chroma");
+    GST_DEBUG_OBJECT (job->jsrc.dec, "grayscale, filling chroma");
     for (i = 0; i < 16; i++) {
       memset (u_rows[i], GST_ROUND_UP_32 (width), 0x80);
       memset (v_rows[i], GST_ROUND_UP_32 (width), 0x80);
@@ -802,7 +980,7 @@ gst_jpeg_dec_decode_indirect (GstJpegDec * dec, GstVideoFrame * frame, gint r_v,
   }
 
   for (i = 0; i < height; i += r_v * DCTSIZE) {
-    lines = jpeg_read_raw_data (&dec->cinfo, scanarray, r_v * DCTSIZE);
+    lines = jpeg_read_raw_data (&job->cinfo, scanarray, r_v * DCTSIZE);
     if (G_LIKELY (lines > 0)) {
       for (j = 0, k = 0; j < (r_v * DCTSIZE); j += r_v, k++) {
         if (G_LIKELY (base[0] <= last[0])) {
@@ -833,13 +1011,13 @@ gst_jpeg_dec_decode_indirect (GstJpegDec * dec, GstVideoFrame * frame, gint r_v,
         }
       }
     } else {
-      GST_INFO_OBJECT (dec, "jpeg_read_raw_data() returned 0");
+      GST_INFO_OBJECT (job->jsrc.dec, "jpeg_read_raw_data() returned 0");
     }
   }
 }
 
 static GstFlowReturn
-gst_jpeg_dec_decode_direct (GstJpegDec * dec, GstVideoFrame * frame)
+gst_jpeg_dec_decode_direct (GstJpegDecJob * job, GstVideoFrame * frame)
 {
   guchar **line[3];             /* the jpeg line buffer         */
   guchar *y[4 * DCTSIZE] = { NULL, };   /* alloc enough for the lines   */
@@ -855,9 +1033,9 @@ gst_jpeg_dec_decode_direct (GstJpegDec * dec, GstVideoFrame * frame)
   line[1] = u;
   line[2] = v;
 
-  v_samp[0] = dec->cinfo.comp_info[0].v_samp_factor;
-  v_samp[1] = dec->cinfo.comp_info[1].v_samp_factor;
-  v_samp[2] = dec->cinfo.comp_info[2].v_samp_factor;
+  v_samp[0] = job->cinfo.comp_info[0].v_samp_factor;
+  v_samp[1] = job->cinfo.comp_info[1].v_samp_factor;
+  v_samp[2] = job->cinfo.comp_info[2].v_samp_factor;
 
   if (G_UNLIKELY (v_samp[0] > 2 || v_samp[1] > 2 || v_samp[2] > 2))
     goto format_not_supported;
@@ -874,7 +1052,7 @@ gst_jpeg_dec_decode_direct (GstJpegDec * dec, GstVideoFrame * frame)
   }
 
   /* let jpeglib decode directly into our final buffer */
-  GST_DEBUG_OBJECT (dec, "decoding directly into output buffer");
+  GST_DEBUG_OBJECT (job->jsrc.dec, "decoding directly into output buffer");
 
   for (i = 0; i < height; i += v_samp[0] * DCTSIZE) {
     for (j = 0; j < (v_samp[0] * DCTSIZE); ++j) {
@@ -900,9 +1078,9 @@ gst_jpeg_dec_decode_direct (GstJpegDec * dec, GstVideoFrame * frame)
         line[2][j] = last[2];
     }
 
-    lines = jpeg_read_raw_data (&dec->cinfo, line, v_samp[0] * DCTSIZE);
+    lines = jpeg_read_raw_data (&job->cinfo, line, v_samp[0] * DCTSIZE);
     if (G_UNLIKELY (!lines)) {
-      GST_INFO_OBJECT (dec, "jpeg_read_raw_data() returned 0");
+      GST_INFO_OBJECT (job->jsrc.dec, "jpeg_read_raw_data() returned 0");
     }
   }
   return GST_FLOW_OK;
@@ -911,7 +1089,7 @@ format_not_supported:
   {
     gboolean ret = GST_FLOW_OK;
 
-    GST_VIDEO_DECODER_ERROR (dec, 1, STREAM, DECODE,
+    GST_VIDEO_DECODER_ERROR (job->jsrc.dec, 1, STREAM, DECODE,
         (_("Failed to decode JPEG image")),
         ("Unsupported subsampling schema: v_samp factors: %u %u %u", v_samp[0],
             v_samp[1], v_samp[2]), ret);
@@ -920,68 +1098,44 @@ format_not_supported:
   }
 }
 
-static void
-gst_jpeg_dec_negotiate (GstJpegDec * dec, gint width, gint height, gint clrspc)
+static gboolean
+gst_jpeg_dec_decide_allocation (GstVideoDecoder * bdec, GstQuery * query)
 {
-  GstVideoCodecState *outstate;
-  GstVideoInfo *info;
-  GstVideoFormat format;
-
-  switch (clrspc) {
-    case JCS_RGB:
-      format = GST_VIDEO_FORMAT_RGB;
-      break;
-    case JCS_GRAYSCALE:
-      format = GST_VIDEO_FORMAT_GRAY8;
-      break;
-    default:
-      format = GST_VIDEO_FORMAT_I420;
-      break;
-  }
-
-  /* Compare to currently configured output state */
-  outstate = gst_video_decoder_get_output_state (GST_VIDEO_DECODER (dec));
-  if (outstate) {
-    info = &outstate->info;
+  GstBufferPool *pool = NULL;
+  GstStructure *config;
+  GST_DEBUG ("decide_allocation");
+  if (!GST_VIDEO_DECODER_CLASS (parent_class)->decide_allocation (bdec, query))
+    return FALSE;
 
-    if (width == GST_VIDEO_INFO_WIDTH (info) &&
-        height == GST_VIDEO_INFO_HEIGHT (info) &&
-        format == GST_VIDEO_INFO_FORMAT (info)) {
-      gst_video_codec_state_unref (outstate);
-      return;
-    }
-    gst_video_codec_state_unref (outstate);
-  }
+  if (gst_query_get_n_allocation_pools (query) > 0)
+    gst_query_parse_nth_allocation_pool (query, 0, &pool, NULL, NULL, NULL);
 
-  outstate =
-      gst_video_decoder_set_output_state (GST_VIDEO_DECODER (dec), format,
-      width, height, dec->input_state);
+  if (pool == NULL)
+    return FALSE;
 
-  switch (clrspc) {
-    case JCS_RGB:
-    case JCS_GRAYSCALE:
-      break;
-    default:
-      outstate->info.colorimetry.range = GST_VIDEO_COLOR_RANGE_0_255;
-      outstate->info.colorimetry.matrix = GST_VIDEO_COLOR_MATRIX_BT601;
-      outstate->info.colorimetry.transfer = GST_VIDEO_TRANSFER_UNKNOWN;
-      outstate->info.colorimetry.primaries = GST_VIDEO_COLOR_PRIMARIES_UNKNOWN;
-      break;
+  config = gst_buffer_pool_get_config (pool);
+  if (gst_query_find_allocation_meta (query, GST_VIDEO_META_API_TYPE, NULL)) {
+    gst_buffer_pool_config_add_option (config,
+        GST_BUFFER_POOL_OPTION_VIDEO_META);
   }
+  gst_buffer_pool_set_config (pool, config);
+  gst_object_unref (pool);
 
-  gst_video_codec_state_unref (outstate);
-
-  gst_video_decoder_negotiate (GST_VIDEO_DECODER (dec));
-
-  GST_DEBUG_OBJECT (dec, "max_v_samp_factor=%d", dec->cinfo.max_v_samp_factor);
-  GST_DEBUG_OBJECT (dec, "max_h_samp_factor=%d", dec->cinfo.max_h_samp_factor);
+  return TRUE;
 }
 
+#if 0
+
+// Original version of this routine preserved for reference purposes.
 static GstFlowReturn
-gst_jpeg_dec_handle_frame (GstVideoDecoder * bdec, GstVideoCodecFrame * frame)
+gst_jpeg_dec_process_frame (void *pool_data, void *job_data, GError ** err)
 {
+  GstJpegDec *dec = pool_data;
+  GList *entry = job_data;
+  GstJpegDecJob *job = entry->data;
+  GstVideoCodecFrame *frame = job->frame;
+  GstVideoDecoder *bdec = (GstVideoDecoder *) dec;
   GstFlowReturn ret = GST_FLOW_OK;
-  GstJpegDec *dec = (GstJpegDec *) bdec;
   GstVideoFrame vframe;
   gint width, height;
   gint r_h, r_v;
@@ -990,14 +1144,13 @@ gst_jpeg_dec_handle_frame (GstVideoDecoder * bdec, GstVideoCodecFrame * frame)
   GstVideoCodecState *state = NULL;
   gboolean release_frame = TRUE;
 
-  dec->current_frame = frame;
-  gst_buffer_map (frame->input_buffer, &dec->current_frame_map, GST_MAP_READ);
+  gst_buffer_map (frame->input_buffer, &job->current_frame_map, GST_MAP_READ);
 
-  dec->cinfo.src->next_input_byte = dec->current_frame_map.data;
-  dec->cinfo.src->bytes_in_buffer = dec->current_frame_map.size;
+  job->cinfo.src->next_input_byte = job->current_frame_map.data;
+  job->cinfo.src->bytes_in_buffer = job->current_frame_map.size;
 
-  if (setjmp (dec->jerr.setjmp_buffer)) {
-    code = dec->jerr.pub.msg_code;
+  if (setjmp (job->jerr.setjmp_buffer)) {
+    code = job->jerr.pub.msg_code;
 
     if (code == JERR_INPUT_EOF) {
       GST_DEBUG ("jpeg input EOF error, we probably need more data");
@@ -1007,74 +1160,77 @@ gst_jpeg_dec_handle_frame (GstVideoDecoder * bdec, GstVideoCodecFrame * frame)
   }
 
   /* read header */
-  hdr_ok = jpeg_read_header (&dec->cinfo, TRUE);
+  hdr_ok = jpeg_read_header (&job->cinfo, TRUE);
   if (G_UNLIKELY (hdr_ok != JPEG_HEADER_OK)) {
-    GST_WARNING_OBJECT (dec, "reading the header failed, %d", hdr_ok);
+    GST_WARNING_OBJECT (job->jsrc.dec, "reading the header failed, %d", hdr_ok);
   }
 
-  GST_LOG_OBJECT (dec, "num_components=%d", dec->cinfo.num_components);
-  GST_LOG_OBJECT (dec, "jpeg_color_space=%d", dec->cinfo.jpeg_color_space);
+  GST_LOG_OBJECT (job->jsrc.dec, "num_components=%d",
+      job->cinfo.num_components);
+  GST_LOG_OBJECT (job->jsrc.dec, "jpeg_color_space=%d",
+      job->cinfo.jpeg_color_space);
 
-  if (!dec->cinfo.num_components || !dec->cinfo.comp_info)
+  if (!job->cinfo.num_components || !job->cinfo.comp_info)
     goto components_not_supported;
 
-  r_h = dec->cinfo.comp_info[0].h_samp_factor;
-  r_v = dec->cinfo.comp_info[0].v_samp_factor;
+  r_h = job->cinfo.comp_info[0].h_samp_factor;
+  r_v = job->cinfo.comp_info[0].v_samp_factor;
 
   GST_LOG_OBJECT (dec, "r_h = %d, r_v = %d", r_h, r_v);
 
-  if (dec->cinfo.num_components > 3)
+  if (job->cinfo.num_components > 3)
     goto components_not_supported;
 
   /* verify color space expectation to avoid going *boom* or bogus output */
-  if (dec->cinfo.jpeg_color_space != JCS_YCbCr &&
-      dec->cinfo.jpeg_color_space != JCS_GRAYSCALE &&
-      dec->cinfo.jpeg_color_space != JCS_RGB)
+  if (job->cinfo.jpeg_color_space != JCS_YCbCr &&
+      job->cinfo.jpeg_color_space != JCS_GRAYSCALE &&
+      job->cinfo.jpeg_color_space != JCS_RGB)
     goto unsupported_colorspace;
 
 #ifndef GST_DISABLE_GST_DEBUG
   {
     gint i;
 
-    for (i = 0; i < dec->cinfo.num_components; ++i) {
-      GST_LOG_OBJECT (dec, "[%d] h_samp_factor=%d, v_samp_factor=%d, cid=%d",
-          i, dec->cinfo.comp_info[i].h_samp_factor,
-          dec->cinfo.comp_info[i].v_samp_factor,
-          dec->cinfo.comp_info[i].component_id);
+    for (i = 0; i < job->cinfo.num_components; ++i) {
+      GST_LOG_OBJECT (job->jsrc.dec,
+          "[%d] h_samp_factor=%d, v_samp_factor=%d, cid=%d", i,
+          job->cinfo.comp_info[i].h_samp_factor,
+          job->cinfo.comp_info[i].v_samp_factor,
+          job->cinfo.comp_info[i].component_id);
     }
   }
 #endif
 
   /* prepare for raw output */
-  dec->cinfo.do_fancy_upsampling = FALSE;
-  dec->cinfo.do_block_smoothing = FALSE;
-  dec->cinfo.out_color_space = dec->cinfo.jpeg_color_space;
-  dec->cinfo.dct_method = dec->idct_method;
-  dec->cinfo.raw_data_out = TRUE;
-
-  GST_LOG_OBJECT (dec, "starting decompress");
-  guarantee_huff_tables (&dec->cinfo);
-  if (!jpeg_start_decompress (&dec->cinfo)) {
+  job->cinfo.do_fancy_upsampling = FALSE;
+  job->cinfo.do_block_smoothing = FALSE;
+  job->cinfo.out_color_space = job->cinfo.jpeg_color_space;
+  job->cinfo.dct_method = job->jsrc.dec->idct_method;
+  job->cinfo.raw_data_out = TRUE;
+
+  GST_LOG_OBJECT (job->jsrc.dec, "starting decompress");
+  guarantee_huff_tables (&job->cinfo);
+  if (!jpeg_start_decompress (&job->cinfo)) {
     GST_WARNING_OBJECT (dec, "failed to start decompression cycle");
   }
 
   /* sanity checks to get safe and reasonable output */
-  switch (dec->cinfo.jpeg_color_space) {
+  switch (job->cinfo.jpeg_color_space) {
     case JCS_GRAYSCALE:
-      if (dec->cinfo.num_components != 1)
+      if (job->cinfo.num_components != 1)
         goto invalid_yuvrgbgrayscale;
       break;
     case JCS_RGB:
-      if (dec->cinfo.num_components != 3 || dec->cinfo.max_v_samp_factor > 1 ||
-          dec->cinfo.max_h_samp_factor > 1)
+      if (job->cinfo.num_components != 3 || job->cinfo.max_v_samp_factor > 1 ||
+          job->cinfo.max_h_samp_factor > 1)
         goto invalid_yuvrgbgrayscale;
       break;
     case JCS_YCbCr:
-      if (dec->cinfo.num_components != 3 ||
-          r_v > 2 || r_v < dec->cinfo.comp_info[0].v_samp_factor ||
-          r_v < dec->cinfo.comp_info[1].v_samp_factor ||
-          r_h < dec->cinfo.comp_info[0].h_samp_factor ||
-          r_h < dec->cinfo.comp_info[1].h_samp_factor)
+      if (job->cinfo.num_components != 3 ||
+          r_v > 2 || r_v < job->cinfo.comp_info[0].v_samp_factor ||
+          r_v < job->cinfo.comp_info[1].v_samp_factor ||
+          r_h < job->cinfo.comp_info[0].h_samp_factor ||
+          r_h < job->cinfo.comp_info[1].h_samp_factor)
         goto invalid_yuvrgbgrayscale;
       break;
     default:
@@ -1082,14 +1238,15 @@ gst_jpeg_dec_handle_frame (GstVideoDecoder * bdec, GstVideoCodecFrame * frame)
       break;
   }
 
-  width = dec->cinfo.output_width;
-  height = dec->cinfo.output_height;
+  width = job->cinfo.output_width;
+  height = job->cinfo.output_height;
 
   if (G_UNLIKELY (width < MIN_WIDTH || width > MAX_WIDTH ||
           height < MIN_HEIGHT || height > MAX_HEIGHT))
     goto wrong_size;
 
-  gst_jpeg_dec_negotiate (dec, width, height, dec->cinfo.jpeg_color_space);
+  gst_jpeg_dec_negotiate (job->jsrc.dec, width, height,
+      job->cinfo.jpeg_color_space);
 
   state = gst_video_decoder_get_output_state (bdec);
   ret = gst_video_decoder_allocate_output_frame (bdec, frame);
@@ -1100,37 +1257,38 @@ gst_jpeg_dec_handle_frame (GstVideoDecoder * bdec, GstVideoCodecFrame * frame)
           GST_MAP_READWRITE))
     goto alloc_failed;
 
-  if (setjmp (dec->jerr.setjmp_buffer)) {
-    code = dec->jerr.pub.msg_code;
+  if (setjmp (job->jerr.setjmp_buffer)) {
+    code = job->jerr.pub.msg_code;
     gst_video_frame_unmap (&vframe);
     goto decode_error;
   }
 
-  GST_LOG_OBJECT (dec, "width %d, height %d", width, height);
+  GST_LOG_OBJECT (job->jsrc.dec, "width %d, height %d", width, height);
 
-  if (dec->cinfo.jpeg_color_space == JCS_RGB) {
-    gst_jpeg_dec_decode_rgb (dec, &vframe);
-  } else if (dec->cinfo.jpeg_color_space == JCS_GRAYSCALE) {
-    gst_jpeg_dec_decode_grayscale (dec, &vframe);
+  if (job->cinfo.jpeg_color_space == JCS_RGB) {
+    gst_jpeg_dec_decode_rgb (job, &vframe);
+  } else if (job->cinfo.jpeg_color_space == JCS_GRAYSCALE) {
+    gst_jpeg_dec_decode_grayscale (job, &vframe);
   } else {
-    GST_LOG_OBJECT (dec, "decompressing (reqired scanline buffer height = %u)",
-        dec->cinfo.rec_outbuf_height);
+    GST_LOG_OBJECT (job->jsrc.dec,
+        "decompressing (reqired scanline buffer height = %u)",
+        job->cinfo.rec_outbuf_height);
 
     /* For some widths jpeglib requires more horizontal padding than I420 
      * provides. In those cases we need to decode into separate buffers and then
      * copy over the data into our final picture buffer, otherwise jpeglib might
      * write over the end of a line into the beginning of the next line,
      * resulting in blocky artifacts on the left side of the picture. */
-    if (G_UNLIKELY (width % (dec->cinfo.max_h_samp_factor * DCTSIZE) != 0
-            || dec->cinfo.comp_info[0].h_samp_factor != 2
-            || dec->cinfo.comp_info[1].h_samp_factor != 1
-            || dec->cinfo.comp_info[2].h_samp_factor != 1)) {
+    if (G_UNLIKELY (width % (job->cinfo.max_h_samp_factor * DCTSIZE) != 0
+            || job->cinfo.comp_info[0].h_samp_factor != 2
+            || job->cinfo.comp_info[1].h_samp_factor != 1
+            || job->cinfo.comp_info[2].h_samp_factor != 1)) {
       GST_CAT_LOG_OBJECT (GST_CAT_PERFORMANCE, dec,
           "indirect decoding using extra buffer copy");
-      gst_jpeg_dec_decode_indirect (dec, &vframe, r_v, r_h,
-          dec->cinfo.num_components);
+      gst_jpeg_dec_decode_indirect (job, &vframe, r_v, r_h,
+          job->cinfo.num_components);
     } else {
-      ret = gst_jpeg_dec_decode_direct (dec, &vframe);
+      ret = gst_jpeg_dec_decode_direct (job, &vframe);
 
       if (G_UNLIKELY (ret != GST_FLOW_OK))
         goto decode_direct_failed;
@@ -1139,15 +1297,15 @@ gst_jpeg_dec_handle_frame (GstVideoDecoder * bdec, GstVideoCodecFrame * frame)
 
   gst_video_frame_unmap (&vframe);
 
-  if (setjmp (dec->jerr.setjmp_buffer)) {
-    code = dec->jerr.pub.msg_code;
+  if (setjmp (job->jerr.setjmp_buffer)) {
+    code = job->jerr.pub.msg_code;
     goto decode_error;
   }
 
   GST_LOG_OBJECT (dec, "decompressing finished");
-  jpeg_finish_decompress (&dec->cinfo);
+  jpeg_finish_decompress (&job->cinfo);
 
-  gst_buffer_unmap (frame->input_buffer, &dec->current_frame_map);
+  gst_buffer_unmap (frame->input_buffer, &job->current_frame_map);
   ret = gst_video_decoder_finish_frame (bdec, frame);
   release_frame = FALSE;
   need_unmap = FALSE;
@@ -1157,7 +1315,7 @@ done:
 exit:
 
   if (need_unmap)
-    gst_buffer_unmap (frame->input_buffer, &dec->current_frame_map);
+    gst_buffer_unmap (frame->input_buffer, &job->current_frame_map);
 
   if (release_frame)
     gst_video_decoder_release_frame (bdec, frame);
@@ -1165,12 +1323,12 @@ exit:
   if (state)
     gst_video_codec_state_unref (state);
 
-  return ret;
+  return (ret == GST_FLOW_OK);
 
   /* special cases */
 need_more_data:
   {
-    GST_LOG_OBJECT (dec, "we need more data");
+    GST_LOG_OBJECT (job->jsrc.dec, "we need more data");
     ret = GST_FLOW_OK;
     goto exit;
   }
@@ -1187,24 +1345,24 @@ decode_error:
   {
     gchar err_msg[JMSG_LENGTH_MAX];
 
-    dec->jerr.pub.format_message ((j_common_ptr) (&dec->cinfo), err_msg);
+    job->jerr.pub.format_message ((j_common_ptr) (&job->cinfo), err_msg);
 
     GST_VIDEO_DECODER_ERROR (dec, 1, STREAM, DECODE,
         (_("Failed to decode JPEG image")), ("Decode error #%u: %s", code,
             err_msg), ret);
 
-    gst_buffer_unmap (frame->input_buffer, &dec->current_frame_map);
+    gst_buffer_unmap (frame->input_buffer, &job->current_frame_map);
     gst_video_decoder_drop_frame (bdec, frame);
     release_frame = FALSE;
     need_unmap = FALSE;
-    jpeg_abort_decompress (&dec->cinfo);
+    jpeg_abort_decompress (&job->cinfo);
 
     goto done;
   }
 decode_direct_failed:
   {
     /* already posted an error message */
-    jpeg_abort_decompress (&dec->cinfo);
+    jpeg_abort_decompress (&job->cinfo);
     goto done;
   }
 alloc_failed:
@@ -1213,15 +1371,16 @@ alloc_failed:
 
     reason = gst_flow_get_name (ret);
 
-    GST_DEBUG_OBJECT (dec, "failed to alloc buffer, reason %s", reason);
+    GST_DEBUG_OBJECT (job->jsrc.dec, "failed to alloc buffer, reason %s",
+        reason);
     /* Reset for next time */
-    jpeg_abort_decompress (&dec->cinfo);
+    jpeg_abort_decompress (&job->cinfo);
     if (ret != GST_FLOW_EOS && ret != GST_FLOW_FLUSHING &&
         ret != GST_FLOW_NOT_LINKED) {
-      GST_VIDEO_DECODER_ERROR (dec, 1, STREAM, DECODE,
+      GST_VIDEO_DECODER_ERROR (job->jsrc.dec, 1, STREAM, DECODE,
           (_("Failed to decode JPEG image")),
           ("Buffer allocation failed, reason: %s", reason), ret);
-      jpeg_abort_decompress (&dec->cinfo);
+      jpeg_abort_decompress (&job->cinfo);
     }
     goto exit;
   }
@@ -1230,81 +1389,464 @@ components_not_supported:
     GST_VIDEO_DECODER_ERROR (dec, 1, STREAM, DECODE,
         (_("Failed to decode JPEG image")),
         ("number of components not supported: %d (max 3)",
-            dec->cinfo.num_components), ret);
-    jpeg_abort_decompress (&dec->cinfo);
+            job->cinfo.num_components), ret);
+    jpeg_abort_decompress (&job->cinfo);
     goto done;
   }
 unsupported_colorspace:
   {
-    GST_VIDEO_DECODER_ERROR (dec, 1, STREAM, DECODE,
+    GST_VIDEO_DECODER_ERROR (job->jsrc.dec, 1, STREAM, DECODE,
         (_("Failed to decode JPEG image")),
         ("Picture has unknown or unsupported colourspace"), ret);
-    jpeg_abort_decompress (&dec->cinfo);
+    jpeg_abort_decompress (&job->cinfo);
     goto done;
   }
 invalid_yuvrgbgrayscale:
   {
-    GST_VIDEO_DECODER_ERROR (dec, 1, STREAM, DECODE,
+    GST_VIDEO_DECODER_ERROR (job->jsrc.dec, 1, STREAM, DECODE,
         (_("Failed to decode JPEG image")),
         ("Picture is corrupt or unhandled YUV/RGB/grayscale layout"), ret);
-    jpeg_abort_decompress (&dec->cinfo);
+    jpeg_abort_decompress (&job->cinfo);
     goto done;
   }
 }
+#endif
 
-static gboolean
-gst_jpeg_dec_decide_allocation (GstVideoDecoder * bdec, GstQuery * query)
+
+
+/// I really hadn't wanted to rewrite this routine as
+/// 
+/// 1) It was a mess, and therefore a lot of work, and
+/// 2) It will probably invalidate the patches that Android makes to this file.
+///
+/// But, I am getting crashes inside the old version, probably due to the new
+/// environment in which it is being called, but I can't make heads or tails
+/// of what this code is doing as it now stands, so it had to be rewritten.
+///
+/// NOTE: There are three ways to dispose of a frame that is being processed,
+/// and EXACTLY ONE must be performed on the frame attached to each job:
+///
+/// 1) gst_video_decoder_finish_frame - Frame has a valid decoded data buffer,
+///    including any relevant metadata. Sends the frame downstream for more
+///    processing.
+///
+/// 2) gst_video_decoder_release_frame - There is something wrong with the
+///    frame and it should be freed and NOT sent downstream.
+///
+/// 3) gst_video_decoder_drop_frame - This is like release_frame except that a
+///    QoS (Quality of Service) message is sent upstream. Use this if a frame
+///    takes too long to decode, or arrives after its presentation or decode
+///    times. This lets upstream adjust things to try and maintain sync.
+///
+///
+/// NOTE: This routine has a somewhat unusual structure. Normally I would
+/// write something like this as a nested series of setup/teardown
+/// instructions and would handle errors at the innermost section they happen
+/// in, but the official jpeg API has an error callback you aren't allowed to
+/// return from. The only thing you can do is do a longjmp to some previously
+/// set point. So, we start by doing a setjmp, and jpeg errors from anywhere
+/// inside the nested parts can take us back to the outermost scope. So, we do
+/// our teardown at the end based on variables saying what needs to be done,
+/// and try to keep those variables up-to-date as we process the image. This
+/// is somewhat error-prone, but its the best I can think of given the
+/// limitations.
+
+static gboolean gst_jpeg_dec_process_frame
+    (void *pool_data, void *job_data, GError ** err)
 {
-  GstBufferPool *pool = NULL;
-  GstStructure *config;
+  GstVideoFrame vframe;
+  GstJpegDec *dec = pool_data;
+  GstJpegDecJob *job = job_data;
+  GstVideoCodecFrame *frame = job->frame;
+  GstFlowReturn flow = GST_FLOW_ERROR;
+  FrameStatus fsts = FRAMESTATUS_BAD;
+  JpegStatus jsts = JPEGSTATUS_NONE;
+  gboolean need_unmap = FALSE;
+  gboolean unmap_frame = FALSE;
+  GstVideoCodecState *state = NULL;
+  GstVideoFormat format;
 
-  if (!GST_VIDEO_DECODER_CLASS (parent_class)->decide_allocation (bdec, query))
-    return FALSE;
+  g_return_val_if_fail (dec != NULL, FALSE);
+  g_return_val_if_fail (job != NULL, FALSE);
+  g_return_val_if_fail (frame != NULL, FALSE);
+
+  if (!gst_buffer_map
+      (frame->input_buffer, &job->current_frame_map, GST_MAP_READ)
+      )
+    // Count this and try to decide if its a transient glitch, or
+    // a serious error. Set flow and issue a log message accordingly.
+    GST_VIDEO_DECODER_ERROR
+        (dec, 1, STREAM, DECODE, (_("Failed to decode JPEG image"))
+        , ("Couldn't Map input buffer for Reading")
+        , flow);
+  else {
+    need_unmap = TRUE;
+
+    job->cinfo.src->next_input_byte = job->current_frame_map.data;
+    job->cinfo.src->bytes_in_buffer = job->current_frame_map.size;
+
+    // Reminder: setjmp returns 0 (FALSE) when just storing the return
+    // context, and returns non-zero (TRUE) when restoring the context
+    // from a longjmp call.
+
+    if (setjmp (job->jerr.setjmp_buffer)) {
+      gchar err_msg[JMSG_LENGTH_MAX];
+      guint code = job->jerr.pub.msg_code;
+
+      // ERROR BRANCH. Something in the 'else' branch below triggered an
+      // error in libjpeg-turbo and our error callback executed a
+      // longjmp to here.
+
+      if (code == JERR_INPUT_EOF)
+        GST_ERROR ("Internal Error - Tried to process a partial frame.");
+
+      // Generate a JPEG Error to report.
+      job->jerr.pub.format_message ((j_common_ptr) (&job->cinfo)
+          , err_msg);
+
+      // Count this and try to decide if its a transient glitch, or
+      // a serious error. Set flow and issue a log message accordingly.
+      GST_VIDEO_DECODER_ERROR
+          (dec, 1, STREAM, DECODE, (_("Failed to decode JPEG image"))
+          , ("Decode error #%u: %s", code, err_msg)
+          , flow);
+
+      fsts = FRAMESTATUS_BAD;
+      jsts = JPEGSTATUS_ABORT;
+    } else {
+      // PROCESSING BRANCH - We've set a return point above, and will
+      // now make a bunch of libjpeg-turbo calls. If any of them go
+      // wrong, then they will longjmp back up to the previous setjmp
+      // command.
+
+      /* read header */
+      guint hdr_ok = jpeg_read_header (&job->cinfo, TRUE);
+
+      if (G_UNLIKELY (hdr_ok != JPEG_HEADER_OK))
+        GST_WARNING_OBJECT (dec, "reading the header failed, %d", hdr_ok);
+      else {
+        J_COLOR_SPACE jcolor = job->cinfo.jpeg_color_space;
+        gint ncomp = job->cinfo.num_components;
+        jpeg_component_info *jinfo = job->cinfo.comp_info;
+        gint m_h = job->cinfo.max_h_samp_factor;
+        gint r_h = jinfo[0].h_samp_factor;
+        gint r_v = jinfo[0].v_samp_factor;
+
+        GST_LOG_OBJECT
+            (dec, "num_components=%d, jpeg_color_space=%d, "
+            "r_h = %d, r_v = %d", ncomp, jcolor, r_h, r_v);
+
+        /* prepare for raw output */
+        job->cinfo.do_fancy_upsampling = FALSE;
+        job->cinfo.do_block_smoothing = FALSE;
+        job->cinfo.out_color_space = jcolor;
+        job->cinfo.dct_method = dec->idct_method;
+        job->cinfo.raw_data_out = TRUE;
+
+        GST_LOG_OBJECT (dec, "starting decompress");
+        guarantee_huff_tables (&job->cinfo);
+        if (!jpeg_start_decompress (&job->cinfo))
+          GST_WARNING_OBJECT (dec, "failed to start decompression");
+        else {
+          gint width = job->cinfo.output_width;
+          gint height = job->cinfo.output_height;
+          gboolean valid = TRUE;
 
-  if (gst_query_get_n_allocation_pools (query) > 0)
-    gst_query_parse_nth_allocation_pool (query, 0, &pool, NULL, NULL, NULL);
+#ifndef GST_DISABLE_GST_DEBUG
+          for (gint i = 0; i < ncomp; ++i)
+            GST_LOG_OBJECT
+                (dec, "[%d] h_samp_factor=%d, v_samp_factor=%d, cid=%d", i,
+                jinfo[i].h_samp_factor, jinfo[i].v_samp_factor,
+                jinfo[i].component_id);
+#endif
 
-  if (pool == NULL)
-    return FALSE;
+          /* We now perform a bunch of tests to ensure everything is
+             good and decodable, to avoid going *boom* or having
+             bogus output
+           */
+          switch (jcolor) {
+            case JCS_GRAYSCALE:
+              format = GST_VIDEO_FORMAT_GRAY8;
+              if (ncomp != 1)
+                valid = FALSE;
+              break;
+            case JCS_RGB:
+              format = GST_VIDEO_FORMAT_RGB;
+              if (ncomp != 3
+                  || job->cinfo.max_v_samp_factor > 1
+                  || job->cinfo.max_h_samp_factor > 1)
+                valid = FALSE;
+              break;
+            case JCS_YCbCr:
+              format = GST_VIDEO_FORMAT_I420;
+              if (ncomp != 3
+                  || r_v > 2
+                  || r_v < jinfo[1].v_samp_factor
+                  || r_h < jinfo[1].h_samp_factor
+                  || r_v < jinfo[0].v_samp_factor
+                  || r_h < jinfo[0].h_samp_factor)
+                valid = FALSE;
+              break;
+            default:
+              valid = FALSE;
+              break;
+          }
 
-  config = gst_buffer_pool_get_config (pool);
-  if (gst_query_find_allocation_meta (query, GST_VIDEO_META_API_TYPE, NULL)) {
-    gst_buffer_pool_config_add_option (config,
-        GST_BUFFER_POOL_OPTION_VIDEO_META);
+          if (!valid)
+            GST_VIDEO_DECODER_ERROR
+                (dec, 1, STREAM, DECODE, (_("Failed to decode JPEG image"))
+                , ("Picture is either corrupt or has an "
+                    "unhandled colorspace or layout")
+                , flow);
+          else if
+              (G_UNLIKELY
+              (width < MIN_WIDTH || width > MAX_WIDTH
+                  || height < MIN_HEIGHT || height > MAX_HEIGHT)
+              ) {
+            GST_VIDEO_DECODER_ERROR
+                (dec, 1, STREAM, DECODE, (_("Failed to decode JPEG image"))
+                , ("Picture size is outside bounds: (%ux%u)", width, height)
+                , flow);
+            flow = GST_FLOW_ERROR;      // bad size will ALWAYS be fatal
+          } else {
+            jsts = JPEGSTATUS_ABORT;    // what to do on error
+
+            //if upstream element src caps does not have width/height, then recalculate it here
+            //if input width & height is changable, need to re-negotiate
+            if (!dec->have_negotiated
+                || (dec->have_negotiated
+                    && (dec->output_state->info.width != width
+                        || dec->output_state->info.height != height
+                        || GST_VIDEO_INFO_FORMAT (&dec->output_state->info) !=
+                        format))) {
+              g_mutex_lock (&dec->jobmut);
+              gst_jpeg_dec_negotiate (dec, width, height, jcolor);
+              if (frame->output_buffer) {
+                gst_buffer_unref (frame->output_buffer);
+                frame->output_buffer = NULL;
+              }
+              gst_video_decoder_allocate_output_frame (GST_VIDEO_DECODER
+                  (dec), frame);
+              g_mutex_unlock (&dec->jobmut);
+            }
+
+            state = dec->output_state;
+
+            if (G_UNLIKELY ( /*flow != GST_FLOW_OK || */ !gst_video_frame_map
+                    (&vframe, &state->info, frame->output_buffer,
+                        GST_MAP_READWRITE)
+                )
+                ) {
+              const gchar *reason = gst_flow_get_name (flow);
+
+              GST_DEBUG_OBJECT
+                  (dec, "failed to alloc and map buffer, reason %s", reason);
+
+              // transient error, report, otherwise don't bother.
+              if (flow != GST_FLOW_EOS
+                  && flow != GST_FLOW_FLUSHING && flow != GST_FLOW_NOT_LINKED)
+                GST_VIDEO_DECODER_ERROR
+                    (dec, 1, STREAM, DECODE, (_("Failed to decode JPEG image"))
+                    , ("Buffer allocation failed, reason: %s", reason)
+                    , flow);
+            } else {
+              unmap_frame = TRUE;
+              fsts = FRAMESTATUS_GOOD;  // default assumption
+              jsts = JPEGSTATUS_GOOD;   // looking good so far.
+
+              GST_LOG_OBJECT (dec, "width %d, height %d", width, height);
+
+              if (jcolor == JCS_RGB)
+                gst_jpeg_dec_decode_rgb (job, &vframe);
+              else if (jcolor == JCS_GRAYSCALE)
+                gst_jpeg_dec_decode_grayscale (job, &vframe);
+              else {
+                GST_LOG_OBJECT
+                    (dec, "decompressing (reqired scanline buffer "
+                    "height = %u)", job->cinfo.rec_outbuf_height);
+
+                /* For some widths jpeglib requires more
+                 * horizontal padding than I420 provides. In
+                 * those cases we need to decode into separate
+                 * buffers and then copy over the data into
+                 * our final picture buffer, otherwise jpeglib
+                 * might write over the end of a line into the
+                 * beginning of the next line, resulting in
+                 * blocky artifacts on the left side of the
+                 * picture.
+                 */
+                if (G_UNLIKELY
+                    (width % (m_h * DCTSIZE) != 0
+                        || jinfo[0].h_samp_factor != 2
+                        || jinfo[1].h_samp_factor != 1
+                        || jinfo[2].h_samp_factor != 1)
+                    ) {
+                  GST_CAT_LOG_OBJECT
+                      (GST_CAT_PERFORMANCE, dec, "indirect decoding using "
+                      "extra buffer copy");
+                  gst_jpeg_dec_decode_indirect (job, &vframe, r_v, r_h, ncomp);
+                } else {
+                  flow = gst_jpeg_dec_decode_direct (job, &vframe);
+
+                  if (G_UNLIKELY (flow != GST_FLOW_OK)) {
+                    jsts = JPEGSTATUS_ABORT;
+                    fsts = FRAMESTATUS_BAD;
+                  }
+                }
+              }
+            }
+          }
+        }
+      }
+    }
   }
-  gst_buffer_pool_set_config (pool, config);
-  gst_object_unref (pool);
 
-  return TRUE;
+  if (unmap_frame)
+    gst_video_frame_unmap (&vframe);
+  if (jsts == JPEGSTATUS_ABORT) {
+    GST_LOG_OBJECT (dec, "aborting decompression");
+    jpeg_abort_decompress (&job->cinfo);
+  } else if (jsts == JPEGSTATUS_GOOD) {
+    GST_LOG_OBJECT (dec, "decompressing finished");
+    jpeg_finish_decompress (&job->cinfo);
+  }
+
+  if (need_unmap)
+    gst_buffer_unmap (frame->input_buffer, &job->current_frame_map);
+
+  //For the first frame, will force to process in non-multithreaded mode
+  if (dec->current_frame_num == FIRST_FRAME) {
+    switch (fsts) {
+      case FRAMESTATUS_GOOD:
+        flow = gst_video_decoder_finish_frame (GST_VIDEO_DECODER (dec), frame);
+        break;
+      case FRAMESTATUS_LATE:
+        flow = gst_video_decoder_drop_frame (GST_VIDEO_DECODER (dec), frame);
+        break;
+      default:
+      case FRAMESTATUS_BAD:
+        gst_video_decoder_release_frame (GST_VIDEO_DECODER (dec), frame);
+        break;
+    }
+    job->frame = NULL;
+    gst_jpeg_dec_job_free (job);
+  } else {
+    // fsts is the only field in jobs we need to protect with a lock, as its
+    // how we indicate a job has finished.
+    g_mutex_lock (&dec->jobmut);
+    job->fsts = fsts;
+    g_cond_broadcast (&dec->jobcond);
+    g_mutex_unlock (&dec->jobmut);
+  }
+  return (flow == GST_FLOW_OK || flow == GST_FLOW_EOS);
 }
 
-static gboolean
-gst_jpeg_dec_sink_event (GstVideoDecoder * bdec, GstEvent * event)
+// When we are called by GstVideoDecoder, its holding a recursive stream lock
+// and the three frame output routines (finish_frame, release_frame, and
+// drop_frame) all try to acquire the same lock. Thus we can't just submit a
+// job to a work queue and have it dispose of the frame when done, because if
+// we end up waiting on there being room in the queue, we'll deadlock. Instead
+// the worker threads set a disposal status in the jobs when they finish, and
+// its up to US to make room in the queue by processing as many finished jobs
+// as are done. Plus, if the queue is full, we have to wait on a job to
+// finish, process it, and THEN submit into the work queue. This should not
+// deadlock.
+
+static GstFlowReturn gst_jpeg_dec_handle_frame
+    (GstVideoDecoder * bdec, GstVideoCodecFrame * frame)
 {
-  const GstSegment *segment;
+  GstJpegDec *dec = (GstJpegDec *) bdec;
+  GstFlowReturn flow = GST_FLOW_OK;
 
-  if (GST_EVENT_TYPE (event) != GST_EVENT_SEGMENT)
-    goto done;
+  g_return_val_if_fail (frame != NULL, GST_FLOW_OK);
+  GST_DEBUG_OBJECT (bdec, "handle_frame");
 
-  gst_event_parse_segment (event, &segment);
+  if (dec->current_frame_num <= FIRST_FRAME)
+    dec->current_frame_num++;
 
-  if (segment->format == GST_FORMAT_TIME)
-    gst_video_decoder_set_packetized (bdec, TRUE);
-  else
-    gst_video_decoder_set_packetized (bdec, FALSE);
+  g_mutex_lock (&dec->jobmut);
+  if (dec->have_negotiated)
+    flow = gst_video_decoder_allocate_output_frame (bdec, frame);
 
-done:
+  if (flow == GST_FLOW_OK) {
+    GstJpegDecJob *job = NULL;
+
+    // First we ensure there is room in the input queue, by processing any
+    // finished frames, taking care to output them in the order submitted.
+
+    while (flow == GST_FLOW_OK && dec->jobcnt > 0) {
+      GList *link = g_list_first (dec->jobs);
+
+      job = link->data;
+
+      while (dec->jobcnt >= calc_threads (dec, dec->num_cores)
+          && job->fsts == FRAMESTATUS_NONE)
+        g_cond_wait (&dec->jobcond, &dec->jobmut);
+
+      if (job->fsts != FRAMESTATUS_NONE) {
+        dec->jobs = g_list_delete_link (dec->jobs, link);
+        dec->jobcnt--;
+        if (!gst_jpeg_dec_job_done (job))       // outputs frames for us
+          flow = GST_FLOW_ERROR;
+        gst_jpeg_dec_job_free (job);
+      } else
+        break;
+    }
+
+    // At this point, we are guaranteed that there is at least one unused
+    // thread in the thread pool and all finished jobs have been processed
+    // up to the first one with an error. At this point we we can safely
+    // submit a new job.
+    // For the frist frame, do it using sync mode. 
+    job = gst_jpeg_dec_job_new (dec);
+    if (job) {
+      job->frame = frame;
+      if (dec->current_frame_num == FIRST_FRAME) {
+        g_mutex_unlock (&dec->jobmut);
+        if (!gst_jpeg_dec_process_frame (dec, job, NULL))
+          flow = GST_FLOW_ERROR;
+        return flow;
+      } else {
+        dec->jobs = g_list_append (dec->jobs, job);
+        dec->jobcnt++;
+        g_cond_broadcast (&dec->jobcond);
+
+        workpool_submit (dec->pool, gst_jpeg_dec_process_frame, job, NULL,
+            NULL);
+      }
+    }
+  }
+  g_mutex_unlock (&dec->jobmut);
+  return flow;
+}
+
+#if 0
+static gboolean gst_jpeg_dec_sink_event
+    (GstVideoDecoder * bdec, GstEvent * event)
+{
+  if (GST_EVENT_TYPE (event) == GST_EVENT_SEGMENT) {
+    GstSegment const *segment;
+
+    gst_event_parse_segment (event, &segment);
+
+    if (segment->format == GST_FORMAT_TIME)
+      gst_video_decoder_set_packetized (bdec, TRUE);
+    else
+      gst_video_decoder_set_packetized (bdec, FALSE);
+  }
   return GST_VIDEO_DECODER_CLASS (parent_class)->sink_event (bdec, event);
 }
+#endif
 
 static gboolean
 gst_jpeg_dec_start (GstVideoDecoder * bdec)
 {
   GstJpegDec *dec = (GstJpegDec *) bdec;
-
+  GST_DEBUG_OBJECT (dec, "start");
   dec->saw_header = FALSE;
   dec->parse_entropy_len = 0;
   dec->parse_resync = FALSE;
+  dec->have_negotiated = FALSE;
 
   gst_video_decoder_set_packetized (bdec, FALSE);
 
@@ -1315,8 +1857,7 @@ static gboolean
 gst_jpeg_dec_flush (GstVideoDecoder * bdec)
 {
   GstJpegDec *dec = (GstJpegDec *) bdec;
-
-  jpeg_abort_decompress (&dec->cinfo);
+  GST_DEBUG_OBJECT (dec, "flush");
   dec->parse_entropy_len = 0;
   dec->parse_resync = FALSE;
   dec->saw_header = FALSE;
@@ -1324,6 +1865,57 @@ gst_jpeg_dec_flush (GstVideoDecoder * bdec)
   return TRUE;
 }
 
+static gboolean
+gst_jpeg_dec_do_drain (GstVideoDecoder * bdec)
+{
+  GstJpegDec *dec = (GstJpegDec *) bdec;
+  GstFlowReturn flow = GST_FLOW_OK;
+
+  if (dec->jobs) {
+    g_mutex_lock (&dec->jobmut);
+    while (flow == GST_FLOW_OK && dec->jobcnt > 0) {
+      GList *link = g_list_first (dec->jobs);
+      GstJpegDecJob *job = link->data;
+
+      while (job->fsts == FRAMESTATUS_NONE)
+        g_cond_wait (&dec->jobcond, &dec->jobmut);
+
+      if (job->fsts != FRAMESTATUS_NONE) {
+        dec->jobs = g_list_delete_link (dec->jobs, link);
+        dec->jobcnt--;
+        if (!gst_jpeg_dec_job_done (job))       // outputs frames for us
+          flow = GST_FLOW_ERROR;
+        gst_jpeg_dec_job_free (job);
+      } else
+        break;
+    }
+    if (dec->pool)
+      workpool_empty (dec->pool);
+    g_list_free (dec->jobs);
+    dec->jobs = NULL;
+    g_mutex_unlock (&dec->jobmut);
+  }
+  return TRUE;
+}
+
+static gboolean
+gst_jpeg_dec_drain (GstVideoDecoder * bdec)
+{
+  GstJpegDec *dec = (GstJpegDec *) bdec;
+
+  GST_DEBUG_OBJECT (dec, "drain");
+  return gst_jpeg_dec_do_drain (bdec);
+}
+
+static gboolean
+gst_jpeg_dec_finish (GstVideoDecoder * bdec)
+{
+  GstJpegDec *dec = (GstJpegDec *) bdec;
+
+  GST_DEBUG_OBJECT (dec, "finish");
+  return gst_jpeg_dec_do_drain (bdec);  // at some point we may want to do more.
+}
+
 static void
 gst_jpeg_dec_set_property (GObject * object, guint prop_id,
     const GValue * value, GParamSpec * pspec)
@@ -1341,6 +1933,13 @@ gst_jpeg_dec_set_property (GObject * object, guint prop_id,
       g_atomic_int_set (&dec->max_errors, g_value_get_int (value));
       break;
 #endif
+    case PROP_NUM_CORES:
+      dec->num_cores = g_value_get_int (value);
+      if (dec->pool)
+        workpool_set_threads (dec->pool, calc_threads (dec, dec->num_cores)
+            , NULL);
+      break;
+
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -1364,18 +1963,336 @@ gst_jpeg_dec_get_property (GObject * object, guint prop_id, GValue * value,
       g_value_set_int (value, g_atomic_int_get (&dec->max_errors));
       break;
 #endif
+    case PROP_NUM_CORES:
+      g_value_set_int (value, dec->num_cores);
+      break;
+
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
   }
 }
 
-static gboolean
-gst_jpeg_dec_stop (GstVideoDecoder * bdec)
+static void
+gst_jpeg_dec_finalize (GObject * object)
 {
-  GstJpegDec *dec = (GstJpegDec *) bdec;
+  GstJpegDec *dec = GST_JPEG_DEC (object);
+  GST_DEBUG_OBJECT (dec, "finalize");
 
-  gst_jpeg_dec_free_buffers (dec);
+  if (dec->jobs)
+    g_list_free_full (dec->jobs, gst_jpeg_dec_job_destroy);
 
-  return TRUE;
+  if (dec->pool)
+    workpool_free (dec->pool);
+
+  if (dec->input_state)
+    gst_video_codec_state_unref (dec->input_state);
+  if (dec->output_state)
+    gst_video_codec_state_unref (dec->output_state);
+
+  g_mutex_clear (&dec->jobmut);
+  G_OBJECT_CLASS (parent_class)->finalize (object);
+}
+
+/// gst_jpeg_dec_class_init - Initialize GstVideoDecoder::GstJpegDec
+//!
+/// The GstVideoDecoder base class is for video decoders turning encoded data
+/// into raw video frames.
+///
+/// The GstVideoDecoder base class and derived subclasses should cooperate as
+/// follows:
+///
+/// Configuration
+/// -------------
+///
+/// Initially, GstVideoDecoder calls start() when the decoder element is
+/// activated, which allows the subclass to perform any global setup.
+///
+/// GstVideoDecoder calls set_format() to inform the subclass of caps
+/// describing input video data that it is about to receive, including possibly
+/// configuration data. While unlikely, it might be called more than once, if
+/// changing input parameters require reconfiguration.
+///
+/// Incoming data buffers are processed as needed, as described in Data
+/// Processing below.
+///
+/// GstVideoDecoder calls stop() at end of all processing.
+///
+/// Data processing
+/// ---------------
+///
+/// The base class gathers input data, and optionally allows the subclass to
+/// parse this into subsequently manageable chunks, typically corresponding to
+/// and referred to as 'frames'.
+///
+/// Each input frame is provided in turn to the subclass' handle_frame()
+/// callback. The ownership of the frame is given to the handle_frame()
+/// callback.
+///
+/// If codec processing results in decoded data, the subclass should call
+/// gst_video_decoder_finish_frame() to have decoded data pushed downstream.
+/// Otherwise, the subclass must call either gst_video_decoder_release_frame()
+/// if there is something wrong with the frame itself (ie, corruption) or
+/// gst_video_decoder_drop_frame() if the frame was late or took too long to
+/// decode, etc. drop_frame works like releae_frame but allows the base class
+/// to do timestamp and offset tracking, and possibly to requeue the frame for
+/// a later attempt in the case of reverse playback.
+///
+/// NOTE: The base class will hold a recursive stream lock when it calls
+/// handle_frame, and will recursively lock the stream again when anyone calls
+/// finish_frame, release_frame, or drop_frame. This means that a subclass can
+/// easily deadlock if its multitasking, if it doesn't take care that the
+/// output frame routines are called by the same thread that called into it.
+///
+/// 
+/// Shutdown phase
+/// --------------
+///
+/// The GstVideoDecoder class calls stop() to inform the subclass that data
+/// parsing will be stopped.
+///
+/// Additional Notes
+/// ----------------
+///
+/// Seeking/Flushing
+///
+/// When the pipeline is seeked or otherwise flushed, the subclass is informed
+/// via a call to its reset() callback, with the hard parameter set to
+/// true. This indicates the subclass should drop any internal data queues and
+/// timestamps and prepare for a fresh set of buffers to arrive for parsing and
+/// decoding.
+///
+/// End Of Stream
+///
+/// At end-of-stream, the subclass parse() function may be called some final
+/// times with the at_eos parameter set to true, indicating that the element
+/// should not expect any more data to be arriving, and it should parse any
+/// remaining frames and call gst_video_decoder_have_frame() if possible.
+///
+/// Subclass Responsibilities
+/// -------------------------
+/// 
+/// The subclass is responsible for providing pad template caps for source and
+/// sink pads. The pads need to be named "sink" and "src". It also needs to
+/// provide information about the ouptput caps, when they are known. This may
+/// be when the base class calls the subclass' set_format() function, though it
+/// might be during decoding, before calling gst_video_decoder_finish_frame().
+/// This is done via gst_video_decoder_set_output_state().
+///
+/// The subclass is also responsible for providing (presentation) timestamps
+/// (likely based on corresponding input ones). If that is not applicable or
+/// possible, the base class provides limited framerate based interpolation.
+///
+/// Similarly, the base class provides some limited (legacy) seeking support if
+/// specifically requested by the subclass, as full-fledged support should
+/// rather be left to upstream demuxer, parser or alike. This simple approach
+/// caters for seeking and duration reporting using estimated input
+/// bitrates. To enable it, a subclass should call
+/// gst_video_decoder_set_estimate_rate() to enable handling of incoming
+/// byte-streams.
+///
+/// The base class provides some support for reverse playback, in particular in
+/// case incoming data is not packetized or upstream does not provide fragments
+/// on keyframe boundaries. However, the subclass should then be prepared for
+/// the parsing and frame processing stage to occur separately (in normal
+/// forward processing, the latter immediately follows the former), The
+/// subclass also needs to ensure the parsing stage properly marks keyframes,
+/// unless it knows the upstream elements will do so properly for incoming
+/// data.
+///
+/// Minimal Requirements
+/// --------------------
+///
+/// The bare minimum that a functional subclass needs to implement is:
+///
+/// Provide pad templates
+///
+/// Inform the base class of output caps via
+/// gst_video_decoder_set_output_state()
+///
+/// Parse input data, if it is not considered packetized from upstream Data
+/// will be provided to parse which should invoke
+/// gst_video_decoder_add_to_frame() and gst_video_decoder_have_frame() to
+/// separate the data belonging to each video frame.
+///
+/// Accept data in handle_frame() and provide decoded results to
+/// gst_video_decoder_finish_frame(), or call gst_video_decoder_drop_frame().
+///
+/// Settable Member Functions
+/// -------------------------
+///
+/// open() - Optional. Called when the element changes to
+///   GST_STATE_READY. Allows opening external resources.
+///
+/// close() - Optional. Called when the element changes to
+///   GST_STATE_NULL. Allows closing external resources.
+///
+/// start() - Optional. Called when the element starts processing. Allows
+///   opening external resources.
+///
+/// stop() - Optional. Called when the element stops processing. Allows closing
+///   external resources.
+///
+/// parse() - Required for non-packetized input. Allows chopping incoming data
+///   into manageable units (frames) for subsequent decoding.
+///
+/// set_format() - Notifies subclass of incoming data format (caps).
+///
+/// reset() - [DEPRECATED] Optional. Allows subclass (decoder) to perform
+///   post-seek semantics reset.
+///
+/// finish() - Optional. Called at EOS to dispatch any pending remaining
+///   data. Sub-classes are allowed to refuse to decode new data after having
+///   run finish().
+///
+/// flush() - Optional. Routine to purge all remaining data from the decoder
+///   without pushing it downstream. Called when changing position in a stream.
+///   Since: 1.2
+///
+/// drain() - Optional. Routine called to request subclass to decode any data
+///   it can at this point, but that more data may arrive after. (e.g. at
+///   segment end). Sub-classes should be prepared to handle new data
+///   afterward, or seamless segment processing will break.
+///   Since: 1.6
+///
+///  handle_frame() - Provides input data frame to subclass.
+///
+///  sink_event() - Optional. Event handler on the sink pad. This function
+///    should return TRUE if the event was handled and should be discarded
+///    (i.e. not unref'ed). Subclasses should chain up to the parent
+///    implementation to invoke the default handler.
+///
+///  src_event() - Optional. Event handler on the source pad. This function
+///    should return TRUE if the event was handled and should be discarded
+///    (i.e. not unref'ed). Subclasses should chain up to the parent
+///    implementation to invoke the default handler.
+///
+///  negotiate() - Optional. Negotiate with downstream and configure buffer
+///    pools, etc. Subclasses should chain up to the parent implementation to
+///    invoke the default handler.
+///
+///  decide_allocation() - Optional. Setup the allocation parameters for
+///    allocating output buffers. The passed in query contains the result of
+///    the downstream allocation query. Subclasses should chain up to the
+///    parent implementation to invoke the default handler.
+///
+///  propose_allocation() - Optional. Propose buffer allocation parameters for
+///    upstream elements. Subclasses should chain up to the parent
+///    implementation to invoke the default handler.
+///         
+///  sink_query() - Optional. Query handler on the sink pad. This function
+///    should return TRUE if the query could be performed. Subclasses should
+///    chain up to the parent implementation to invoke the default
+///    handler.
+///    Since 1.4
+///
+///  src_query() - Optional. Query handler on the source pad. This function
+///    should return TRUE if the query could be performed. Subclasses should
+///    chain up to the parent implementation to invoke the default
+///    handler.
+///    Since 1.4
+///
+///  getcaps() - Optional. Allows for a custom sink getcaps implementation. If
+///    not implemented, default returns gst_video_decoder_proxy_getcaps applied
+///    to sink template caps.
+///
+///  transform_meta() - Optional. Transform the metadata on the input buffer to
+///    the output buffer. By default this method copies all meta without tags
+///    and meta with only the "video" tag. subclasses can implement this method
+///    and return TRUE if the metadata is to be copied.
+///    Since 1.6
+///
+///  
+
+static void
+gst_jpeg_dec_class_init (GstJpegDecClass * klass)
+{
+  GObjectClass *gobject_class;
+  GstElementClass *element_class;
+  GstVideoDecoderClass *vdec_class;
+
+  gobject_class = (GObjectClass *) klass;
+  element_class = (GstElementClass *) klass;
+  vdec_class = (GstVideoDecoderClass *) klass;
+
+  gst_jpeg_dec_parent_class = g_type_class_peek_parent (klass);
+
+  gobject_class->finalize = gst_jpeg_dec_finalize;
+  gobject_class->set_property = gst_jpeg_dec_set_property;
+  gobject_class->get_property = gst_jpeg_dec_get_property;
+
+  g_object_class_install_property (gobject_class, PROP_IDCT_METHOD,
+      g_param_spec_enum ("idct-method", "IDCT Method",
+          "The IDCT algorithm to use", GST_TYPE_IDCT_METHOD,
+          JPEG_DEFAULT_IDCT_METHOD,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+
+  g_object_class_install_property (gobject_class, PROP_NUM_CORES,
+      g_param_spec_int ("num-cores", "Number of Processor Cores",
+          "How many Cores to dedicate to decoding",
+          1, G_MAXINT, JPEG_DEFAULT_NUM_CORES,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+
+  /**
+   * GstJpegDec:max-errors:
+   *
+   * Error out after receiving N consecutive decoding errors
+   * (-1 = never error out, 0 = automatic, 1 = fail on first error, etc.)
+   *
+   * Deprecated: 1.3.1: Property wasn't used internally
+   */
+#ifndef GST_REMOVE_DEPRECATED
+  g_object_class_install_property (gobject_class, PROP_MAX_ERRORS,
+      g_param_spec_int ("max-errors", "Maximum Consecutive Decoding Errors",
+          "(Deprecated) Error out after receiving N consecutive decoding errors"
+          " (-1 = never fail, 0 = automatic, 1 = fail on first error)",
+          -1, G_MAXINT, JPEG_DEFAULT_MAX_ERRORS,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS | G_PARAM_DEPRECATED));
+#endif
+
+  gst_element_class_add_static_pad_template (element_class,
+      &gst_jpeg_dec_src_pad_template);
+  gst_element_class_add_static_pad_template (element_class,
+      &gst_jpeg_dec_sink_pad_template);
+  gst_element_class_set_static_metadata (element_class, "JPEG image decoder",
+      "Codec/Decoder/Image", "Decode images from JPEG format",
+      "Wim Taymans <wim@fluendo.com>");
+
+  vdec_class->start = gst_jpeg_dec_start;
+  vdec_class->flush = gst_jpeg_dec_flush;
+  vdec_class->drain = gst_jpeg_dec_drain;
+  vdec_class->finish = gst_jpeg_dec_finish;
+  vdec_class->parse = gst_jpeg_dec_parse;
+  vdec_class->set_format = gst_jpeg_dec_set_format;
+  vdec_class->handle_frame = gst_jpeg_dec_handle_frame;
+  vdec_class->decide_allocation = gst_jpeg_dec_decide_allocation;
+  //vdec_class->sink_event = gst_jpeg_dec_sink_event;
+  //vdec_class->negotiate = gst_jpeg_dec_negotiate;
+
+  GST_DEBUG_CATEGORY_INIT (jpeg_dec_debug, "jpegdec", 0, "JPEG decoder");
+  GST_DEBUG_CATEGORY_GET (GST_CAT_PERFORMANCE, "GST_PERFORMANCE");
+}
+
+static void
+gst_jpeg_dec_init (GstJpegDec * dec)
+{
+  GST_DEBUG ("initializing");
+
+  dec->have_negotiated = FALSE;
+  dec->current_frame_num = 0;
+  /* init processing */
+  dec->pool = workpool_new (JPEG_DEFAULT_NUM_CORES, dec, NULL);
+  dec->jobs = NULL;
+  dec->jobcnt = 0;
+  g_mutex_init (&dec->jobmut);
+  g_cond_init (&dec->jobcond);
+
+  /* init properties */
+  dec->idct_method = JPEG_DEFAULT_IDCT_METHOD;
+  dec->max_errors = JPEG_DEFAULT_MAX_ERRORS;
+  dec->num_cores = JPEG_DEFAULT_NUM_CORES;
+
+  gst_video_decoder_set_use_default_pad_acceptcaps (GST_VIDEO_DECODER_CAST
+      (dec), TRUE);
+  GST_PAD_SET_ACCEPT_TEMPLATE (GST_VIDEO_DECODER_SINK_PAD (dec));
 }
diff --git a/ext/jpeg/gstjpegdec.h b/ext/jpeg/gstjpegdec.h
index e8fa2fcbf..7f6ee4b67 100644
--- a/ext/jpeg/gstjpegdec.h
+++ b/ext/jpeg/gstjpegdec.h
@@ -1,7 +1,7 @@
 /* GStreamer
  * Copyright (C) <1999> Erik Walthinsen <omega@cse.ogi.edu>
  * Copyright (C) 2012 Collabora Ltd.
- *	Author : Edward Hervey <edward@collabora.com>
+ *      Author : Edward Hervey <edward@collabora.com>
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
@@ -32,13 +32,14 @@
 
 /* this is a hack hack hack to get around jpeglib header bugs... */
 #ifdef HAVE_STDLIB_H
-# undef HAVE_STDLIB_H
+#undef HAVE_STDLIB_H
 #endif
 #include <stdio.h>
 #include <jpeglib.h>
 
-G_BEGIN_DECLS
+#include "work.h"
 
+G_BEGIN_DECLS
 #define GST_TYPE_JPEG_DEC \
   (gst_jpeg_dec_get_type())
 #define GST_JPEG_DEC(obj) \
@@ -49,59 +50,85 @@ G_BEGIN_DECLS
   (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_JPEG_DEC))
 #define GST_IS_JPEG_DEC_CLASS(klass) \
   (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_JPEG_DEC))
-
-typedef struct _GstJpegDec           GstJpegDec;
-typedef struct _GstJpegDecClass      GstJpegDecClass;
-
-struct GstJpegDecErrorMgr {
-  struct jpeg_error_mgr    pub;   /* public fields */
-  jmp_buf                  setjmp_buffer;
+typedef struct _GstJpegDec GstJpegDec;
+typedef struct _GstJpegDecClass GstJpegDecClass;
+
+// Status of the Decode Frame
+typedef enum FrameStatus
+{ FRAMESTATUS_NONE              // No Status -- Decoding not finished
+      , FRAMESTATUS_GOOD        // Status Good - Send frame downstream
+      , FRAMESTATUS_BAD         // Status Bad - Release frame
+      , FRAMESTATUS_LATE        // Status Late - Drop frame
+}
+FrameStatus;
+
+struct GstJpegDecErrorMgr
+{
+  struct jpeg_error_mgr pub;    /* public fields */
+  jmp_buf setjmp_buffer;
 };
 
-struct GstJpegDecSourceMgr {
-  struct jpeg_source_mgr   pub;   /* public fields */
-  GstJpegDec              *dec;
+struct GstJpegDecSourceMgr
+{
+  struct jpeg_source_mgr pub;   /* public fields */
+  GstJpegDec *dec;
 };
 
+typedef struct GstJpegDecJob
+{
+  struct jpeg_decompress_struct cinfo;
+  struct GstJpegDecErrorMgr jerr;
+  struct GstJpegDecSourceMgr jsrc;
+
+  /* arrays for indirect decoding */
+  gint idr_width_allocated;
+  guchar *idr_y[16], *idr_u[16], *idr_v[16];
+  /* current (parsed) image size */
+  guint rem_img_len;
+  /* frame we are processing */
+  FrameStatus fsts;             // current status of the frame
+  GstVideoCodecFrame *frame;
+  GstMapInfo current_frame_map;
+} GstJpegDecJob;
+
+
 /* Can't use GstBaseTransform, because GstBaseTransform
  * doesn't handle the N buffers in, 1 buffer out case,
  * but only the 1-in 1-out case */
-struct _GstJpegDec {
+struct _GstJpegDec
+{
   GstVideoDecoder decoder;
 
   /* negotiated state */
   GstVideoCodecState *input_state;
-  GstVideoCodecFrame *current_frame;
-  GstMapInfo current_frame_map;
-
+  GstVideoCodecState *output_state;
+  gboolean have_negotiated;     //If negotiated is done before processing
+  guint current_frame_num;      //For single image pipeline
   /* parse state */
   gboolean saw_header;
-  gint     parse_entropy_len;
-  gint     parse_resync;
+  gint parse_entropy_len;
+  gint parse_resync;
 
-  /* properties */
-  gint     idct_method;
-  gint     max_errors;  /* ATOMIC */
-
-  struct jpeg_decompress_struct cinfo;
-  struct GstJpegDecErrorMgr     jerr;
-  struct GstJpegDecSourceMgr    jsrc;
+  /* processing state */
+  WorkPool *pool;               // pool of worker threads
+  GList *jobs;                  // list of active jobs
+  GMutex jobmut;                // Mutex protecting job list.
+  GCond jobcond;                // Condition to signal changes in the job list
+  guint jobcnt;                 // job count;
 
-  /* arrays for indirect decoding */
-  gboolean idr_width_allocated;
-  guchar *idr_y[16],*idr_u[16],*idr_v[16];
-  /* current (parsed) image size */
-  guint    rem_img_len;
+  /* properties */
+  gint num_cores;
+  gint idct_method;
+  gint max_errors;              /* ATOMIC */
 };
 
-struct _GstJpegDecClass {
+struct _GstJpegDecClass
+{
   GstVideoDecoderClass decoder_class;
 };
 
-GType gst_jpeg_dec_get_type(void);
+GType gst_jpeg_dec_get_type (void);
 
 
 G_END_DECLS
-
-
 #endif /* __GST_JPEG_DEC_H__ */
diff --git a/ext/jpeg/t1.sh b/ext/jpeg/t1.sh
new file mode 100755
index 000000000..cc873c195
--- /dev/null
+++ b/ext/jpeg/t1.sh
@@ -0,0 +1,14 @@
+#!/bin/bash
+
+TEST_DIR="$PWD/$(dirname $0)"
+SUPP_DIR="../../common"
+SUPP_GST=$SUPP_DIR/gst.supp
+SUPP_TEST=test.supp
+
+export G_SLICE=always-malloc
+
+echo "jpegdec run"
+
+gst-launch-1.0 -v --gst-plugin-path=. --gst-debug=WORKPOOL:6,jpegdec:6	 \
+    videotestsrc num-buffers=40 ! video/x-raw,width=1920,height=1080 ! \
+    queue ! jpegenc ! queue ! jpegdec ! fakesink sync=true
diff --git a/ext/jpeg/test.supp b/ext/jpeg/test.supp
new file mode 100644
index 000000000..87eb0aae8
--- /dev/null
+++ b/ext/jpeg/test.supp
@@ -0,0 +1,6468 @@
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_video_encoder_sink_event
+   fun:gst_pad_send_event_unchecked
+   fun:gst_pad_push_event_unchecked
+   fun:push_sticky
+   fun:events_foreach
+   fun:check_sticky
+   fun:gst_pad_push_event
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_quark_from_string
+   fun:gst_meta_api_type_register
+   fun:gst_video_meta_api_get_type
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_quark_from_string
+   fun:gst_meta_api_type_register
+   fun:gst_video_meta_api_get_type
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_quark_from_string
+   fun:gst_meta_api_type_register
+   fun:gst_video_meta_api_get_type
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_quark_from_string
+   fun:gst_meta_api_type_register
+   fun:gst_video_meta_api_get_type
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_quark_from_string
+   fun:gst_meta_api_type_register
+   fun:gst_video_meta_api_get_type
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_quark_from_string
+   fun:gst_meta_api_type_register
+   fun:gst_video_meta_api_get_type
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:g_array_get_type
+   fun:ensure_array
+   fun:gst_query_add_allocation_meta
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:g_array_get_type
+   fun:ensure_array
+   fun:gst_query_add_allocation_meta
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:g_array_get_type
+   fun:ensure_array
+   fun:gst_query_add_allocation_meta
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:g_array_get_type
+   fun:ensure_array
+   fun:gst_query_add_allocation_meta
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:g_array_get_type
+   fun:ensure_array
+   fun:gst_query_add_allocation_meta
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:g_array_get_type
+   fun:ensure_array
+   fun:gst_query_add_allocation_meta
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:ensure_debug_category
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_has_name
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_get_string
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:strcmp
+   fun:gst_video_format_from_string
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:strcmp
+   fun:gst_video_format_from_string
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_get_int
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_get_int
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_value_get_fraction_numerator
+   fun:gst_structure_get_fraction
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_value_get_fraction_denominator
+   fun:gst_structure_get_fraction
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_value_get_fraction_numerator
+   fun:gst_structure_get_fraction
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_value_get_fraction_denominator
+   fun:gst_structure_get_fraction
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_get_string
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_get_string
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_query_get_n_allocation_pools
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_query_get_n_allocation_pools
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_query_get_n_allocation_pools
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_id_get_field
+   fun:gst_structure_id_get_value
+   fun:ensure_array
+   fun:gst_query_add_allocation_param
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_id_get_field
+   fun:gst_structure_id_get_value
+   fun:ensure_array
+   fun:gst_query_add_allocation_param
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:gst_video_buffer_pool_get_type
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:gst_video_buffer_pool_get_type
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:gst_video_buffer_pool_get_type
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:gst_video_buffer_pool_get_type
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:gst_video_buffer_pool_get_type
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:gst_video_buffer_pool_get_type
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:_gst_debug_get_category_locked
+   fun:_gst_debug_category_new
+   fun:gst_video_buffer_pool_class_init
+   fun:gst_video_buffer_pool_class_intern_init
+   fun:type_class_init_Wm
+   fun:g_type_class_ref
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:_gst_debug_get_category_locked
+   fun:_gst_debug_category_new
+   fun:gst_video_buffer_pool_class_init
+   fun:gst_video_buffer_pool_class_intern_init
+   fun:type_class_init_Wm
+   fun:g_type_class_ref
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:_gst_debug_get_category_locked
+   fun:_gst_debug_category_new
+   fun:gst_video_buffer_pool_class_init
+   fun:gst_video_buffer_pool_class_intern_init
+   fun:type_class_init_Wm
+   fun:g_type_class_ref
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:_gst_debug_get_category_locked
+   fun:_gst_debug_category_new
+   fun:gst_video_buffer_pool_class_init
+   fun:gst_video_buffer_pool_class_intern_init
+   fun:type_class_init_Wm
+   fun:g_type_class_ref
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_check_value
+   fun:gst_value_is_fixed
+   fun:gst_structure_foreach
+   fun:gst_buffer_pool_config_set_params
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_check_value
+   fun:gst_value_is_fixed
+   fun:gst_structure_foreach
+   fun:gst_buffer_pool_config_set_params
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_mini_object_ref
+   fun:boxed_proxy_collect_value
+   fun:gst_structure_id_set_valist_internal
+   fun:gst_structure_id_set
+   fun:gst_buffer_pool_config_set_params
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:ensure_debug_category
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_has_name
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_get_string
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:strcmp
+   fun:gst_video_format_from_string
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:strcmp
+   fun:gst_video_format_from_string
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_get_int
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_get_int
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_value_get_fraction_numerator
+   fun:gst_structure_get_fraction
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_value_get_fraction_denominator
+   fun:gst_structure_get_fraction
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_value_get_fraction_numerator
+   fun:gst_structure_get_fraction
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_value_get_fraction_denominator
+   fun:gst_structure_get_fraction
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_get_string
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_get_string
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_id_get_field
+   fun:gst_structure_id_get_value
+   fun:ensure_array
+   fun:gst_query_add_allocation_pool
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_id_get_field
+   fun:gst_structure_id_get_value
+   fun:ensure_array
+   fun:gst_query_add_allocation_pool
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_id_get_field
+   fun:gst_structure_id_get_value
+   fun:ensure_array
+   fun:gst_query_add_allocation_pool
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_id_get_field
+   fun:gst_structure_id_get_value
+   fun:ensure_array
+   fun:gst_query_add_allocation_pool
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_id_get_field
+   fun:gst_structure_id_get_value
+   fun:ensure_array
+   fun:gst_query_add_allocation_pool
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_id_get_field
+   fun:gst_structure_id_get_value
+   fun:ensure_array
+   fun:gst_query_get_n_allocation_pools
+   fun:gst_video_test_src_decide_allocation
+   fun:gst_base_src_prepare_allocation
+   fun:gst_base_src_negotiate
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_id_get_field
+   fun:gst_structure_id_get_value
+   fun:ensure_array
+   fun:gst_query_get_n_allocation_pools
+   fun:gst_video_test_src_decide_allocation
+   fun:gst_base_src_prepare_allocation
+   fun:gst_base_src_negotiate
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_id_get_field
+   fun:gst_structure_id_get_value
+   fun:ensure_array
+   fun:gst_query_get_n_allocation_pools
+   fun:gst_video_test_src_decide_allocation
+   fun:gst_base_src_prepare_allocation
+   fun:gst_base_src_negotiate
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_queue_handle_sink_event
+   fun:gst_pad_send_event_unchecked
+   fun:gst_pad_push_event_unchecked
+   fun:push_sticky
+   fun:events_foreach
+   fun:check_sticky
+   fun:gst_pad_push_event
+   fun:gst_base_transform_sink_eventfunc
+   fun:gst_capsfilter_sink_event
+   fun:gst_pad_send_event_unchecked
+   fun:gst_pad_push_event_unchecked
+   fun:push_sticky
+   fun:events_foreach
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_memory_get_sizes
+   fun:gst_buffer_get_sizes_range
+   fun:gst_buffer_copy_into
+   fun:gst_jpegenc_term_destination
+   fun:jpeg_finish_compress
+   fun:gst_jpegenc_handle_frame
+   fun:gst_video_encoder_chain
+   fun:gst_pad_chain_data_unchecked
+   fun:gst_pad_push_data
+   fun:gst_pad_push
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_mini_object_unref
+   fun:g_value_unset
+   fun:gst_structure_free
+   fun:_gst_query_free
+   fun:gst_query_unref
+   fun:gst_pad_query_accept_caps
+   fun:pre_eventfunc_check
+   fun:gst_pad_send_event_unchecked
+   fun:gst_pad_push_event_unchecked
+   fun:push_sticky
+   fun:events_foreach
+   fun:check_sticky
+   fun:gst_pad_push_event
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   obj:/run/user/1000/orcexec.a6Koz9 (deleted)
+   fun:video_orc_pack_I420
+   fun:pack_planar_420
+   fun:convert_hline_generic
+   fun:videotestsrc_convert_tmpline
+   fun:gst_video_test_src_smpte
+   fun:gst_video_test_src_fill
+   fun:gst_base_src_default_create
+   fun:gst_base_src_get_range
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   obj:/run/user/1000/orcexec.a6Koz9 (deleted)
+   fun:video_orc_pack_I420
+   fun:pack_planar_420
+   fun:convert_hline_generic
+   fun:videotestsrc_convert_tmpline
+   fun:gst_video_test_src_smpte
+   fun:gst_video_test_src_fill
+   fun:gst_base_src_default_create
+   fun:gst_base_src_get_range
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   obj:/run/user/1000/orcexec.a6Koz9 (deleted)
+   fun:video_orc_pack_I420
+   fun:pack_planar_420
+   fun:convert_hline_generic
+   fun:videotestsrc_convert_tmpline
+   fun:gst_video_test_src_smpte
+   fun:gst_video_test_src_fill
+   fun:gst_base_src_default_create
+   fun:gst_base_src_get_range
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   obj:/run/user/1000/orcexec.a6Koz9 (deleted)
+   fun:video_orc_pack_I420
+   fun:pack_planar_420
+   fun:convert_hline_generic
+   fun:videotestsrc_convert_tmpline
+   fun:gst_video_test_src_smpte
+   fun:gst_video_test_src_fill
+   fun:gst_base_src_default_create
+   fun:gst_base_src_get_range
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   obj:/run/user/1000/orcexec.a6Koz9 (deleted)
+   fun:video_orc_pack_I420
+   fun:pack_planar_420
+   fun:convert_hline_generic
+   fun:videotestsrc_convert_tmpline
+   fun:gst_video_test_src_smpte
+   fun:gst_video_test_src_fill
+   fun:gst_base_src_default_create
+   fun:gst_base_src_get_range
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   obj:/run/user/1000/orcexec.a6Koz9 (deleted)
+   fun:video_orc_pack_I420
+   fun:pack_planar_420
+   fun:convert_hline_generic
+   fun:videotestsrc_convert_tmpline
+   fun:gst_video_test_src_smpte
+   fun:gst_video_test_src_fill
+   fun:gst_base_src_default_create
+   fun:gst_base_src_get_range
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   obj:/run/user/1000/orcexec.a6Koz9 (deleted)
+   fun:video_orc_pack_Y
+   fun:convert_hline_generic
+   fun:videotestsrc_convert_tmpline
+   fun:gst_video_test_src_smpte
+   fun:gst_video_test_src_fill
+   fun:gst_base_src_default_create
+   fun:gst_base_src_get_range
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   obj:/run/user/1000/orcexec.a6Koz9 (deleted)
+   fun:video_orc_pack_Y
+   fun:convert_hline_generic
+   fun:videotestsrc_convert_tmpline
+   fun:gst_video_test_src_smpte
+   fun:gst_video_test_src_fill
+   fun:gst_base_src_default_create
+   fun:gst_base_src_get_range
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_queue_is_filled
+   fun:gst_queue_chain_buffer_or_list.isra.9
+   fun:gst_pad_chain_data_unchecked
+   fun:gst_pad_push_data
+   fun:gst_pad_push
+   fun:gst_video_encoder_finish_frame
+   fun:gst_jpegenc_term_destination
+   fun:jpeg_finish_compress
+   fun:gst_jpegenc_handle_frame
+   fun:gst_video_encoder_chain
+   fun:gst_pad_chain_data_unchecked
+   fun:gst_pad_push_data
+   fun:gst_pad_push
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+}
+
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_buffer_map_range
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_buffer_map_range
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_memory_ref
+   fun:_get_merged_memory
+   fun:gst_buffer_map_range
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_memory_map
+   fun:gst_memory_make_mapped
+   fun:gst_buffer_map_range
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:next_marker
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:next_marker
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_interesting_appn
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_interesting_appn
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_interesting_appn
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_dht
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_dht
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_dht
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_dht
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_dht
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:jsimd_can_idct_ifast
+   fun:start_pass
+   fun:prepare_for_output_pass
+   fun:output_pass_setup
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_video_multiview_flagset_get_type
+   fun:gst_video_info_to_caps
+   fun:gst_video_decoder_negotiate_default
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_value_table_peek
+   fun:gst_caps_set_simple_valist
+   fun:gst_caps_set_simple
+   fun:gst_video_info_to_caps
+   fun:gst_video_decoder_negotiate_default
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_value_table_peek
+   fun:gst_caps_set_simple_valist
+   fun:gst_caps_set_simple
+   fun:gst_video_info_to_caps
+   fun:gst_video_decoder_negotiate_default
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_value_table_peek
+   fun:gst_caps_set_simple_valist
+   fun:gst_caps_set_simple
+   fun:gst_video_info_to_caps
+   fun:gst_video_decoder_negotiate_default
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_value_table_peek
+   fun:gst_caps_set_simple_valist
+   fun:gst_caps_set_simple
+   fun:gst_video_info_to_caps
+   fun:gst_video_decoder_negotiate_default
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_video_decoder_negotiate_default
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:find_event_by_type
+   fun:get_pad_caps
+   fun:gst_pad_get_current_caps
+   fun:gst_video_decoder_negotiate_default
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_array_get_type
+   fun:ensure_array
+   fun:gst_query_get_n_allocation_params
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:type_check_is_value_type_U
+   fun:g_type_check_is_value_type
+   fun:g_value_init
+   fun:ensure_array
+   fun:gst_query_get_n_allocation_params
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_value_table_peek
+   fun:g_value_init
+   fun:ensure_array
+   fun:gst_query_get_n_allocation_params
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_value_table_peek
+   fun:g_value_init
+   fun:ensure_array
+   fun:gst_query_get_n_allocation_params
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_value_table_peek
+   fun:g_value_init
+   fun:ensure_array
+   fun:gst_query_get_n_allocation_params
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_value_init
+   fun:ensure_array
+   fun:gst_query_get_n_allocation_params
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_video_buffer_pool_get_type
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_fundamental
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_fundamental
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_class_peek_static
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_class_peek_static
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_class_peek_static
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_class_peek_static
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_class_peek_static
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_class_peek_static
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_create_instance
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_create_instance
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_object_init
+   fun:g_type_create_instance
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_create_instance
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_create_instance
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_create_instance
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_create_instance
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_buffer_pool_get_type
+   fun:gst_buffer_pool_init
+   fun:g_type_create_instance
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_instance_get_private
+   fun:gst_buffer_pool_init
+   fun:g_type_create_instance
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_instance_get_private
+   fun:gst_buffer_pool_init
+   fun:g_type_create_instance
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_data_set_internal
+   fun:g_datalist_id_set_data_full
+   fun:gst_object_set_name_default
+   fun:gst_object_set_name
+   fun:object_set_property
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_data_set_internal
+   fun:g_datalist_id_set_data_full
+   fun:gst_object_set_name_default
+   fun:gst_object_set_name
+   fun:object_set_property
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:_gst_message_free
+   fun:gst_message_unref
+   fun:event_loop
+   fun:main
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_set_parent_refcount
+   fun:_gst_message_free
+   fun:gst_message_unref
+   fun:event_loop
+   fun:main
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:memset
+   fun:g_value_unset
+   fun:gst_structure_free
+   fun:_gst_message_free
+   fun:gst_message_unref
+   fun:event_loop
+   fun:main
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:memset
+   fun:g_value_unset
+   fun:gst_structure_free
+   fun:_gst_message_free
+   fun:gst_message_unref
+   fun:event_loop
+   fun:main
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:memset
+   fun:g_value_unset
+   fun:gst_structure_free
+   fun:_gst_message_free
+   fun:gst_message_unref
+   fun:event_loop
+   fun:main
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_async_queue_length_unlocked
+   fun:g_thread_pool_push
+   fun:workpool_submit
+   fun:gst_jpeg_dec_handle_frame
+   fun:gst_video_decoder_decode_frame
+   fun:gst_video_decoder_chain_forward
+   fun:gst_video_decoder_chain
+   fun:gst_pad_chain_data_unchecked
+   fun:gst_pad_push_data
+   fun:gst_pad_push
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_async_queue_length_unlocked
+   fun:g_thread_pool_push
+   fun:workpool_submit
+   fun:gst_jpeg_dec_handle_frame
+   fun:gst_video_decoder_decode_frame
+   fun:gst_video_decoder_chain_forward
+   fun:gst_video_decoder_chain
+   fun:gst_pad_chain_data_unchecked
+   fun:gst_pad_push_data
+   fun:gst_pad_push
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_data_set_internal
+   fun:g_datalist_id_set_data_full
+   fun:gst_object_set_name_default
+   fun:gst_object_set_name
+   fun:object_set_property
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_data_set_internal
+   fun:g_datalist_id_set_data_full
+   fun:gst_object_set_name_default
+   fun:gst_object_set_name
+   fun:object_set_property
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_instance_get_private
+   fun:gst_buffer_pool_init
+   fun:g_type_create_instance
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_instance_get_private
+   fun:gst_buffer_pool_init
+   fun:g_type_create_instance
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_buffer_pool_get_type
+   fun:gst_buffer_pool_init
+   fun:g_type_create_instance
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_create_instance
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_create_instance
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_create_instance
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_object_init
+   fun:g_type_create_instance
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_create_instance
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_create_instance
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_class_peek_static
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_class_peek_static
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_class_peek_static
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_class_peek_static
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_class_peek_static
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_class_peek_static
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_fundamental
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_fundamental
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_video_buffer_pool_get_type
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_value_init
+   fun:ensure_array
+   fun:gst_query_get_n_allocation_params
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_value_table_peek
+   fun:g_value_init
+   fun:ensure_array
+   fun:gst_query_get_n_allocation_params
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_value_table_peek
+   fun:g_value_init
+   fun:ensure_array
+   fun:gst_query_get_n_allocation_params
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_value_table_peek
+   fun:g_value_init
+   fun:ensure_array
+   fun:gst_query_get_n_allocation_params
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:type_check_is_value_type_U
+   fun:g_type_check_is_value_type
+   fun:g_value_init
+   fun:ensure_array
+   fun:gst_query_get_n_allocation_params
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_array_get_type
+   fun:ensure_array
+   fun:gst_query_get_n_allocation_params
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_video_decoder_negotiate_default
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_value_table_peek
+   fun:gst_caps_set_simple_valist
+   fun:gst_caps_set_simple
+   fun:gst_video_info_to_caps
+   fun:gst_video_decoder_negotiate_default
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_value_table_peek
+   fun:gst_caps_set_simple_valist
+   fun:gst_caps_set_simple
+   fun:gst_video_info_to_caps
+   fun:gst_video_decoder_negotiate_default
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_value_table_peek
+   fun:gst_caps_set_simple_valist
+   fun:gst_caps_set_simple
+   fun:gst_video_info_to_caps
+   fun:gst_video_decoder_negotiate_default
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_value_table_peek
+   fun:gst_caps_set_simple_valist
+   fun:gst_caps_set_simple
+   fun:gst_video_info_to_caps
+   fun:gst_video_decoder_negotiate_default
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_video_multiview_flagset_get_type
+   fun:gst_video_info_to_caps
+   fun:gst_video_decoder_negotiate_default
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:jsimd_can_idct_ifast
+   fun:start_pass
+   fun:prepare_for_output_pass
+   fun:output_pass_setup
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_interesting_appn
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_interesting_appn
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_memory_map
+   fun:gst_memory_make_mapped
+   fun:gst_buffer_map_range
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_memory_ref
+   fun:_get_merged_memory
+   fun:gst_buffer_map_range
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_buffer_map_range
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_buffer_map_range
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_mini_object_unref
+   fun:g_value_unset
+   fun:gst_structure_free
+   fun:_gst_query_free
+   fun:gst_query_unref
+   fun:gst_pad_query_accept_caps
+   fun:pre_eventfunc_check
+   fun:gst_pad_send_event_unchecked
+   fun:gst_pad_push_event_unchecked
+   fun:push_sticky
+   fun:events_foreach
+   fun:check_sticky
+   fun:gst_pad_push_event
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_id_get_field
+   fun:gst_structure_id_get_value
+   fun:ensure_array
+   fun:gst_query_get_n_allocation_pools
+   fun:gst_video_test_src_decide_allocation
+   fun:gst_base_src_prepare_allocation
+   fun:gst_base_src_negotiate
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_id_get_field
+   fun:gst_structure_id_get_value
+   fun:ensure_array
+   fun:gst_query_get_n_allocation_pools
+   fun:gst_video_test_src_decide_allocation
+   fun:gst_base_src_prepare_allocation
+   fun:gst_base_src_negotiate
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_id_get_field
+   fun:gst_structure_id_get_value
+   fun:ensure_array
+   fun:gst_query_add_allocation_pool
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_id_get_field
+   fun:gst_structure_id_get_value
+   fun:ensure_array
+   fun:gst_query_add_allocation_pool
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_id_get_field
+   fun:gst_structure_id_get_value
+   fun:ensure_array
+   fun:gst_query_add_allocation_pool
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_get_string
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_value_get_fraction_denominator
+   fun:gst_structure_get_fraction
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_value_get_fraction_numerator
+   fun:gst_structure_get_fraction
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:strcmp
+   fun:gst_video_format_from_string
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:_gst_debug_get_category_locked
+   fun:_gst_debug_category_new
+   fun:gst_video_buffer_pool_class_init
+   fun:gst_video_buffer_pool_class_intern_init
+   fun:type_class_init_Wm
+   fun:g_type_class_ref
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_query_get_n_allocation_pools
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_query_get_n_allocation_pools
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_get_string
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_get_string
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_value_get_fraction_denominator
+   fun:gst_structure_get_fraction
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_value_get_fraction_numerator
+   fun:gst_structure_get_fraction
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:strcmp
+   fun:gst_video_format_from_string
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_has_name
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:ensure_debug_category
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:g_array_get_type
+   fun:ensure_array
+   fun:gst_query_add_allocation_meta
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:g_array_get_type
+   fun:ensure_array
+   fun:gst_query_add_allocation_meta
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:g_array_get_type
+   fun:ensure_array
+   fun:gst_query_add_allocation_meta
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:g_array_get_type
+   fun:ensure_array
+   fun:gst_query_add_allocation_meta
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:g_array_get_type
+   fun:ensure_array
+   fun:gst_query_add_allocation_meta
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:g_array_get_type
+   fun:ensure_array
+   fun:gst_query_add_allocation_meta
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_quark_from_string
+   fun:gst_meta_api_type_register
+   fun:gst_video_meta_api_get_type
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_quark_from_string
+   fun:gst_meta_api_type_register
+   fun:gst_video_meta_api_get_type
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_quark_from_string
+   fun:gst_meta_api_type_register
+   fun:gst_video_meta_api_get_type
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_quark_from_string
+   fun:gst_meta_api_type_register
+   fun:gst_video_meta_api_get_type
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_quark_from_string
+   fun:gst_meta_api_type_register
+   fun:gst_video_meta_api_get_type
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_quark_from_string
+   fun:gst_meta_api_type_register
+   fun:gst_video_meta_api_get_type
+   fun:gst_jpegenc_propose_allocation
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_video_encoder_sink_event
+   fun:gst_pad_send_event_unchecked
+   fun:gst_pad_push_event_unchecked
+   fun:push_sticky
+   fun:events_foreach
+   fun:check_sticky
+   fun:gst_pad_push_event
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:find_event_by_type
+   fun:get_pad_caps
+   fun:gst_pad_get_current_caps
+   fun:gst_video_decoder_negotiate_default
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_queue_handle_sink_event
+   fun:gst_pad_send_event_unchecked
+   fun:gst_pad_push_event_unchecked
+   fun:push_sticky
+   fun:events_foreach
+   fun:check_sticky
+   fun:gst_pad_push_event
+   fun:gst_base_transform_sink_eventfunc
+   fun:gst_capsfilter_sink_event
+   fun:gst_pad_send_event_unchecked
+   fun:gst_pad_push_event_unchecked
+   fun:push_sticky
+   fun:events_foreach
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:gst_video_buffer_pool_get_type
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:gst_video_buffer_pool_get_type
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:gst_video_buffer_pool_get_type
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:gst_video_buffer_pool_get_type
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:gst_video_buffer_pool_get_type
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_hash_table_insert_node
+   fun:g_hash_table_insert_internal
+   fun:quark_new
+   fun:quark_from_string
+   fun:g_intern_static_string
+   fun:gst_video_buffer_pool_get_type
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_get_string
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_has_name
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_caps_is_fixed
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_mini_object_ref
+   fun:boxed_proxy_collect_value
+   fun:gst_structure_id_set_valist_internal
+   fun:gst_structure_id_set
+   fun:gst_buffer_pool_config_set_params
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:_gst_debug_get_category_locked
+   fun:_gst_debug_category_new
+   fun:gst_video_buffer_pool_class_init
+   fun:gst_video_buffer_pool_class_intern_init
+   fun:type_class_init_Wm
+   fun:g_type_class_ref
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:_gst_debug_get_category_locked
+   fun:_gst_debug_category_new
+   fun:gst_video_buffer_pool_class_init
+   fun:gst_video_buffer_pool_class_intern_init
+   fun:type_class_init_Wm
+   fun:g_type_class_ref
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:_gst_debug_get_category_locked
+   fun:_gst_debug_category_new
+   fun:gst_video_buffer_pool_class_init
+   fun:gst_video_buffer_pool_class_intern_init
+   fun:type_class_init_Wm
+   fun:g_type_class_ref
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_query_get_n_allocation_pools
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_create_instance
+   fun:g_object_new_internal
+   fun:g_object_newv
+   fun:g_object_new
+   fun:gst_video_buffer_pool_new
+   fun:gst_video_decoder_decide_allocation_default
+   fun:gst_jpeg_dec_decide_allocation
+   fun:gst_video_decoder_negotiate_pool
+   fun:gst_video_decoder_negotiate
+   fun:gst_jpeg_dec_negotiate
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:ensure_debug_category
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_sof
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_set_parent_refcount
+   fun:_gst_message_free
+   fun:gst_message_unref
+   fun:event_loop
+   fun:main
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:_gst_message_free
+   fun:gst_message_unref
+   fun:event_loop
+   fun:main
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_dht
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_dht
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_dht
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_id_get_field
+   fun:gst_structure_id_get_value
+   fun:ensure_array
+   fun:gst_query_add_allocation_pool
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_id_get_field
+   fun:gst_structure_id_get_value
+   fun:ensure_array
+   fun:gst_query_add_allocation_pool
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_get_int
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_get_int
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:strcmp
+   fun:gst_video_format_from_string
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_id_get_field
+   fun:gst_structure_id_get_value
+   fun:ensure_array
+   fun:gst_query_add_allocation_param
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_id_get_field
+   fun:gst_structure_id_get_value
+   fun:ensure_array
+   fun:gst_query_add_allocation_param
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_value_get_fraction_denominator
+   fun:gst_structure_get_fraction
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_value_get_fraction_numerator
+   fun:gst_structure_get_fraction
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_get_int
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_get_int
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:strcmp
+   fun:gst_video_format_from_string
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_id_get_field
+   fun:gst_structure_id_get_value
+   fun:ensure_array
+   fun:gst_query_get_n_allocation_pools
+   fun:gst_video_test_src_decide_allocation
+   fun:gst_base_src_prepare_allocation
+   fun:gst_base_src_negotiate
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_get_string
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_get_string
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:next_marker
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:next_marker
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:memset
+   fun:g_value_unset
+   fun:gst_structure_free
+   fun:_gst_message_free
+   fun:gst_message_unref
+   fun:event_loop
+   fun:main
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:memset
+   fun:g_value_unset
+   fun:gst_structure_free
+   fun:_gst_message_free
+   fun:gst_message_unref
+   fun:event_loop
+   fun:main
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:memset
+   fun:g_value_unset
+   fun:gst_structure_free
+   fun:_gst_message_free
+   fun:gst_message_unref
+   fun:event_loop
+   fun:main
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_check_value
+   fun:gst_value_is_fixed
+   fun:gst_structure_foreach
+   fun:gst_buffer_pool_config_set_params
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_value_get_fraction_denominator
+   fun:gst_structure_get_fraction
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_value_get_fraction_numerator
+   fun:gst_structure_get_fraction
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_interesting_appn
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_buffer_pool_config_set_params
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_video_info_from_caps
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_queue_is_filled
+   fun:gst_queue_chain_buffer_or_list.isra.9
+   fun:gst_pad_chain_data_unchecked
+   fun:gst_pad_push_data
+   fun:gst_pad_push
+   fun:gst_video_encoder_finish_frame
+   fun:gst_jpegenc_term_destination
+   fun:jpeg_finish_compress
+   fun:gst_jpegenc_handle_frame
+   fun:gst_video_encoder_chain
+   fun:gst_pad_chain_data_unchecked
+   fun:gst_pad_push_data
+   fun:gst_pad_push
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_memory_get_sizes
+   fun:gst_buffer_get_sizes_range
+   fun:gst_buffer_copy_into
+   fun:gst_jpegenc_term_destination
+   fun:jpeg_finish_compress
+   fun:gst_jpegenc_handle_frame
+   fun:gst_video_encoder_chain
+   fun:gst_pad_chain_data_unchecked
+   fun:gst_pad_push_data
+   fun:gst_pad_push
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:gst_structure_foreach
+   fun:gst_video_info_from_caps
+   fun:video_buffer_pool_set_config
+   fun:gst_buffer_pool_set_config
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_dht
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:g_type_check_value
+   fun:gst_value_is_fixed
+   fun:gst_structure_foreach
+   fun:gst_buffer_pool_config_set_params
+   fun:gst_video_encoder_propose_allocation_default
+   fun:gst_video_encoder_sink_query_default
+   fun:gst_pad_query
+   fun:gst_pad_peer_query
+   fun:gst_queue_push_one
+   fun:gst_queue_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   fun:get_dht
+   fun:read_markers
+   fun:consume_markers
+   fun:jpeg_consume_input
+   fun:jpeg_read_header
+   fun:gst_jpeg_dec_process_frame
+   fun:work_handler
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+   obj:/usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so
+   fun:start_thread
+   fun:clone
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   obj:/run/user/1000/orcexec.a6Koz9 (deleted)
+   fun:video_orc_pack_Y
+   fun:convert_hline_generic
+   fun:videotestsrc_convert_tmpline
+   fun:gst_video_test_src_smpte
+   fun:gst_video_test_src_fill
+   fun:gst_base_src_default_create
+   fun:gst_base_src_get_range
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   obj:/run/user/1000/orcexec.a6Koz9 (deleted)
+   fun:video_orc_pack_Y
+   fun:convert_hline_generic
+   fun:videotestsrc_convert_tmpline
+   fun:gst_video_test_src_smpte
+   fun:gst_video_test_src_fill
+   fun:gst_base_src_default_create
+   fun:gst_base_src_get_range
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+   fun:g_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   obj:/run/user/1000/orcexec.a6Koz9 (deleted)
+   fun:video_orc_pack_I420
+   fun:pack_planar_420
+   fun:convert_hline_generic
+   fun:videotestsrc_convert_tmpline
+   fun:gst_video_test_src_smpte
+   fun:gst_video_test_src_fill
+   fun:gst_base_src_default_create
+   fun:gst_base_src_get_range
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   obj:/run/user/1000/orcexec.a6Koz9 (deleted)
+   fun:video_orc_pack_I420
+   fun:pack_planar_420
+   fun:convert_hline_generic
+   fun:videotestsrc_convert_tmpline
+   fun:gst_video_test_src_smpte
+   fun:gst_video_test_src_fill
+   fun:gst_base_src_default_create
+   fun:gst_base_src_get_range
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   obj:/run/user/1000/orcexec.a6Koz9 (deleted)
+   fun:video_orc_pack_I420
+   fun:pack_planar_420
+   fun:convert_hline_generic
+   fun:videotestsrc_convert_tmpline
+   fun:gst_video_test_src_smpte
+   fun:gst_video_test_src_fill
+   fun:gst_base_src_default_create
+   fun:gst_base_src_get_range
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   obj:/run/user/1000/orcexec.a6Koz9 (deleted)
+   fun:video_orc_pack_I420
+   fun:pack_planar_420
+   fun:convert_hline_generic
+   fun:videotestsrc_convert_tmpline
+   fun:gst_video_test_src_smpte
+   fun:gst_video_test_src_fill
+   fun:gst_base_src_default_create
+   fun:gst_base_src_get_range
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   obj:/run/user/1000/orcexec.a6Koz9 (deleted)
+   fun:video_orc_pack_I420
+   fun:pack_planar_420
+   fun:convert_hline_generic
+   fun:videotestsrc_convert_tmpline
+   fun:gst_video_test_src_smpte
+   fun:gst_video_test_src_fill
+   fun:gst_base_src_default_create
+   fun:gst_base_src_get_range
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
+{
+   <insert_a_suppression_name_here>
+   Helgrind:Race
+   obj:/run/user/1000/orcexec.a6Koz9 (deleted)
+   fun:video_orc_pack_I420
+   fun:pack_planar_420
+   fun:convert_hline_generic
+   fun:videotestsrc_convert_tmpline
+   fun:gst_video_test_src_smpte
+   fun:gst_video_test_src_fill
+   fun:gst_base_src_default_create
+   fun:gst_base_src_get_range
+   fun:gst_base_src_loop
+   fun:gst_task_func
+   fun:g_thread_pool_thread_proxy
+}
diff --git a/ext/jpeg/ug.h b/ext/jpeg/ug.h
new file mode 100644
index 000000000..98b8a8d41
--- /dev/null
+++ b/ext/jpeg/ug.h
@@ -0,0 +1,113 @@
+// UG is a library of Utilities for Glib to make use of that library easier.
+
+#if !defined(H_UG)
+# define H_UG
+
+# include <stdarg.h>
+# include <stdint.h>
+
+# include <glib.h>
+# include <glib-object.h>
+
+# define ug_new(T)            ug_alloc(sizeof(T))
+# define ug_newarr(T,n)       ug_calloc(sizeof(T),n)
+# define ug_renewarr(ap,T,n)  ug_recalloc(ap,sizeof(T),n)
+# define ug_renewfarr(ap,T,n) ug_recallocf(ap,sizeof(T),n)
+
+  static inline void * ug_free
+    ( void const *p
+    )
+    { 
+      if(p) 
+        g_free((void *)p); 
+      return NULL; 
+    }
+
+  static inline void *ug_alloc
+    ( gsize n
+    )
+    { 
+      return g_malloc(n); 
+    }
+
+  static inline void *ug_calloc
+    ( gsize n
+    , guint c
+    )  
+    { 
+      return g_malloc(n*c); 
+    }
+
+  // The re?alloc family of functions take a pointer to a pointer to
+  // the memory to reallocate. On success the pointer to memory points
+  // to the reallocated memory and the routine returns TRUE. On failure
+  // the pointer to memory continues to point to the old memory, and the
+  // routine returns FALSE;
+
+  static inline gboolean ug_realloc
+    ( void     * pp
+    , gsize      n
+    ) 
+    { gboolean   ret = TRUE;
+      void     * mem = *(void **)pp;
+      void     * rem = g_realloc(mem,n);
+
+      if( rem )
+        *(void **)pp = rem;
+      else
+        ret = FALSE;
+      return ret;
+    }
+
+  static inline gboolean ug_recalloc
+    ( void *pp
+    , gsize n
+    , guint c
+    )
+    { 
+      return ug_realloc(pp,n*c); 
+    }
+
+  // The re?allocf family of functions take a pointer to a pointer to
+  // the memory to reallocate. On success the pointer to memory points
+  // to the reallocated memory and the routine returns TRUE. On failure
+  // the old memory is freed, the pointer to memory is set NULL, and the
+  // routine returns FALSE;
+
+  // I use char * as my underlaying representation rather than void * as it
+  // is an allowed exception to the type-punning rules and void * is not.
+  static inline gboolean ug_reallocf
+    ( void     * pp
+    , gsize      n
+    ) 
+    { gboolean   ret = TRUE;
+      char    ** mpp = pp;
+      char     * rem = g_realloc(*mpp,n);
+
+      if( !rem )
+        {
+          ug_free(*mpp);
+          ret = FALSE;
+        }
+      *mpp = rem;
+      return ret;
+    }
+
+  static inline gboolean ug_recallocf
+    ( void *pp
+    , gsize n
+    , guint c
+    )
+    { 
+      return ug_reallocf(pp,n*c); 
+    }
+
+  // Needs to be code, as its usually passed as a function pointer.
+  static inline void ug_destroy
+    ( gpointer data
+    )
+    { 
+      ug_free(data); 
+    }
+
+#endif
diff --git a/ext/jpeg/vg1.sh b/ext/jpeg/vg1.sh
new file mode 100755
index 000000000..12f5b63eb
--- /dev/null
+++ b/ext/jpeg/vg1.sh
@@ -0,0 +1,19 @@
+#!/bin/bash
+
+TEST_DIR="$PWD/$(dirname $0)"
+SUPP_DIR="../../common"
+SUPP_GST=$SUPP_DIR/gst.supp
+SUPP_TEST=test.supp
+
+export G_SLICE=always-malloc
+
+echo "jpegdec run under memcheck to check for memory issues."
+
+valgrind --suppressions=$SUPP_GST --suppressions=$SUPP_TEST		 \
+  --verbose  --gen-suppressions=all --read-var-info=yes			 \
+  --trace-children=yes                                                   \
+  --sim-hints=lax-ioctls,fuse-compatible,no-nptl-pthread-stackcache      \
+  --tool=helgrind							 \
+    gst-launch-1.0 --gst-plugin-path=. --gst-debug=WORKPOOL:6		 \
+      videotestsrc num-buffers=40 ! video/x-raw,width=1920,height=1080 ! \
+      queue ! jpegenc ! queue ! jpegdec ! fakesink sync=true
diff --git a/ext/jpeg/work.c b/ext/jpeg/work.c
new file mode 100644
index 000000000..583d5e3e9
--- /dev/null
+++ b/ext/jpeg/work.c
@@ -0,0 +1,228 @@
+// work - WorkPools are a gst-friendlier version of GThreadPools
+
+#include <gst/gst.h>
+
+#include "work.h"
+#include "ug.h"
+
+GST_DEBUG_CATEGORY_STATIC (workpool_category);
+#define GST_CAT_DEFAULT workpool_category
+
+// we keep our own count and threads as the ones maintained by
+// the g_thread_pool are unreliable.
+struct WorkPool
+{
+  GThreadPool *pool;
+  GHashTable *hash;             // Hash holding data free functions.
+  gpointer global;              // pool-global user data
+  guint count;                  // count of active threads
+  guint threads;                // maximum threads in pool
+  GError *err;                  // pointer to any errors.
+  GMutex mutex;
+  GCond cond;
+};
+
+typedef struct Work
+{
+  WorkFunc *func;
+  void *data;
+  GDestroyNotify free;
+}
+Work;
+
+static Work *
+work_new (WorkFunc * func, void *data, GDestroyNotify free)
+{
+  Work *ret = ug_new (Work);
+
+  if (ret) {
+    ret->func = func;
+    ret->data = data;
+    ret->free = free;
+  }
+  return ret;
+}
+
+
+static void *
+work_free (Work * work)
+{
+  GST_LOG ("Job Freed. Calling Callbacks");
+  if (work && work->free)
+    work->free (work->data);
+  return ug_free (work);
+}
+
+
+static void
+work_destroy (gpointer data)
+{
+  work_free (data);
+}
+
+gboolean workpool_submit
+    (WorkPool * work, WorkFunc * func, void *data, GDestroyNotify free,
+    GError ** err)
+{
+  gboolean ret = FALSE;
+
+  GST_LOG ("New Job Submitted");
+
+  if (err && *err)
+    GST_LOG ("Submission Aborted due to Passed-In Active Error");
+  else if (work->err) {
+    GST_LOG ("Submission Aborted due to Previous Worker Error");
+    g_propagate_error (err, work->err);
+    work->err = NULL;
+  } else {
+    Work *job = work_new (func, data, free);
+
+    if (!job)
+      g_set_error
+          (err, WORKPOOL_QUARK, WORKPOOL_ERR_MEMORY,
+          "Cannot allocate a worker-thread's job instance");
+    else {
+      g_mutex_lock (&work->mutex);
+
+      // Wait for a space in the pool.
+      while (work->threads && work->count >= work->threads)
+        g_cond_wait (&work->cond, &work->mutex);
+
+      if (!work->threads) {
+        g_set_error
+            (err, WORKPOOL_QUARK, WORKPOOL_ERR_INTERNAL,
+            "Not accepting New Jobs");
+        work_free (job);
+      } else {
+        g_hash_table_add (work->hash, job);
+        g_thread_pool_push (work->pool, job, NULL);
+        GST_LOG ("%d Jobs now in work pool", ++work->count);
+        ret = TRUE;
+        g_cond_broadcast (&work->cond);
+      }
+      g_mutex_unlock (&work->mutex);
+    }
+  }
+  return ret;
+}
+
+static void
+work_handler (gpointer job_data, gpointer workpool)
+{
+  WorkPool *work = workpool;
+  Work *job = job_data;
+  GError *joberr = NULL;
+
+  GST_LOG ("Starting a Job from the Pool");
+  // If we don't already have a pool-global error condition, then try the
+  // job.  and if the job fails, try to set the global error and if the
+  // global error has been set in the meantime, then free the local error,
+  // else make the local error global.
+
+  if (!work->err && !job->func (work->global, job->data, &joberr))
+  {
+    g_mutex_lock (&work->mutex);
+    if (work->err)
+      g_error_free (joberr);
+    else
+      work->err = joberr;
+    g_mutex_unlock (&work->mutex);
+  }
+  g_mutex_lock (&work->mutex);
+
+  // g_hash_table_remove will automagically call the dispose method
+  // for the job, which will call the job's callback function.
+  GST_LOG ("Job Finished. Activating Cleanup");
+  g_hash_table_remove (work->hash, job);
+  GST_LOG ("%d Jobs now in work pool", --work->count);
+  g_cond_broadcast (&work->cond);
+  g_mutex_unlock (&work->mutex);
+}
+
+gboolean
+workpool_set_threads (WorkPool * work, gint threads, GError ** err)
+{
+  gboolean ret = FALSE;
+
+  if ((!err || !*err) && work) {
+    work->threads = threads;
+    ret = g_thread_pool_set_max_threads (work->pool, threads, err);
+  }
+
+  return ret;
+}
+
+void
+workpool_empty (WorkPool * work)
+{
+  g_mutex_lock (&work->mutex);
+  // Wait for all running jobs to finish.
+  while (work->count > 0)
+    g_cond_wait (&work->cond, &work->mutex);
+  g_mutex_unlock (&work->mutex);
+}
+
+WorkPool *
+workpool_free (WorkPool * work)
+{
+  if (work) {
+    GThreadPool *pool = work->pool;
+
+    if (pool) {
+      // Ensure no new jobs get started.
+      workpool_set_threads (work, 0, NULL);
+
+      g_mutex_lock (&work->mutex);
+      // Wait for all running jobs to finish.
+      while (work->count > 0)
+        g_cond_wait (&work->cond, &work->mutex);
+
+      // blocking call to request immediate shutdown of pool
+      g_thread_pool_free (work->pool, TRUE, TRUE);
+
+      // Free hash table of all un-run jobs and their data
+      if (g_hash_table_size (work->hash) > 0)
+        g_warning ("%d Orphan Jobs in Work Pool",
+            g_hash_table_size (work->hash));
+      g_hash_table_unref (work->hash);
+      g_mutex_unlock (&work->mutex);
+      g_mutex_clear (&work->mutex);
+      g_cond_clear (&work->cond);
+    }
+    g_clear_error (&work->err);
+    ug_free (work);
+  }
+  return NULL;
+}
+
+
+WorkPool *
+workpool_new (gint threads, void *global, GError ** err)
+{
+  WorkPool *work = ug_new (WorkPool);
+  GHashTable *hash = g_hash_table_new_full (NULL, NULL, NULL, work_destroy);
+
+  GST_DEBUG_CATEGORY_INIT (workpool_category, "WORKPOOL", 0, "Worker Threads");
+
+  if (!work || !hash) {
+    g_set_error
+        (err, WORKPOOL_QUARK, WORKPOOL_ERR_MEMORY,
+        "Memory Error while allocating a worker thread pool");
+    if (hash)
+      g_hash_table_unref (hash);
+    work = ug_free (work);
+  } else {
+    work->err = NULL;
+    work->hash = hash;
+    work->global = global;
+    work->threads = threads;
+    work->count = 0;
+    work->pool = g_thread_pool_new (work_handler, work, threads, FALSE, err);
+    if (work->pool) {
+      g_cond_init (&work->cond);
+      g_mutex_init (&work->mutex);
+    } else
+      work = workpool_free (work);
+  }
+  return work;
+}
diff --git a/ext/jpeg/work.h b/ext/jpeg/work.h
new file mode 100644
index 000000000..b8c744208
--- /dev/null
+++ b/ext/jpeg/work.h
@@ -0,0 +1,71 @@
+// work.h -- Gst-Friendly Thread Pools and Workers
+
+#if !defined(H_WORK)
+# define H_WORK
+
+# include <glib.h>
+
+# define WORKPOOL_QUARK  g_quark_from_static_string("workpool")
+
+typedef struct WorkPool WorkPool;
+
+typedef enum WorkPoolErr
+{ WORKPOOL_ERR_NONE, WORKPOOL_ERR_INTERNAL, WORKPOOL_ERR_BAD_VERSION,
+      WORKPOOL_ERR_BAD_OPTION, WORKPOOL_ERR_BAD_URI, WORKPOOL_ERR_DBUS,
+      WORKPOOL_ERR_IO, WORKPOOL_ERR_MEMORY, WORKPOOL_ERR_PLUGIN,
+      WORKPOOL_ERR_PIPELINE, WORKPOOL_ERR_SECURITY, WORKPOOL_ERR_TASK,
+      WORKPOOL_ERR_LOCALE, WORKPOOL_ERR_
+}
+WorkPoolErr;
+
+typedef gboolean WorkFunc (void *pool_data, void *job_data, GError ** err);
+
+// Submit a function to the async work queue, along with optional user-data
+// and an optional routine to free the user-data when the function finishes.
+// workpool_submit returns immediately with true if the work was successfully
+// submitted, or with FALSE and an error if it failed to submit. It will fail
+// if it cannot create a new job entry, or if a work function has set an error
+// condition (in which case that error will be returned, and cleared
+// internally). 
+//
+// The supplied function should perform its task and either return TRUE if
+// successful, or should set an error condition and return FALSE if not.
+//
+// No special signalling method is provided if worker coordination is
+// required. That is left up to the worker function in question. Note that its
+// often a good idea to return results and/or callbacks in the free function
+// as it is guaranteed to be called in all cases, whereas the main function is
+// not called if it never gets scheduled (due, for example, to premature
+// shutdown of the work queue). For this reason, if the free function is
+// provided, it will get called, even if the data pointer (its only parameter)
+// is NULL.
+
+gboolean workpool_submit
+    (WorkPool * work, WorkFunc * func, void *job_data, GDestroyNotify free,
+    GError ** err);
+
+// Create a new workpool. The threads parameter controls the maximum number of
+// threads to run at a time. A value of zero will disable creation of new
+// threads. A value of -1 means unlimited. The optional pool_data will be
+// passed to any worker function submitted to the pool. The error condition
+// will only be set if the workpool could not be created.
+WorkPool *workpool_new (gint threads, void *pool_data, GError ** err);
+
+WorkPool *workpool_free (WorkPool * work);
+
+// Sets the maximum number of threads in the workpool. Set to zero to preven
+// new jobs from being accepted.
+gboolean workpool_set_threads
+  ( WorkPool * work
+  , gint       threads
+  , GError   ** err
+  );
+
+
+// Waits until there are no threads in the workpool. Does not prevent new jobs
+// from being started, that's up to the caller.
+void workpool_empty
+  ( WorkPool * work
+  );
+
+#endif
