# Bash Common configuration to be sourced.

# External Configuration

TOP_DIR="$(dirname $(realpath ${BASH_SOURCE[0]}))"
ORG_SH="$(basename ${BASH_SOURCE[-1]})"

source ${TOP_DIR}/NDK.cfg

_TRIP="arm-linux-androideabi"
TOOLCHAIN="${_TRIP}-userful"
TOOLCHAIN_ARCH="linux-x86_64"
TOOLCHAIN_PREFIX="${NDK_TOOLCHAIN_DIR}"
TEST_CLANG="${TOOLCHAIN_PREFIX}/bin/${_TRIP}-clang"
TEST_GCC="${TOOLCHAIN_PREFIX}/bin/${_TRIP}-gcc"

unset NDK_DIR_GOOD
if   [[ -z "${NDK_DIR}" ]]; then
  echo "ERROR: \$NDK_DIR: Not set"
elif [[ ! -d "${NDK_DIR}" ]]; then
  echo "ERROR: \$NDK_DIR: Not a directory: \"${NDK_DIR}\"" 
elif [[ ! -x "${TEST_CLANG}" ]]; then 
  echo "ERROR: \$NDK_DIR: Not a valid toolchain: \"${NDK_DIR}\""
  echo "   \"$TEST_CLANG\" does not exist. "
elif [[ ! -x "${TEST_GCC}" ]]; then 
  echo "ERROR: gcc not found in toolchain: \"${NDK_DIR}\""
else
  GCC_VER="$(${TEST_GCC} -dumpversion)"
  NDK_DIR_GOOD=1
fi

if [[ -z "${NDK_DIR_GOOD}" ]]; then
  exit -1
else 
  echo "Using Clang toolchain with GCC ${GCC_VER}"
fi

# Basic Package Structure

TOOL_DIR="${TOP_DIR}/tool"
TOOLBIN_DIR="${TOOL_DIR}/bin"

DIST_DIR="${TOP_DIR}/dist"
PREFIX_DIR="${DIST_DIR}"
LIB_DIR="${DIST_DIR}/lib"

DIST_SUBS=(bin include lib share)

for s in ${DIST_SUBS[@]}; do
  _SUB="${DIST_DIR}/$s"
  if [[ ! -d $_SUB ]]; then
    echo "Creating $_SUB"
    mkdir -p $_SUB
  fi
done

TOOL_SUBS=(bin include lib share)

for s in ${TOOL_SUBS[@]}; do
  _SUB="${TOOL_DIR}/$s"
  if [[ ! -d $_SUB ]]; then
    echo "Creating $_SUB"
    mkdir -p $_SUB
  fi
done

# Project Detection. Note that $PRJ_DIR is the directory containing the
# project we are currently building.

if [[ -z "${PRJ_DIR}" ]]; then
  echo "Must set PRJ_DIR in a project\'s *.sh files!"
  exit 1
fi

__SRC="source"

PRJ="${PRJ_DIR##*/}"

OLD_IFS="${IFS}"
IFS=$'\n'
_CAND=( $(ls -1v ${PRJ_DIR}/${__SRC}/*.tar* 2>/dev/null ) )
PRJ_PATCHES=( $(ls -1v ${PRJ_DIR}/${__SRC}/*.patch 2>/dev/null ) )
IFS="${OLD_IFS}"

echo ls -1v ${PRJ_DIR}/${__SRC}/\*.tar\* =\> \( ${_CAND[@]} \)
echo ls -1v ${PRJ_DIR}/${__SRC}/\*.patch =\> \( ${PRJ_PATCHES[@]} \)

if [[ ${#_CAND[@]} -gt 0 ]]; then
  PRJ_ARC="${_CAND[-1]}"
fi

if [[ ! -f ${PRJ_ARC} ]]; then
  echo "No Source Archives Found"
  exit -1
fi

for d in $(echo ${PRJ_DIR}/${__SRC}/${PRJ}-*); do
  if [[ -d "$d" ]]; then
    PRJ_SRC_FULL="${d}"
  fi
done

if [[ "x${PRJ_SRC_FULL}" == "x" ]]; then
  PRJ_SRC_FULL="${PRJ_ARC%%.t*}"
fi

PRJ_SRC="${PRJ_SRC_FULL##*/}"
PRJ_VER="${PRJ_SRC#${PRJ}-}"

echo Entering Project $PRJ V.${PRJ_VER}
  
if [[ ! -d ${PRJ_SRC_FULL} ]]; then
  echo "Expanding Source"
  cd "${PRJ_DIR}/${__SRC}"
  tar -xvaf ${PRJ_ARC}
  if [[ ${#PRJ_PATCHES[@]} -gt 0 ]]; then
    echo "Applying Patches"
    cd ${PRJ_SRC_FULL}
    for p in ${PRJ_PATCHES[@]}; do
      echo patch $p ...
      patch -Np1 <"$p" || exit -1
    done
    cd ${PRJ_DIR}/${__SRC}
  fi
  cd ..
fi

echo $PRJ is ready to Build

  
